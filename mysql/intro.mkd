<cmeta http-equiv='Content-Type' content='text/html; charset=utf-8' /> 
<style>
pre{background:#F8F8FF; border:black dashed 1px; padding:6px}
</style>


# Index 


# <a name="Prise_en_main_mysql" /> Prise en main de Mysql

Bon fini la théorie on va mettre la main à la patte maintenant, pour rappel je ne suis pas Administrateur de base de données de formation, donc mon niveau est moindre qu'un professionnel. J'espère que je vous offrirai une base adéquate !


# <a name="install_mysql" /> Installation de Mysql

Bon l'installation , je vous suggère FORTEMENT d'utiliser le système de pacquage de votre distribution afin d'avoir l'ensemble des mises à jours dans le temps. Mysql est très très populaire toutes les distributions l'offre, si Mysql n'est pas disponible regardez pour MariaDB .

* Installation avec __apt__

        $ sudo apt-get install mysql-server

* Installation avec __yum__

        $ sudo yum install mysql-server

La magie du système de pacquage vous a probablement fait l'ensemble de la configuration : 

* Création du l'utilisateur __mysql__ 
* Initialisation de la Base de donnée vierge
* Initialisation du mot de passe **root**

Avant de poursuivre j'aimerai prendre quelques minutes pour voir les opérations réalisés par le système de gestion de pacquage afin de comprendre sous le capot. 

* Création de l'utilisateur __mysql__
    Afin de ne pas avoir le processus __mysql__ serveur en exécution sous l'utilisateur **root** le système à créer un utilisateur probablement nommé __mysql__ . Le numéro sous Ubuntu ne sera pas le même , pas de panic c'est juste un numéro :P

            $ id mysql
            uid=999(mysql) gid=999(mysql) groups=999(mysql)
            $ ps aux | grep mysql
            mysql        1  0.0  0.5 457192 46872 ?        Ssl  20:52   0:00 mysqld

* Initialisation de la base de données vierge 
    Je prend le temps de présenter cette partie, car je fus un jour pris avec ce besoin puis j'ai constaté que j'avais aucune idée comment le pacquage avait effectué l'opération. __Mysql__ fournit un script [mysql\_install\_db](http://dev.mysql.com/doc/refman/5.5/en/mysql-install-db.html) qui permet d'initialiser la base de données . Pour que __Mysql__ démarre le serveur à besoin d'une base de données, bien souvent les scripts d'initialisation (__/etc/init.d/mysql__) intègre la création de cette base de données, mais pas toujours. Voici un exemple :

            $ mysql_install_db --datadir=/tmp/toto --user=mysql --basedir=/usr/local/mysql
            [... OUTPUT COUPÉ ...]
            $ ls -l /tmp/toto
            total 8
            drwx------ 2 mysql root  4096 Oct 11 21:12 mysql
            drwx------ 2 mysql mysql 4096 Oct 11 21:12 performance_schema
            drwx------ 2 mysql root     6 Oct 11 21:12 test
            $ ls -l /tmp/toto/mysql/
            total 1052
            -rw-rw---- 1 mysql mysql      0 Oct 11 21:12 columns_priv.MYD
            -rw-rw---- 1 mysql mysql   4096 Oct 11 21:12 columns_priv.MYI
            -rw-rw---- 1 mysql mysql   8820 Oct 11 21:12 columns_priv.frm
            -rw-rw---- 1 mysql mysql    880 Oct 11 21:12 db.MYD
            -rw-rw---- 1 mysql mysql   5120 Oct 11 21:12 db.MYI
            [... OUTPUT COUPÉ ... ]
            -rw-rw---- 1 mysql mysql    344 Oct 11 21:12 user.MYD
            -rw-rw---- 1 mysql mysql   2048 Oct 11 21:12 user.MYI
            -rw-rw---- 1 mysql mysql  10630 Oct 11 21:12 user.frm

    Nous aurons l'occasion de voir plus en détail le contenu de ces fichiers, rapidement ceci comprends 3 base de données :

    * **mysql** : contenant la configuration de la base de données (actuellement vide).
    * **performance_schema** : Cette base de données permet le stockage d'information de performance de __mysql__
    * **test** : une base de données de test.

    On y revient dans quelques minutes :D 

* Initialisation du mot de passe de l'administrateur
    Bon comme toujours on veut probablement sécurisé cette base de donnée, selon la distribution vous avez soit entré un mot de passe pour l'administrateur lors de l'installation du serveur. Si vous n'avez rien définie alors le mot de passe __root__ est vide :-/. Pour changer la valeur vous pouvez utiliser la commande **mysqladmin** .

            $ mysqladmin -u root -p password  
            Enter password: 
            New password: 
            Confirm new password: 

    Dans le cas présent , ma base de donnée avait déjà un mot de passe assigné je l'ai donc simplement modifier avec un "meilleur" mot de passe :D.


* Démarrage du service et activation pour que le service démarre au __boot__ de la machine

        $ sudo systemctl start mysql.service
        $ sudo systemctl enable mysql.service
        ou
        $ sudo /etc/init.d/mysql start

# <a name="mysql_connection" /> Établir une connexion à mysql 

Cool nous avons un service __Mysql__ actif, nous pouvons valider que le service écoute bien sur le port **3306** celui par défaut :

        $ sudo ss -lntp | grep 3306
        State      Recv-Q Send-Q                      Local Address:Port                 Peer Address:Port 
        LISTEN     0      50                          *:3306                             *:* 

Dans la situation présente mon service __MySQL__ écoute sur l'ensemble des adresses IP , par défaut le service écoute uniquement sur l'Ip 127.0.0.1 donc __localhost__. 

Réalisons une connexion au service avec l'utilisateur __root__ :

        $ mysql -u root -p 
        Enter password: 
        Welcome to the MySQL monitor.  Commands end with ; or \g.
        Your MySQL connection id is 2
        Server version: 5.5.52 MySQL Community Server (GPL)

        Copyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved.

        Oracle is a registered trademark of Oracle Corporation and/or its
        affiliates. Other names may be trademarks of their respective
        owners.

        Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

        mysql>

Nous entrons dans le système de __Mysql__ pour sortir tapé l'instruction : **quit** ou **bye** ou **CTRL+D** .

Description des options:

* **-u** : spécifie le nom de l'utilisateur pour la connexion.
* **-p** : spécifie qu'il y a un mot de passe à entré , qui vous sera demandé sur la ligne de commande. Si vous n'avez pas cette option vous aurez probablement l'erreur suivante ...

            ERROR 1045 (28000): Access denied for user 'root'@'localhost' (using password: NO)

Clarification du processus de connexion , avec la commande présenté si dessus le système n'utilisera  pas la couche IP pour réaliser la communication, il utilisera le fichier **socket** qui est par défaut : **/tmp/mysql.sock** . 
Si vous désirez établir une connexion à un serveur distant ou utiliser le protocole __TCP__ vous devrez utiliser l'option **-h** voici un exemple:

        $ mysql -u root -h 127.0.0.1 -p 

Bien entendu de nombreuse autre option son disponible , simplement consulter le man page de __mysql__

# <a name="db_manip" /> Manipulation des base de données


## <a name="create_db" /> Visualisation des base de données et création d'une base de donnée 

1. Établir une connexion __mysql__
    Exemple de l'opération :

        $ mysql -u root -p
        [ ... OUTPUT COUPÉ ... ]
        mysql> 

2. Visualisation des base de données présente  avec l'instruction [SHOW DATABASES](http://dev.mysql.com/doc/refman/5.5/en/show-databases.html)
    Exemple d'utilisation (explication juste après):

        mysql> show databases;
        +--------------------+
        | Database           |
        +--------------------+
        | information_schema |
        | mysql              |
        | performance_schema |
        +--------------------+
        3 rows in set (0.00 sec)

     Ou 

        mysql> show databases \G;
        *************************** 1. row ***************************
        Database: information_schema
        *************************** 2. row ***************************
        Database: mysql
        *************************** 3. row ***************************
        Database: performance_schema
        3 rows in set (0.00 sec)

3. Utiliser l'instruction [CREATE DATABASE](http://dev.mysql.com/doc/refman/5.5/en/create-database.html)
    Nous allons faire la création d'un bd avec le nom **ma_super_BD** 

        mysql> create database ma_super_BD;
        Query OK, 1 row affected (0.00 sec)

    Avec [show database](http://dev.mysql.com/doc/refman/5.5/en/show-databases.html) vous pourrez voir la nouvelle base de données.

Bon revenons sur la visualisation des bases de données , lors de la visualisation des base de données nous voyons:

* **[information\_schema](http://dev.mysql.com/doc/refman/5.5/en/information-schema.html)** : cette base de données vient avec toutes les instances de __Mysql__ , elle contient de l'information sur l'ensemble des base de données contenu dans le serveur. L'ensemble des tables qui composent cette base de données est en Lecture Seule , cette base de données est virtuelle, aucun fichier n'est contenu sur le disque. Nous pouvons par exemple connaître les tables qui compose une base de données en consultant cette vue.
* **mysql** : Cette base de données est "réelle" contrairement à l'instance __Information\_Schema__ , il y a des des fichiers contenant les données (nous y reviendrons sous peu) . Nous retrouvons dans cette BD une tables utilisateur contenant l'information des utilisateurs (Nom d'utilisateur / password), le fuseau horaire de la base de donnée. En d'autre mot cette base de données est pour la configuration du serveur , nous verrons aussi plus tard le fichier **mysql.cnf** qui fournit les informations de démarrage du service.
* **performance_schema** : 
* et même peut-être **test** :  Selon votre distribution certain pacquage crée une base de données **test** où tous le monde peut écrire dedans, bien entendu lors de la sécurisation d'une base de donnée , ceci est supprimé assez vite.
 
## <a name="use_db" /> Sélection d'une base de données et visualisation des tables

Nous sommes en mesure de visualiser les base de données disponible maintenant comment entrer dans cette dernière et visualiser les tables.

Pour passer d'une base de données à l'autre nous utilisons l'instruction **use** 

        mysql> use mysql;
        Reading table information for completion of table and column names
        You can turn off this feature to get a quicker startup with -A

        Database changed

Nous sommes à présent dans la base de données **mysql** , pour visualiser les tables disponibles nous pouvons utiliser l'instruction **show tables;** :

        mysql> show tables;
        +---------------------------+
        | Tables_in_mysql           |
        +---------------------------+
        | columns_priv              |
        | db                        |
        | event                     |
        | func                      |
        | general_log               |
        | help_category             |
        | help_keyword              |
        | help_relation             |
        | help_topic                |
        | host                      |
        | ndb_binlog_index          |
        | plugin                    |
        | proc                      |
        | procs_priv                |
        | proxies_priv              |
        | servers                   |
        | slow_log                  |
        | tables_priv               |
        | time_zone                 |
        | time_zone_leap_second     |
        | time_zone_name            |
        | time_zone_transition      |
        | time_zone_transition_type |
        | user                      |
        +---------------------------+
        24 rows in set (0.00 sec)

Nous pouvons donc voir l'ensemble des tables qui compose cette BD, pour voir le contenu un simple **select** , par exemple pour visualiser les utilisateurs de la base de données :

        mysql> select * from user;   

        | Host | User    | Password                                  | Select_priv | Insert_priv | Update_priv | Delete_priv | Create_priv | Drop_priv | Reload_priv | Shutdown_priv | Process_priv | File_priv | Grant_priv | References_priv | Index_priv | Alter_priv | Show_db_priv | Super_priv | Create_tmp_table_priv | Lock_tables_priv | Execute_priv | Repl_slave_priv | Repl_client_priv | Create_view_priv | Show_view_priv | Create_routine_priv | Alter_routine_priv | Create_user_priv | Event_priv | Trigger_priv | Create_tablespace_priv | ssl_type | ssl_cipher | x509_issuer | x509_subject | max_questions | max_updates | max_connections | max_user_connections | plugin | authentication_string |

        | %    | root    | *F11871124CBA1F636AFD315DD9460315EFE8F965 | Y           | Y           | Y           | Y           | Y           | Y         | Y           | Y             | Y            | Y         | Y          | Y               | Y          | Y          | Y            | Y          | Y                     | Y                | Y            | Y               | Y                | Y                | Y              | Y                   | Y                  | Y                | Y          | Y            | Y                      |          |            |             |              |             0 |           0 |               0 |                    0 |        | NULL                  |
        +------+---------+-------------------------------------------+-------------+-------------+-------------+-------------+-------------+-----------+-------------+---------------+--------------+-----------+------------+-----------------+------------+------------+--------------+------------+-----------------------+------------------+--------------+-----------------+------------------+------------------+----------------+---------------------+--------------------+------------------+------------+--------------+------------------------+----------+------------+-------------+--------------+---------------+-------------+-----------------+----------------------+--------+-----------------------+
        1 rows in set (0.00 sec)


__Hummm__ c'est pas très claire comme résultat il y a beaucoup de colonnes :-( , avec l'option **\G** vous aurez une ligne par colonne , très pratique surtout dans la situation comme celle ci. 

        mysql> select * from user \G 
        *************************** 1. row ***************************
        Host: %
        User: root
        Password: *F11871124CBA1F636AFD315DD9460315EFE8F965
        Select_priv: Y
        Insert_priv: Y
        Update_priv: Y
        Delete_priv: Y
        Create_priv: Y
        Drop_priv: Y
        Reload_priv: Y
        Shutdown_priv: Y
        Process_priv: Y
        File_priv: Y
        Grant_priv: Y
        References_priv: Y
        Index_priv: Y
        Alter_priv: Y
        Show_db_priv: Y
        Super_priv: Y
        Create_tmp_table_priv: Y
        Lock_tables_priv: Y
        Execute_priv: Y
        Repl_slave_priv: Y
        Repl_client_priv: Y
        Create_view_priv: Y
        Show_view_priv: Y
        Create_routine_priv: Y
        Alter_routine_priv: Y
        Create_user_priv: Y
        Event_priv: Y
        Trigger_priv: Y
        Create_tablespace_priv: Y
        ssl_type: 
        ssl_cipher: 
        x509_issuer: 
        x509_subject: 
        max_questions: 0
        max_updates: 0
        max_connections: 0
        max_user_connections: 0
        plugin: 
        authentication_string: NULL
        1 rows in set (0.00 sec)


Pas de panique nous reviendrons sous peu sur la gestion des utilisateurs nous allons en faire la création dans la prochaine section.
Bien entendu si nous regardons notre base de données nouvellement créer nous n'aurons pas de tables.

        mysql> use ma_super_BD;
        Database changed
        mysql> show tables;
        Empty set (0.00 sec)

Alimentons tous ça !!! Mais avant tous nous n'allons pas travailler avec l'utilisateur **root** c'est pas bien :P , on va créer un utilisateur qui aura les droit sur notre nouvelle base de données et uniquement sur cette dernière.

## <a name="create_user" /> Création d'un utilisateur 

Là création d'un utilisateur est super important, bien entendu je passe sous silence l'importance d'un bon mot de passe surtout, si vous avez des données sensible, __oupsss__ bon finalement je l'ai dit :P.

Pour la création d'un utilisateur, je vous conseille de créer préalablement la base de donnée ceci permet de réaliser tous de suite l'association utilisateur base de donnée. Nous allons utiliser l'instruction **[Create User](http://dev.mysql.com/doc/refman/5.5/en/create-user.html)** .

Nous allons donc créer l'utilisateur **bob** avec le mot de passe **marley** , bien entendu vous devez être administrateur (__aka__ avoir les droits) de création d'un utilisateur.

        mysql> create user 'bob'@'localhost' IDENTIFIED BY 'marley';
        Query OK, 0 rows affected (0.00 sec)


Donc le détail :

* **'bob'** : définie le nom de l'utilisateur
* **@'localhost'** : définie depuis quelle machine l'utilisateur peut établir la connexion , dans le cas présent **bob** ne peut établir la connexion QUE depuis __localhost__ donc localement sur la machine. AUCUNE connexion depuis l'externe n'est permis !!
* **'marley'** : mot de passe associé à l'utilisateur depuis la machine __localhost__.

L'option de restriction du __host__ peut être un **FQDN** ou une adresse IP , il est aussi possible d'utiliser le caractère : **%** indiquant depuis n'importe où . 

Voici un exemple de création du même utilisateur **bob** pour établir une connexion depuis l'externe de la machine :

        mysql> create user 'bob'@'%' IDENTIFIED BY 'la_super_mot_de_passe_de_ouf_trop_long_a_tape';
        Query OK, 0 rows affected (0.00 sec)

Donc nous avons maintenant 2 utilisateur **bob** :

1. Pour l'utilisation local avec un mot de passe simpliste.
2. Un utilisateur avec un mot de passe plus complexe pour les connexions externe.


Établissons une connexion avec l'utilisateur afin de voir le comportement.

        mysql -u bob -p 
        Enter password:  (mot de passe marley)
        [... OUTPUT COUPÉ ...]

Visualisons les base de données disponible :

        mysql> show databases;
        +--------------------+
        | Database           |
        +--------------------+
        | information_schema |
        +--------------------+
        1 row in set (0.00 sec)


Comme vous pouvez le voir il n'y a pas de base de données auquel **bob** est accès nous ne voyons donc que la base de donnée "virtuelle" __information\_schema__.
Quittons la connexion et essayons maintenant avec l'autre mot de passe l'utilisateur : __'bob'@'%'__ 

        mysql -u bob -p                                                                                                                          
        Enter password:  (mot de passe la_super_mot_de_passe_de_ouf_trop_long_a_tape)
        ERROR 1045 (28000): Access denied for user 'bob'@'localhost' (using password: YES)

Pourquoi ça ne fonctionne pas ? Car nous avons une entré identifiant l'utilisateur **bob** qui est plus précise celle avec **localhost** qui a donc préséance sur cette entré plus général.

Reconnectons nous avec l'utilisateur **root** afin de faire l'association entre l'utilisateur **bob** et la base de donnée **ma\_super\_BD**.
On va faire simple on autorise toutes les permissions sur la tables **ma\_super\_BD** à bob depuis l'accès local.

        $ mysql -u root -p
        mysql> GRANT ALL ON ma_super_BD.* TO 'bob'@'localhost';
        Query OK, 0 rows affected (0.00 sec)
        mysql> Bye

On rétablie une connexion avec l'utilisateur **bob** 

        $ mysql -u bob -p 
        mysql> show databases;
        +--------------------+
        | Database           |
        +--------------------+
        | information_schema |
        | ma_super_BD        |
        +--------------------+
        2 rows in set (0.00 sec)

Super maintenant nous voyons bien notre base de données, nous avons l'ensemble des droits sur cette dernière. Pendant que nous sommes la prenons le temps de voir de manière plus granulaire les permissions possible allouable avec **[GRANT](http://dev.mysql.com/doc/refman/5.5/en/grant.html)**.

## <a name="manage_perms" /> Gestion des permissions (GRANT)

La gestion des permissions est essentiel pour la sécurité de nos données, que ce soit dû à une erreur de manipulation ou un script qui a une erreur causant des problème... 

__MySQL__ offre une gestion très granulaire des permissions, ce sera à vous de faire les bon choix entre permissions très restrictive avec un coût de gestion significatif ou une ouverture trop grande.

Donc reprenons la commande utiliser pour l'autorisation d'accès à la BD **ma\_super\_BD** à bob depuis __localhost__.

        mysql> GRANT ALL ON ma_super_BD.* TO 'bob'@'localhost';

* **GRANT** : Instruction __MySQL__ :D
* **ALL** : Permissions qui sera attribué , voici un tableau des permissions disponible : (bon désolé je l'ai pas trouvé en français et je suis paresseux pour faire la traduction :-/ )
    <table class="table" summary="Permissible Privileges for GRANT and REVOKE" border="1"><colgroup><col><col></colgroup><thead><tr><th scope="col">Privilege</th><th scope="col">Meaning and Grantable Levels</th></tr></thead><tbody><tr><td scope="row"><a class="link" href="privileges-provided.html#priv_all"><code class="literal">ALL [PRIVILEGES]</code></a></td><td>Grant all privileges at specified access level except
                      <a class="link" href="privileges-provided.html#priv_grant-option"><code class="literal">GRANT OPTION</code></a></td></tr><tr><td scope="row"><a class="link" href="privileges-provided.html#priv_alter"><code class="literal">ALTER</code></a></td><td>Enable use of <a class="link" href="alter-table.html" title="13.1.7 ALTER TABLE Syntax"><code class="literal">ALTER TABLE</code></a>. Levels:
                                        Global, database, table.</td></tr><tr><td scope="row"><a class="link" href="privileges-provided.html#priv_alter-routine"><code class="literal">ALTER ROUTINE</code></a></td><td>Enable stored routines to be altered or dropped. Levels: Global,
                                                          database, procedure.</td></tr><tr><td scope="row"><a class="link" href="privileges-provided.html#priv_create"><code class="literal">CREATE</code></a></td><td>Enable database and table creation. Levels: Global, database, table.</td></tr><tr><td scope="row"><a class="link" href="privileges-provided.html#priv_create-routine"><code class="literal">CREATE ROUTINE</code></a></td><td>Enable stored routine creation. Levels: Global, database.</td></tr><tr><td scope="row"><a class="link" href="privileges-provided.html#priv_create-tablespace"><code class="literal">CREATE TABLESPACE</code></a></td><td>Enable tablespaces and log file groups to be created, altered, or
                                                                            dropped. Level: Global.</td></tr><tr><td scope="row"><a class="link" href="privileges-provided.html#priv_create-temporary-tables"><code class="literal">CREATE TEMPORARY TABLES</code></a></td><td>Enable use of <a class="link" href="create-table.html" title="13.1.17 CREATE TABLE Syntax"><code class="literal">CREATE
                                                                                              TEMPORARY TABLE</code></a>. Levels: Global, database.</td></tr><tr><td scope="row"><a class="link" href="privileges-provided.html#priv_create-user"><code class="literal">CREATE USER</code></a></td><td>Enable use of <a class="link" href="create-user.html" title="13.7.1.1 CREATE USER Syntax"><code class="literal">CREATE USER</code></a>,
                                                                                                                <a class="link" href="drop-user.html" title="13.7.1.2 DROP USER Syntax"><code class="literal">DROP USER</code></a>,
                                                                                                                                  <a class="link" href="rename-user.html" title="13.7.1.4 RENAME USER Syntax"><code class="literal">RENAME USER</code></a>, and
                                                                                                                                                    <a class="link" href="revoke.html" title="13.7.1.5 REVOKE Syntax"><code class="literal">REVOKE ALL
                                                                                                                                                                      PRIVILEGES</code></a>. Level: Global.</td></tr><tr><td scope="row"><a class="link" href="privileges-provided.html#priv_create-view"><code class="literal">CREATE VIEW</code></a></td><td>Enable views to be created or altered. Levels: Global, database, table.</td></tr><tr><td scope="row"><a class="link" href="privileges-provided.html#priv_delete"><code class="literal">DELETE</code></a></td><td>Enable use of <a class="link" href="delete.html" title="13.2.2 DELETE Syntax"><code class="literal">DELETE</code></a>. Level: Global, database, table.</td></tr><tr><td scope="row"><a class="link" href="privileges-provided.html#priv_drop"><code class="literal">DROP</code></a></td><td>Enable databases, tables, and views to be dropped. Levels: Global, database, table.</td></tr><tr><td scope="row"><a class="link" href="privileges-provided.html#priv_event"><code class="literal">EVENT</code></a></td><td>Enable use of events for the Event Scheduler. Levels: Global, database.</td></tr><tr><td scope="row"><a class="link" href="privileges-provided.html#priv_execute"><code class="literal">EXECUTE</code></a></td><td>Enable the user to execute stored routines. Levels: Global, database, table.</td></tr><tr><td scope="row"><a class="link" href="privileges-provided.html#priv_file"><code class="literal">FILE</code></a></td><td>Enable the user to cause the server to read or write files. Level: Global.</td></tr><tr><td scope="row"><a class="link" href="privileges-provided.html#priv_grant-option"><code class="literal">GRANT OPTION</code></a></td><td>Enable privileges to be granted to or removed from other accounts. Levels: Global, database, table, procedure, proxy.</td></tr><tr><td scope="row"><a class="link" href="privileges-provided.html#priv_index"><code class="literal">INDEX</code></a></td><td>Enable indexes to be created or dropped. Levels: Global, database, table.</td></tr><tr><td scope="row"><a class="link" href="privileges-provided.html#priv_insert"><code class="literal">INSERT</code></a></td><td>Enable use of <a class="link" href="insert.html" title="13.2.5 INSERT Syntax"><code class="literal">INSERT</code></a>. Levels: Global, database, table, column.</td></tr><tr><td scope="row"><a class="link" href="privileges-provided.html#priv_lock-tables"><code class="literal">LOCK TABLES</code></a></td><td>Enable use of <a class="link" href="lock-tables.html" title="13.3.5 LOCK TABLES and UNLOCK TABLES Syntax"><code class="literal">LOCK TABLES</code></a> on tables for which you have the  <a class="link" href="select.html" title="13.2.9 SELECT Syntax"><code class="literal">SELECT</code></a> privilege.
Levels: Global, database.</td></tr><tr><td scope="row"><a class="link" href="privileges-provided.html#priv_process"><code class="literal">PROCESS</code></a></td><td>Enable the user to see all processes with <a class="link" href="show-processlist.html" title="13.7.5.30 SHOW PROCESSLIST Syntax"><code class="literal">SHOW PROCESSLIST</code></a>. Level: Global.</td></tr><tr><td scope="row"><a class="link" href="privileges-provided.html#priv_proxy"><code class="literal">PROXY</code></a></td><td>Enable user proxying. Level: From user to user.</td></tr><tr><td scope="row"><a class="link" href="privileges-provided.html#priv_references"><code class="literal">REFERENCES</code></a></td><td>Enable foreign key creation. Levels: Global, database, table, column.</td></tr><tr><td scope="row"><a class="link" href="privileges-provided.html#priv_reload"><code class="literal">RELOAD</code></a></td><td>Enable use of <a class="link" href="flush.html" title="13.7.6.3 FLUSH Syntax"><code class="literal">FLUSH</code></a> operations. Level:
Global.</td></tr><tr><td scope="row"><a class="link" href="privileges-provided.html#priv_replication-client"><code class="literal">REPLICATION CLIENT</code></a></td><td>Enable the user to ask where master or slave servers are. Level: Global.</td></tr><tr><td scope="row"><a class="link" href="privileges-provided.html#priv_replication-slave"><code class="literal">REPLICATION SLAVE</code></a></td><td>Enable replication slaves to read binary log events from the master.
Level: Global.</td></tr><tr><td scope="row"><a class="link" href="privileges-provided.html#priv_select"><code class="literal">SELECT</code></a></td><td>Enable use of <a class="link" href="select.html" title="13.2.9 SELECT Syntax"><code class="literal">SELECT</code></a>. Levels: Global,
database, table, column.</td></tr><tr><td scope="row"><a class="link" href="privileges-provided.html#priv_show-databases"><code class="literal">SHOW DATABASES</code></a></td><td>Enable <a class="link" href="show-databases.html" title="13.7.5.15 SHOW DATABASES Syntax"><code class="literal">SHOW DATABASES</code></a> to show all
databases. Level: Global.</td></tr><tr><td scope="row"><a class="link" href="privileges-provided.html#priv_show-view"><code class="literal">SHOW VIEW</code></a></td><td>Enable use of <a class="link" href="show-create-view.html" title="13.7.5.14 SHOW CREATE VIEW Syntax"><code class="literal">SHOW CREATE VIEW</code></a>. Levels:
Global, database, table.</td></tr><tr><td scope="row"><a class="link" href="privileges-provided.html#priv_shutdown"><code class="literal">SHUTDOWN</code></a></td><td>Enable use of <a class="link" href="mysqladmin.html" title="4.5.2 mysqladmin — Client for Administering a MySQL Server"><span class="command"><strong>mysqladmin shutdown</strong></span></a>. Level: Global.</td></tr><tr><td scope="row"><a class="link" href="privileges-provided.html#priv_super"><code class="literal">SUPER</code></a></td><td>Enable use of other administrative operations such as
<a class="link" href="change-master-to.html" title="13.4.2.1 CHANGE MASTER TO Syntax"><code class="literal">CHANGE MASTER TO</code></a>,
<a class="link" href="kill.html" title="13.7.6.4 KILL Syntax"><code class="literal">KILL</code></a>,
<a class="link" href="purge-binary-logs.html" title="13.4.1.1 PURGE BINARY LOGS Syntax"><code class="literal">PURGE BINARY LOGS</code></a>,
<a class="link" href="set-variable.html" title="13.7.4.1 SET Syntax for Variable Assignment"><code class="literal">SET
GLOBAL</code></a>, and <a class="link" href="mysqladmin.html" title="4.5.2 mysqladmin — Client for Administering a MySQL Server"><span class="command"><strong>mysqladmin
debug</strong></span></a> command. Level: Global.</td></tr><tr><td scope="row"><a class="link" href="privileges-provided.html#priv_trigger"><code class="literal">TRIGGER</code></a></td><td>Enable trigger operations. Levels: Global, database, table.</td></tr><tr><td scope="row"><a class="link" href="privileges-provided.html#priv_update"><code class="literal">UPDATE</code></a></td><td>Enable use of <a class="link" href="update.html" title="13.2.11 UPDATE Syntax"><code class="literal">UPDATE</code></a>. Levels: Global,
database, table, column.</td></tr><tr><td scope="row"><a class="link" href="privileges-provided.html#priv_usage"><code class="literal">USAGE</code></a></td><td>Synonym for <span class="quote">“<span class="quote">no privileges</span>”</span></td></tr></tbody></table>
</div>

* **ON** __ma\_super\_BD__.\* : Nous avons identifier les permissions que nous voulions qui soit attribué nous devons maintenant spécifier à quelle BD / Table nous désirons l'appliquer. La syntaxe est **Nom\_BD.Nom\_Table** voyons quelques exemple pour démontrer l'utilisation :
    * **__ma\_super\_BD__.\*** : commençons par la définition que nous venons juste d'utiliser 
        Donc nous allouons les permissions pour la base de donnée __ma\_super\_BD__ , pour l'ensemble des tables qui compose cette dernière.
    * **\*.\*** : Si nous avions utiliser cette nomenclature nous aurions attribué les permissions sous l'ensemble des tables , pour l'ensemble des base de données sur le serveur
    * **mysql.user** : Si nous voulions permettre l'accès à la table user contenu dans la base de données __MySQL__ nous aurions utiliser cette écriture.

* **TO 'bob'@'localhost'** : Nous assignons la permission à un utilisateur depuis une connexion donnée , dans notre cas __localhost__

Ceci est pour la base du concept bien entendu sur la page de documentation de __Mysql__ vous aurez plus d'information disponible : [GRANT](http://dev.mysql.com/doc/refman/5.5/en/grant.html)

Voyons maintenant quelque exemple d'utilisation possible , nous verrons aussi quelque instruction supplémentaire à l'aide de ces exemples:

* Avoir un usagé donnée avec des permissions différente selon la provenance de la connexion :

        mysql> GRANT ALL ON ma_super_BD.* TO 'bob'@'localhost';
        mysql> GRANT SELECT ON ma_super_BD.* TO 'bob'@'%';

    Dans l'exemple ci-dessus nous avons tous les droits sur la base de données __ma\_super\_BD__ quand nous sommes localement sur le système, mais quand il y a connexion depuis l'externe uniquement les requêtes **select** sont permis. Honnêtement je ne conseille pas cette pratique, car ceci porte à confusion je suggère vraiment l'utilisation de 2 utilisateurs distinct, cependant ceci peut facilité vos déploiement !

* Permettre la réalisation de requête pour des colonnes spécifique

        GRANT SELECT (col1), INSERT (col1,col2) ON mydb.maTable TO 'robert'@'192.168.22.22';

    Dans l'exemple ci-dessus nous permettons à l'utilisateur **robert** depuis la machine **192.168.22.22** de réaliser des **SELECT** sur la table **maTable** contenu dans la base de données **mydb**, mais uniquement sur la colonne **col1** . De plus il pourra réaliser des **insert** (ajout d'information)  dans la colonne **col1** et **col2** uniquement, toujours sur la table __mydb.maTable__.

* Limitation du nombre de requête pour un utilisateur 

        GRANT USAGE ON *.* TO 'robert'@'192.168.22.22'
          WITH MAX_QUERIES_PER_HOUR 500 MAX_UPDATES_PER_HOUR 100;

    Dans la requête ci-dessus je limite les opérations possible de l'utilisateur **robert** , il ne pourra depuis la machine **192.168.22.22** réalisé uniquement 500 requête par heures et uniquement 100 mise à jour. Ceci s'appliquera sur l'ensemble des base de données.

### <a name="view_grant" /> Visualisation des permissions 

On va commencé par la version "moderne" et propre :D , après on verra la méthode __old school__ , bon est-ce qu'elle est encore bonne elle fonctionne... 

Si Vous allouez un grand nombre de permission il peut être ambigüe après un certain temps de se rappeler les permissions attribué. 
Heureusement il y a l'instruction : [SHOW GRANT](http://dev.mysql.com/doc/refman/5.5/en/show-grants.html).

Voyons sur utilisation simple :

        mysql> show grants; 
        +--------------------------------------------------------------------------------------------------------------------------------+
        | Grants for root@%                                                                                                              |
        +--------------------------------------------------------------------------------------------------------------------------------+
        | GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY PASSWORD '*F11871124CBA1F636AFD315DD9460315EFE8F965' WITH GRANT OPTION |
        +--------------------------------------------------------------------------------------------------------------------------------+
        1 row in set (0.00 sec)

Par défaut le système présente les permissions pour l'utilisateur qui a exécuté la commande , bien entendu il est possible de demander le résultat pour un autre utilisateur. 

        mysql> show grants for bob;
        +----------------------------------------------------------------------------------------------------+
        | Grants for bob@%                                                                                   |
        +----------------------------------------------------------------------------------------------------+
        | GRANT USAGE ON *.* TO 'bob'@'%' IDENTIFIED BY PASSWORD '*E416B544405021A2AEEFCEA3510848CB76400895' |
        +----------------------------------------------------------------------------------------------------+
        1 row in set (0.00 sec)

Donc dans l'exemple ci-dessus nous voyons les permissions pour **bob**... __Oupss__ mais où est passé l'attribution des permissions pour la BD __ma\_super\_BD__. Regardons 2 seconde la ligne , nous n'avons identifier que le nom de l'utilisateur **bob**  l'utilisateur qui est sortie est : __'bob'@'%'__ .
Reprenons la commande en spécifiant l'utilisateur **bob** depuis __localhost__

        mysql> show grants for bob@localhost;
        +------------------------------------------------------------------------------------------------------------+
        | Grants for bob@localhost                                                                                   |
        +------------------------------------------------------------------------------------------------------------+
        | GRANT USAGE ON *.* TO 'bob'@'localhost' IDENTIFIED BY PASSWORD '*88369468F44AD87C9ED548B0C98F135B3227C8DB' |
        | GRANT ALL PRIVILEGES ON `ma_super_BD`.* TO 'bob'@'localhost'                                               |
        +------------------------------------------------------------------------------------------------------------+
        2 rows in set (0.00 sec)

Voilà nous avons l'information aussi pour notre base de donnée.

## <a name="drop_user" /> Suppression d'un utilisateur

Rapidement la suppression d'un utilisateur, car ça arrive aussi que l'on enlève les accès :D, afin de faire la démonstration je vais supprimer l'utilisateur **bob** disponible depuis n'importe quelle IP.

        mysql> drop user 'bob'@'%';
        Query OK, 0 rows affected (0.00 sec)

Et voilà :D , c'est aussi simple que ça avec l'instruction [DROP USER](http://dev.mysql.com/doc/refman/5.5/en/drop-user.html).

# <a name="define_schema" /> Création d'un schéma

Bon nous avons à présent une base de donnée , un utilisateur qui peut la manipuler , mais elle est complètement vide. C'est le tant de la nourrir un peu , nous allons définir une table avec des colonnes ... 
Bon beaucoup d'entre vous on déjà un base de connaissance des systèmes de base de données , je vais pas passer énormément de temps sur les instructions je ne crois pas que ma valeur ajouté est là ! Si je me trouve faudra me le dire , au moins pour les prochaines formations :0, afin que je corrige le tir .

Prenons notre base de donnée __ma\_super\_BD__ si nous regardons, suite à la création dans le répertoire **datadir** de __mysql__ nous avons un répertoire avec le nom de notre base de données :

        $ ls -ld /var/lib/mysql/ma_super_BD/     
        drwx------ 2 mysql mysql 4096 Oct 12 12:39 /var/lib/mysql/ma_super_BD/
        $ ls -l /var/lib/mysql/ma_super_BD/ 
        total 4
        -rw-rw---- 1 mysql mysql 65 Oct 12 12:39 db.opt

Ce répertoire contiendra les tables de notre base de données par la suite , si vous regardez le contenu du fichier **db.opt** , ce dernier contient de l'information par défaut de la bd :

        $ cat /var/lib/mysql/ma_super_BD/db.opt
        default-character-set=latin1
        default-collation=latin1_swedish_ci

Dans le cas présent ceci est essentiellement la définition des caractères supporté par la base de données si nous voulions stocké des informations dans une langue asiatique par exemple nous devrions modifier cette configuration. Honnêtement je ne pense pas couvrir le changement de cette configuration, nous ferons un clin d'œil  rapide.

## <a name="create_table" /> Création d'une table

Ajoutons une table à notre base de donnée, je manque d'imagination :-/ , nous allons donc faire une table d'employé ... __ok ok__ c'est nul, mais on est vendredi soir de retour à la maison ... Si je trouve mieux entre temps , je le change.

Donc connexion avec l'utilisateur **bob** pas de raison d'être **root** et sélection de la base de donnée

         $ mysql -u bob -p 
         mysql> use ma_super_BD
         Database changed

La création d'une base de donnée ce fait à l'aide de l'instruction [CREATE TABLE](http://dev.mysql.com/doc/refman/5.5/en/create-table.html).
Pour rappel je suis pas **DBA** !! Nous verrons la base pour l'optimisation faudra malheureusement allé voir ailleurs :D, puis si vous trouvez quelque chose de très bien vous m'envoyez le lien que je le rajoute à la formation comme référence.

        mysql> CREATE TABLE employe (
            -> id INT ,
            -> nom VARCHAR(20),
            -> titre VARCHAR(30)
            -> );
        Query OK, 0 rows affected (0.02 sec)

Nous allons réaliser l'opération en 2 temps premièrement l'opération la plus simple de création d'une tables avec 3 colonnes , par la suite nous rajouterons des fonctionnalité du système de base de données relationnelle (clé privé, auto incrémentale .... ).

Donc regardons notre table **employe** , nous avons donc 3 colonnes :

* **id** : de type **Integer** donc un chiffre, cette colonne contiendra le numéro de l'employé.
* **nom** : de type **Varchar** donc de **Char**actère **Var**riable , avec un maximum de 20 caractère.
* **titre**: de type **Varchar** donc de **Char**actère **Var**riable maximum 30 caractère pour contenir le titre de l'employé.

Pour visualiser la **description** d'une table déjà créer dans le passé vous pouvez utiliser l'instruction : 

        mysql> desc employe;
        +-------+-------------+------+-----+---------+-------+
        | Field | Type        | Null | Key | Default | Extra |
        +-------+-------------+------+-----+---------+-------+
        | id    | int(11)     | YES  |     | NULL    |       |
        | nom   | varchar(20) | YES  |     | NULL    |       |
        | titre | varchar(30) | YES  |     | NULL    |       |
        +-------+-------------+------+-----+---------+-------+
        3 rows in set (0.00 sec)

J'ai vraiment été au plus simple pour la création de la table voyons rapidement une insertion et la consultation de la tables :

Ici je rajoute une entré dans la table 

        mysql> insert into employe value (10,'Peter Torch','Guitariste');
        Query OK, 1 row affected (0.01 sec)

Validons la saisie 

        mysql> select * from employe;
        +------+-------------+------------+
        | id   | nom         | titre      |
        +------+-------------+------------+
        |   10 | Peter Torch | Guitariste |
        +------+-------------+------------+
        1 row in set (0.00 sec)

Voyons un peu plus loin avec les types de colonne disponible.

### <a name="colonne_type" /> Type de colonne disponible 

Vous retrouverez la documentation complète des types de données disponible sur le site de __MySQL__ : [Type de données](http://dev.mysql.com/doc/refman/5.5/en/data-types.html) . Nous allons en couvrir plusieurs ici mais je n'ai pas la prétention de tous les couvrir, ceci dépend aussi de vos besoins.

Il est important de bien comprendre les usages et particularités de chaque type de données, afin de choisir le meilleur type possible lorsque vous définissez les colonnes de vos tables. En effet, choisir un mauvais type de données pourrait entraîner :

* un gaspillage de mémoire (ex. : si vous stockez de toutes petites données dans une colonne faite pour stocker de grosses quantités de données) ;

* des problèmes de performance (ex. : il est plus rapide de faire une recherche sur un nombre que sur une chaîne de caractères) ;

* un comportement contraire à celui attendu (ex. : trier sur un nombre stocké comme tel, ou sur un nombre stocké comme une chaîne de caractères ne donnera pas le même résultat) ;

* l'impossibilité d'utiliser des fonctionnalités propres à un type de données (ex. : stocker une date comme une chaîne de caractères vous prive des nombreuses fonctions temporelles disponibles).

Documentation donc je me suis inspiré pour écrire cette section : [OpenClassRoom Mysql par Chantal Gribaumont](https://openclassrooms.com/courses/administrez-vos-bases-de-donnees-avec-mysql/les-types-de-donnees)

#### <a name="colonne_type_int" /> Nombres entiers

Documentation sur __MySQL__ : [Nombre entiers](http://dev.mysql.com/doc/refman/5.5/en/integer-types.html)

<p>
MySQL supports the SQL standard integer types
<code class="literal">INTEGER</code> (or <code class="literal">INT</code>) and
<code class="literal">SMALLINT</code>. As an extension to the standard,
MySQL also supports the integer types
<code class="literal">TINYINT</code>, <code class="literal">MEDIUMINT</code>, and
<code class="literal">BIGINT</code>. The following table shows the
required storage and range for each integer type.
</p>
<div class="informaltable">
<table class="informaltable" summary="This table shows required storage and range for
integer types supported by MySQL." border="1"><colgroup><col><col><col><col></colgroup><thead><tr><th scope="col">Type</th><th scope="col">Storage</th><th scope="col">Minimum Value</th><th scope="col">Maximum Value</th></tr><tr><th scope="col"> </th><th scope="col">(Bytes)</th><th scope="col">(Signed/Unsigned)</th><th scope="col">(Signed/Unsigned)</th></tr></thead><tbody><tr><td scope="row"><code class="literal">TINYINT</code></td><td>1</td><td><code class="literal">-128</code></td><td><code class="literal">127</code></td></tr><tr><td scope="row"> </td><td> </td><td><code class="literal">0</code></td><td><code class="literal">255</code></td></tr><tr><td scope="row"><code class="literal">SMALLINT</code></td><td>2</td><td><code class="literal">-32768</code></td><td><code class="literal">32767</code></td></tr><tr><td scope="row"> </td><td> </td><td><code class="literal">0</code></td><td><code class="literal">65535</code></td></tr><tr><td scope="row"><code class="literal">MEDIUMINT</code></td><td>3</td><td><code class="literal">-8388608</code></td><td><code class="literal">8388607</code></td></tr><tr><td scope="row"> </td><td> </td><td><code class="literal">0</code></td><td><code class="literal">16777215</code></td></tr><tr><td scope="row"><code class="literal">INT</code></td><td>4</td><td><code class="literal">-2147483648</code></td><td><code class="literal">2147483647</code></td></tr><tr><td scope="row"> </td><td> </td><td><code class="literal">0</code></td><td><code class="literal">4294967295</code></td></tr><tr><td scope="row"><code class="literal">BIGINT</code></td><td>8</td><td><code class="literal">-9223372036854775808</code></td><td><code class="literal">9223372036854775807</code></td></tr><tr><td scope="row"> </td><td> </td><td><code class="literal">0</code></td><td><code class="literal">18446744073709551615</code></td></tr></tbody></table>
</div>

Bon si nous reprenons la définition de notre table employé , j'ai utilisé simplement la valeur **INT** pour désigner le numéro de l'employé.
Résultat pour le champs **ID** telle que mentionné dans le tableau ci-dessus nous pouvons attribué une valeur entre :   __-2147483648 et 2147483647__ !
Ceci prendra 4 octets d'espace de stockage pour chaque entré ! 

Dans mon cas le type __TINYINT__ serait bien suffisant , je doute d'avoir plus de 127 employé , bon __ok__ faut compter ceux qui partirons avec le temps :P, qui me supporterons plus :P ... Mais mais  ce qui est certain est que je n'aurais jamais un employé négatif ... Du moins dans son numéro d'employé. 
Comme vous pouvez lire dans le table , plus haut, il y a l'indication __Signed/Unsigned__ qui indique si la valeur peut être négative.

Donc si je reprend la création de ma table employé afin de définir l'__ID__ avec un type __TINYINT__ non signé donc sans nombre négatif voici ce que ceci donne . Premièrement je vais supprimer la table original __employe__ et la recréer 

        mysql> drop table employe;
        Query OK, 0 rows affected (0.01 sec)

        mysql> CREATE TABLE employe ( id TINYINT UNSIGNED  , nom VARCHAR(20), titre VARCHAR(30) );  
        Query OK, 0 rows affected (0.01 sec)

        mysql> insert into employe value (1 ,'Bob Marley','Prophete');                              
        Query OK, 1 row affected (0.00 sec)

        mysql> select * from employe;
        +------+------------+----------+
        | id   | nom        | titre    |
        +------+------------+----------+
        |    1 | Bob Marley | Prophete |
        +------+------------+----------+
        1 row in set (0.00 sec)

COOL, avec cette configuration j'utilise mieux le système et surtout utilise moins de données.
Mais si j'arrive avec un nombre plus élevé que les 255 permis exemple si j'essaye d'ajouter une valeur 300 

        mysql> insert into employe value (300,'Ki-many Marley','chanteur');
        Query OK, 1 row affected, 1 warning (0.00 sec)

        mysql> select * from employe;
        +------+----------------+----------+
        | id   | nom            | titre    |
        +------+----------------+----------+
        |    1 | Bob Marley     | Prophete |
        |  255 | Ki-many Marley | chanteur |
        +------+----------------+----------+
        2 rows in set (0.00 sec)

La valeur est __normalisé__ à la valeur maximal du champ il faut donc faire attention !

#### <a name="colonne_type_decimal" /> Valeur décimal

Documentation sur __MySQL__ :

* [décimal valeur Fixe](http://dev.mysql.com/doc/refman/5.5/en/fixed-point-types.html)
* [décimal valeur arrondie](http://dev.mysql.com/doc/refman/5.5/en/floating-point-types.html)

Il existe 2 catégorie de type de données :

* **NUMERIC** et **DECIMAL** : sont équivalents et acceptent deux paramètres : la précision et l'échelle.
    La précision définit le nombre de chiffres significatifs stockés, donc les 0 à gauche ne comptent pas. En effet 0024 est équivalent à 24. Il n'y a donc que deux chiffres significatifs dans 0024.
    L'échelle définit le nombre de chiffres après la virgule.
* **FLOAT**, **REAL**, **DOUBLE** : C'est type de donnée vont stocké les valeurs approximative fournit, ils seront arrondies


Les nombres stockés en tant que **NUMERIC** ou **DECIMAL** sont stockés sous forme de chaînes de caractères. Par conséquent, c'est la valeur exacte qui est stockée. Par contre, les types **FLOAT**, **DOUBLE** et **REAL** sont stockés sous forme de nombres, et c'est une valeur approchée qui est stockée.
Cela signifie que si vous stockez par exemple 56,6789 dans une colonne de type **FLOAT**, en réalité, __MySQL__ stockera une valeur qui se rapproche de 56,6789 (par exemple, 56,678900000000000001). Cela peut poser problème pour des comparaison notamment (56,678900000000000001 n'étant pas égal à 56,6789). S'il est nécessaire de conserver la précision exacte de vos données (l'exemple type est celui des données bancaires), il est donc conseillé d'utiliser un type numérique à valeur exacte (__NUMERIC__ ou __DECIMAL__ donc).

#### <a name="colonne_type_char" /> Valeur chaîne de caractère

Bien entendu nous désirons aussi conserver du texte dans nos base de données ...

Documentation sur __MySQL__ : 

* [chaine de caractère](http://dev.mysql.com/doc/refman/5.5/en/char.html)
* [LONG chaine de caractère](http://dev.mysql.com/doc/refman/5.5/en/blob.html)

Pour stocker un texte relativement court (moins de 255 caractères), vous pouvez utiliser les types **CHAR** et **VARCHAR**. Ces deux types s'utilisent avec un paramètre qui précise la taille que peut prendre votre texte (entre 1 et 255). La différence entre **CHAR** et **VARCHAR** est la manière dont ils sont stockés en mémoire. Un **CHAR(x)** stockera toujours x caractères, en remplissant si nécessaire le texte avec des espaces vides pour le compléter, tandis qu'un **VARCHAR(x)** stockera jusqu'à x caractères (entre 0 et x), et stockera en plus en mémoire la taille du texte stocké.
Si vous entrez un texte plus long que la taille maximale définie pour le champ, celui-ci sera tronqué.

Petit tableau explicatif, en prenant l'exemple d'un **CHAR** ou d'un **VARCHAR** de 5 caractères maximum :

<table id="r-1977848" data-claire-element-id="2129659"><thead id="r-1977802" data-claire-element-id="2129613"><tr id="r-1977801" data-claire-element-id="2129612"><th id="r-1977792" data-claire-element-id="2129603"><p id="r-1977791" data-claire-element-id="2129602">Texte</p></th><th id="r-1977794" data-claire-element-id="2129605"><p id="r-1977793" data-claire-element-id="2129604">CHAR(5)</p></th><th id="r-1977796" data-claire-element-id="2129607"><p id="r-1977795" data-claire-element-id="2129606">Mémoire requise</p></th><th id="r-1977798" data-claire-element-id="2129609"><p id="r-1977797" data-claire-element-id="2129608">VARCHAR(5)</p></th><th id="r-1977800" data-claire-element-id="2129611"><p id="r-1977799" data-claire-element-id="2129610">Mémoire requise</p></th></tr></thead><tbody id="r-1977847" data-claire-element-id="2129658"><tr id="r-1977813" data-claire-element-id="2129624"><td id="r-1977804" data-claire-element-id="2129615"><p id="r-1977803" data-claire-element-id="2129614">''</p></td><td id="r-1977806" data-claire-element-id="2129617"><p id="r-1977805" data-claire-element-id="2129616"><code>'   '</code></p></td><td id="r-1977808" data-claire-element-id="2129619"><p id="r-1977807" data-claire-element-id="2129618">5 octets</p></td><td id="r-1977810" data-claire-element-id="2129621"><p id="r-1977809" data-claire-element-id="2129620"><code>''</code></p></td><td id="r-1977812" data-claire-element-id="2129623"><p id="r-1977811" data-claire-element-id="2129622">1 octet</p></td></tr><tr id="r-1977824" data-claire-element-id="2129635"><td id="r-1977815" data-claire-element-id="2129626"><p id="r-1977814" data-claire-element-id="2129625">'tex'</p></td><td id="r-1977817" data-claire-element-id="2129628"><p id="r-1977816" data-claire-element-id="2129627"><code>'tex  '</code></p></td><td id="r-1977819" data-claire-element-id="2129630"><p id="r-1977818" data-claire-element-id="2129629">5 octets</p></td><td id="r-1977821" data-claire-element-id="2129632"><p id="r-1977820" data-claire-element-id="2129631"><code>'tex'</code></p></td><td id="r-1977823" data-claire-element-id="2129634"><p id="r-1977822" data-claire-element-id="2129633">4 octets</p></td></tr><tr id="r-1977835" data-claire-element-id="2129646"><td id="r-1977826" data-claire-element-id="2129637"><p id="r-1977825" data-claire-element-id="2129636">'texte'</p></td><td id="r-1977828" data-claire-element-id="2129639"><p id="r-1977827" data-claire-element-id="2129638"><code>'texte'</code></p></td><td id="r-1977830" data-claire-element-id="2129641"><p id="r-1977829" data-claire-element-id="2129640">5 octets</p></td><td id="r-1977832" data-claire-element-id="2129643"><p id="r-1977831" data-claire-element-id="2129642"><code>'texte'</code></p></td><td id="r-1977834" data-claire-element-id="2129645"><p id="r-1977833" data-claire-element-id="2129644">6 octets</p></td></tr><tr id="r-1977846" data-claire-element-id="2129657"><td id="r-1977837" data-claire-element-id="2129648"><p id="r-1977836" data-claire-element-id="2129647">'texte trop long'</p></td><td id="r-1977839" data-claire-element-id="2129650"><p id="r-1977838" data-claire-element-id="2129649"><code>'texte'</code></p></td><td id="r-1977841" data-claire-element-id="2129652"><p id="r-1977840" data-claire-element-id="2129651">5 octets</p></td><td id="r-1977843" data-claire-element-id="2129654"><p id="r-1977842" data-claire-element-id="2129653"><code>'texte'</code></p></td><td id="r-1977845" data-claire-element-id="2129656"><p id="r-1977844" data-claire-element-id="2129655">6 octets</p></td></tr></tbody></table>

Comme vous pouvez le constater il est plus adéquat d'utiliser **VARCHAR** afin d'optimiser l'utilisation de la mémoire pour les valeurs variables.

Bon 255 caractère c'est pas beaucoup pour un nom , ça va mais si vous désirez ajouter le contenu d'une page web ça risque d'être limite ... Il y a donc d'autre type de données disponible pour les champs plus grand.

**TEXT**, ou un de ses dérivés **TINYTEXT**, **MEDIUMTEXT** ou **LONGTEXT**.

<table id="r-1977891" data-claire-element-id="6145435"><thead id="r-1977861" data-claire-element-id="2129672"><tr id="r-1977860" data-claire-element-id="2129671"><th id="r-1977855" data-claire-element-id="2129666"><p id="r-1977854" data-claire-element-id="2129665">Type</p></th><th id="r-1977857" data-claire-element-id="2129668"><p id="r-1977856" data-claire-element-id="2129667">Longueur maximale</p></th><th id="r-1977859" data-claire-element-id="2129670"><p id="r-1977858" data-claire-element-id="2129669">Mémoire occupée</p></th></tr></thead><tbody id="r-1977890" data-claire-element-id="6145434"><tr id="r-1977868" data-claire-element-id="6145413"><td id="r-1977863" data-claire-element-id="2129674"><p id="r-1977862" data-claire-element-id="2129673"><code data-claire-semantic="sql">TINYTEXT</code></p></td><td id="r-1977865" data-claire-element-id="6145412"><p id="r-1977864" data-claire-element-id="6145411"> <math>$\(2^8\)$</math>﻿ octets</p></td><td id="r-1977867" data-claire-element-id="2129678"><p id="r-1977866" data-claire-element-id="2129677">Longueur de la chaîne + 1 octet</p></td></tr><tr id="r-1977875" data-claire-element-id="6145416"><td id="r-1977870" data-claire-element-id="2129681"><p id="r-1977869" data-claire-element-id="2129680"><code data-claire-semantic="sql">TEXT</code></p></td><td id="r-1977872" data-claire-element-id="6145415"><p id="r-1977871" data-claire-element-id="6145414">  <math>$\(2^{16}\)$</math>﻿  octets</p></td><td id="r-1977874" data-claire-element-id="2129685"><p id="r-1977873" data-claire-element-id="2129684">Longueur de la chaîne + 2 octets</p></td></tr><tr id="r-1977882" data-claire-element-id="6145419"><td id="r-1977877" data-claire-element-id="2129688"><p id="r-1977876" data-claire-element-id="2129687"><code data-claire-semantic="sql">MEDIUMTEXT</code></p></td><td id="r-1977879" data-claire-element-id="6145418"><p id="r-1977878" data-claire-element-id="6145417"> <math>$\(2^{24}\)$</math>﻿ octets</p></td><td id="r-1977881" data-claire-element-id="2129692"><p id="r-1977880" data-claire-element-id="2129691">Longueur de la chaîne + 3 octets</p></td></tr><tr id="r-1977889" data-claire-element-id="6145433"><td id="r-1977884" data-claire-element-id="2129695"><p id="r-1977883" data-claire-element-id="2129694"><code data-claire-semantic="sql">LONGTEXT</code></p></td><td id="r-1977886" data-claire-element-id="6145432"><p id="r-1977885" data-claire-element-id="6145431"> <math>$\(2^{32}\)$</math>﻿﻿ octets</p></td><td id="r-1977888" data-claire-element-id="2129699"><p id="r-1977887" data-claire-element-id="2129698">Longueur de la chaîne + 4 octets</p></td></tr></tbody></table>


#### <a name="colonne_type_binaire" /> Valeur chaîne de binaire

Documentation sur __MySQL__: [champ binaire](http://dev.mysql.com/doc/refman/5.5/en/binary-varbinary.html)

Comme les chaînes de type texte que l'on vient de voir, une chaîne binaire n'est rien d'autre qu'une suite de caractères.
Cependant, si les textes sont affectés par l'encodage et l'interclassement, ce n'est pas le cas des chaînes binaires. Une chaîne binaire n'est rien d'autre qu'une suite d'octets. Aucune interprétation n'est faite sur ces octets. Ceci a deux conséquences principales.

Ceci nous permet donc de stocké des images ou d'autre fichier binaire dans la base de données , alors j'aimerai juste mettre un avertissement avec cette pratique. J'ai déjà entendu des __DBA__ dire qu'une base de données était pas fait pour ça et qu'il est mieux de stocker les fichiers sur le disque et de définir dans la base de données le chemin d'accès. Personnellement je suis plus pour cette approche, surtout pour avoir la flexibilité de manipuler les fichiers en dehors de la base de donnée, mais bon ... Donc si vous désirez faire ce type d'opération parlez s'en a un spécialiste :P , pour avoir confirmation :D.

#### <a name="colonne_type_date" /> Valeur temporel (date)

Documentation sur __MySQL__ : [champs temporelle](http://dev.mysql.com/doc/refman/5.5/en/data-type-defaults.html)

Autre type de donnée que vous voudrez surement stocké des valeurs temporelle telle que des dates , incluant l'heure . Voici les 5 types disponible avec __MySQL__:

Les cinq types temporels de __MySQL__ sont :

* **DATE** : Permet d'entrer une date, l'ordre des données est la seule contrainte. Il faut donner d'abord l'année (deux ou quatre chiffres), ensuite le mois (deux chiffres) et pour finir, le jour (deux chiffres) : **AAAA-MM-JJ**
* **DATETIME** : ce type permet de stocker une heure, en plus d'une date : **AAAA-MM-JJ HH:MM:SS** 
* **TIME** : Si nous désirons stocker uniquement le temps ce type est approprié : **HH:MM:SS**
* **TIMESTAMP**: le timestamp d'une date est le nombre de secondes écoulées depuis le 1er janvier 1970, 0h0min0s (TUC) et la date en question. Les timestamps étant stockés sur 4 octets, il existe une limite supérieure : le 19 janvier 2038 à 3h14min7s.
* **YEAR** : Ce type contenant l'année est limité en effet il ne permet de contenir une date entre :1901 et 2155

Pour plus de détail je vous laisserai le plaisir de consulter la documentation de __MySQL__ :D.

#### <a name="colonne_type_num" /> Valeur prédéfinie d'énumération (Propre à Mysql)

Documentation sur __MySQL__ :

* [champs enum](http://dev.mysql.com/doc/refman/5.5/en/enum.html)
* [champs set](http://dev.mysql.com/doc/refman/5.5/en/set.html)

Je vais couvrir 2 type propre à __MySQL__ si vous désirez être indépendant de la base de donnée , n'utilisez pas ce type, car il n'est pas portable sur toutes les base de données! Bon moi je les trouves cool tous de même :P.

* **ENUM** : Permet de définir une liste (énumération) de valeur possible pour le champs , **ENUM** permet l'assignation d'une valeur uniquement si nous assignons une valeur non valide , **NULL** sera stocké dans la colonne
* **SET** : Équivalent à **ENUM** cependant nous pouvons assigné plusieurs valeur à la colonne.


Un petit exemple avec **ENUM** , création d'une colonne 

        espece ENUM('chat', 'chien', 'tortue')

La colonne __espece__ pourra alors contenir les chaînes "chat", "chien" ou "tortue", mais pas les chaînes "lapin" ou "cheval".

Exemple avec **SET** :

        espece SET('chat', 'chien', 'tortue')

La colonne pourra contenir :

* '' (chaîne vide ) ;
* 'chat' ;
* 'chat,tortue' ;
* 'chat,chien,tortue' ;
* 'chien,tortue' ;

### <a name="primary_key" /> Définition d'une clé primaire

Référence de documentation sur [OpenClassRoom](https://openclassrooms.com/courses/administrez-vos-bases-de-donnees-avec-mysql/cles-primaires-et-etrangeres)

Nous allons commencer par couvrir la question de la clé primaire nous verrons par la suite la mise en relation entre 2 table avec la clé étrangère.
**La clé primaire permet d'identifier une ligne de manière unique**

La clé primaire peut être une colonne ou une combinaisons de plusieurs colonne, dans tous les cas le résultat est unique dans la table.
La clé primaire ne peut pas être **null**.

Voyons la mise en place d'une clé primaire , nous reprenons la table en employé :

        mysql> drop table employe;
        Query OK, 0 rows affected (0.01 sec)

        mysql> create table employe ( id tinyint unsigned PRIMARY KEY, nom varchar(20), titre varchar(30) );
        Query OK, 0 rows affected (0.02 sec)

        mysql> insert into employe value (1,'Bob Marley','Chanteur');
        Query OK, 1 row affected (0.01 sec)

        mysql> select  * from employe;
        +----+------------+----------+
        | id | nom        | titre    |
        +----+------------+----------+
        |  1 | Bob Marley | Chanteur |
        +----+------------+----------+
        1 row in set (0.00 sec)

        mysql> insert into employe value (1,'Robert Nesta Marley','Chanteur'); 
        ERROR 1062 (23000): Duplicate entry '1' for key 'PRIMARY'
        mysql> desc employe;
        +-------+---------------------+------+-----+---------+-------+
        | Field | Type                | Null | Key | Default | Extra |
        +-------+---------------------+------+-----+---------+-------+
        | id    | tinyint(3) unsigned | NO   | PRI | NULL    |       |
        | nom   | varchar(20)         | YES  |     | NULL    |       |
        | titre | varchar(30)         | YES  |     | NULL    |       |
        +-------+---------------------+------+-----+---------+-------+
        3 rows in set (0.00 sec)

Dans l'exemple ci-dessous j'ai identifier la colonne  numéro **id** comme clé primaire , j'ai tenté d'ajouter 2 fois __l'id__ le système ne permet pas.

Mise en place d'une clé primaire à champs multiple :

        mysql> create table nomAlbum ( nom VARCHAR(20), artiste VARCHAR(20), annee YEAR , PRIMARY KEY(nom,annee));
        Query OK, 0 rows affected (0.01 sec)

        mysql> desc nomAlbum;
        +---------+-------------+------+-----+---------+-------+
        | Field   | Type        | Null | Key | Default | Extra |
        +---------+-------------+------+-----+---------+-------+
        | nom     | varchar(20) | NO   | PRI |         |       |
        | artiste | varchar(20) | YES  |     | NULL    |       |
        | annee   | year(4)     | NO   | PRI | 0000    |       |
        +---------+-------------+------+-----+---------+-------+
        3 rows in set (0.00 sec)

        mysql> insert into nomAlbum value ('Babylon Bus','Bob Marley',1973);  
        Query OK, 1 row affected (0.00 sec)

        mysql> insert into nomAlbum value ('Babylon Bus','Bob Marley',2010);
        Query OK, 1 row affected (0.00 sec)

        mysql> insert into nomAlbum value ('Babylon Bus','Ki-many Marley',2010);
        ERROR 1062 (23000): Duplicate entry 'Babylon Bus-2010' for key 'PRIMARY'

Comme vous pouvez le constater pas __d'id__ dans cette situation mais des contraintes sur 2 colonne.

#### <a name="primary_key_le_choix" /> Choisir une clé primaire

Le choix d'une clé primaire est une étape importante dans la conception d'une table. Ce n'est pas parce que vous avez l'impression qu'une colonne, ou un groupe de colonnes, pourrait faire une bonne clé primaire que c'est le cas. Prenons l'exemple d'une table Client, qui contient le nom, le prénom, la date de naissance et l'email des clients d'une société.

Chaque client a bien sûr un nom et un prénom. Est-ce que (nom, prénom) ferait une bonne clé primaire ? Non bien sûr : il est évident ici que vous risquez des doublons. Et si on ajoute la date de naissance ? Les chances de doublons sont alors quasi nulles. Mais quasi nul, ce n'est pas nul… Qu'arrivera-t-il le jour où vous voyez débarquer un client qui a les mêmes nom et prénom qu'un autre, et qui est né le même jour ? On refait toute la base de données ? Non, bien sûr.
Et l'email alors ? Il est impossible que deux personnes aient la même adresse email, donc la contrainte d'unicité est respectée. Par contre, tout le monde n'est pas obligé d'avoir une adresse email. Difficile donc de mettre une contrainte non **NULL** sur cette colonne.

Par conséquent, on est bien souvent obligé d'ajouter une colonne pour jouer le rôle de la clé primaire. C'est cette fameuse colonne id, __auto-incrémentée__.

Il y a une autre raison d'utiliser une colonne spéciale __auto-incrémentée__, de type **INT** (ou un de ses dérivés) pour la clé primaire. En effet, si l'on définit une clé primaire, c'est en partie dans le but d'utiliser au maximum cette clé pour faire des recherches dans la table. Bien sûr, parfois ce n'est pas possible, parfois vous ne connaissez pas __l'id__ du client, et vous êtes obligés de faire une recherche par nom. Cependant, vous verrez bientôt que les clés primaires peuvent servir à faire des recherches de manière indirecte sur la table. Du coup, comme les recherches sont beaucoup plus rapides sur des nombres que sur des textes, il est souvent intéressant d'avoir une clé primaire composée de colonnes de type **INT**.

### <a name="foreign_key" /> Définition d'une clé étrangère 

Référence de documentation sur [OpenClassRoom](https://openclassrooms.com/courses/administrez-vos-bases-de-donnees-avec-mysql/cles-primaires-et-etrangeres)

La clé étrangère c'est bien , c'est pratique pour définir une ligne unique , mais la clé primaire prend tous sont sens avec les clé étrangère 
**Les clés étrangères ont pour fonction principale la vérification de l'intégrité de votre base. Elles permettent de s'assurer que vous n'insérez pas de bêtises…**

Je vais faire la création de 2 table , une contenant la liste des artistes et l'autre contenant la liste des albums. Avec l'aide des clé primaire et étrangère nous mettrons en relation les 2 tables. 
La clé primaire de la table **artiste** est le numéro __d'id__.
La clé primaire de la table **album** est aussi un __id__.
Nous identifions une colonne artiste dans la table **album** qui est du même type que la clé primaire définie dans la table artiste. Nous assignions la référence avec l'instruction 

        FOREIGN KEY (artiste) REFERENCES artiste(id) );

Voici l'exemple complet de l'opération :

        mysql> create table artiste ( id TINYINT UNSIGNED PRIMARY KEY, nom VARCHAR(20) );
        Query OK, 0 rows affected (0.01 sec)

        mysql> create table album (id TINYINT UNSIGNED PRIMARY KEY,
             > nom VARCHAR(20), annee YEAR,
             > artiste TINYINT UNSIGNED ,
             > FOREIGN KEY (artiste) REFERENCES artiste(id) );

       mysql> desc album;
       +---------+---------------------+------+-----+---------+-------+
       | Field   | Type                | Null | Key | Default | Extra |
       +---------+---------------------+------+-----+---------+-------+
       | id      | tinyint(3) unsigned | NO   | PRI | NULL    |       |
       | nom     | varchar(20)         | YES  |     | NULL    |       |
       | annee   | year(4)             | YES  |     | NULL    |       |
       | artiste | tinyint(3) unsigned | YES  | MUL | NULL    |       |
       +---------+---------------------+------+-----+---------+-------+
       4 rows in set (0.00 sec)



Ajoutons un peu de donnée , quelle artiste on ajoute :P .... 


        mysql> insert into artiste value (1, 'Bob Marley');
        Query OK, 1 row affected (0.01 sec)

        mysql> select * from artiste;
        +----+------------+
        | id | nom        |
        +----+------------+
        |  1 | Bob Marley |
        +----+------------+
        1 row in set (0.00 sec)

        mysql> insert into album value (1,'Babylon bus',1973,1);                                                                                                     
        Query OK, 1 row affected (0.01 sec)

        mysql> select * from album;
        +----+-------------+-------+---------+
        | id | nom         | annee | artiste |
        +----+-------------+-------+---------+
        |  1 | Babylon bus |  1973 |       1 |
        +----+-------------+-------+---------+
        1 row in set (0.00 sec)


Voyons maintenant l'erreur de contrainte / clé étrangère 

        mysql> insert into album value (1,'Babylon bus',1973,3);
        ERROR 1062 (23000): Duplicate entry '1' for key 'PRIMARY'

        mysql> insert into album value (2,'kaya',1978,3);       
        ERROR 1452 (23000): Cannot add or update a child row: a foreign key constraint fails (`ma_super_BD`.`album`, CONSTRAINT `album_ibfk_1` FOREIGN KEY (`artiste`) REFERENCES `artiste` (`id`))

        mysql> insert into album value (2,'kaya',1978,1);
        Query OK, 1 row affected (0.00 sec)

        mysql> select * from album;                             
        +----+-------------+-------+---------+
        | id | nom         | annee | artiste |
        +----+-------------+-------+---------+
        |  1 | Babylon bus |  1973 |       1 |
        |  2 | kaya        |  1978 |       1 |
        +----+-------------+-------+---------+
        2 rows in set (0.00 sec)

Voici une représentation graphique du résultat :

![cle_primaire-cle_secondaire.png](./imgs/cle_primaire-cle_secondaire.png)

### <a name="option_available" /> Option disponible par colonne

Nous avons l'essentiel pour créer une base de donnée , nous allons prendre quelques minutes pour voir quelque option additionnel afin d'être en mesure d'interpréter l'ensemble des informations __SQL__ que nous pouvons voir sur internet. 

2 Option que vous retrouverez fréquemment sont :

* **NOT NULL** : qui permet de spécifier que la colonne ne peut PAS être __null__ donc une donnée doit être assigné 
* **AUTO_INCREMENT** : principalement utilisé pour les colonnes **id** afin que le numéro s incrémente automatiquement.

Voici un exemple d'utilisation :

        mysql> drop table album;
        Query OK, 0 rows affected (0.00 sec)

        mysql> create table album (id TINYINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
             > nom VARCHAR(20) NOT NULL ,
             > annee YEAR NOT NULL ,
             > artiste TINYINT UNSIGNED ,
             > FOREIGN KEY (artiste) REFERENCES artiste(id) );

        mysql> desc album;                                                                                                                                           
        +---------+---------------------+------+-----+---------+----------------+
        | Field   | Type                | Null | Key | Default | Extra          |
        +---------+---------------------+------+-----+---------+----------------+
        | id      | tinyint(3) unsigned | NO   | PRI | NULL    | auto_increment |
        | nom     | varchar(20)         | NO   |     | NULL    |                |
        | annee   | year(4)             | NO   |     | NULL    |                |
        | artiste | tinyint(3) unsigned | YES  | MUL | NULL    |                |
        +---------+---------------------+------+-----+---------+----------------+
        4 rows in set (0.00 sec)

## <a name="create_table_complet" /> Création d'une table version final

https://codex.wordpress.org/Database_Description

#### <a name="copy_table" /> Création d'un table depuis une autre

CREATE TABLE new_tbl LIKE orig_tbl;
CREATE TABLE new_tbl SELECT * FROM orig_tbl;
c
### <a name="type_de_bd" /> Type de BD MyISAM , Innodb

## <a name="view_vars_change_it"/> Visualisation et modification des variables

* max_connexion ...

# <a name="perms_mysql_tables" /> Manipulation des permissions avec mysql sans le grant

Bon voyons à l'étape **brutale** :D , car bon c'est ça qui est cool avec le libre, il y a la bonne méthode jolie avec les commandes :) , puis y a la méthode ou tu modifies le fichier en arrière puis ça marche :D. Je ne vous dis pas d'utiliser cette méthode !!! Mon objectif avec la démonstration est de démontré comment __Mysql__ stock l'information des permissions , le savoir est bien !

Telle mentionné, le système __MySQL__ à besoin de la base de données __mysql__ pour fonctionné afin de conserver les informations du système dont les permissions utilisateur. Nous allons créer une nouvelle base de donnée et refaire la même opération de création d'utilisateur mais sans **create user** et **sans les grant** . 
Pour les personnes qui disent **POURQUOI ?** vous pouvez passer au prochaine chapitre, car **la question n'est pas pourquoi mais COMMENT ?** .

Allez on crée la base de donnée : **zer\_bd**

        mysql> create database ze_bd ;
            Query OK, 1 row affected (0.00 sec)

        mysql> show databases;
        +--------------------+
        | Database           |
        +--------------------+
        | information_schema |
        | ma_super_BD        |
        | mysql              |
        | performance_schema |
        | ze_bd              |
        +--------------------+
        5 rows in set (0.00 sec)

Nous sommes avec l'utilisateur **root** nous allons basculer sous la base de donnée __mysql__

        mysql> use mysql;
        Database changed



# <a name="reference_intro"/> Référence introduction

* [Mysql-install-db](http://dev.mysql.com/doc/refman/5.5/en/mysql-install-db.html)
* [CREATE USER](http://dev.mysql.com/doc/refman/5.5/en/create-user.html)
* [SHOW DATABASES](http://dev.mysql.com/doc/refman/5.5/en/show-databases.html)
* [SHOW TABLES](http://dev.mysql.com/doc/refman/5.5/en/show-tables.html)
* [GRANT](http://dev.mysql.com/doc/refman/5.5/en/grant.html)
* [SHOW GRANT](http://dev.mysql.com/doc/refman/5.5/en/show-grants.html)
* [DROP USER](http://dev.mysql.com/doc/refman/5.5/en/drop-user.html)
* [CREATE TABLE](http://dev.mysql.com/doc/refman/5.5/en/create-table.html)
* [Type de données](http://dev.mysql.com/doc/refman/5.5/en/data-types.html)
    * [Nombre entiers](http://dev.mysql.com/doc/refman/5.5/en/integer-types.html)
    * [décimal valeur Fixe](http://dev.mysql.com/doc/refman/5.5/en/fixed-point-types.html)
    * [décimal valeur arrondie](http://dev.mysql.com/doc/refman/5.5/en/floating-point-types.html)
    * [chaine de caractère](http://dev.mysql.com/doc/refman/5.5/en/char.html)
    * [champ binaire](http://dev.mysql.com/doc/refman/5.5/en/binary-varbinary.html)   * [LONG chaine de caractère](http://dev.mysql.com/doc/refman/5.5/en/blob.html)
    * [champs temporelle](http://dev.mysql.com/doc/refman/5.5/en/data-type-defaults.html)
    * [champs enum](http://dev.mysql.com/doc/refman/5.5/en/enum.html)
    * [champs set](http://dev.mysql.com/doc/refman/5.5/en/set.html)
* [OpenClassRoom Mysql par Chantal Gribaumont](https://openclassrooms.com/courses/administrez-vos-bases-de-donnees-avec-mysql/les-types-de-donnees)

# <a name="configue" /> Configuration de mysql (mysql.cnf +  ~/.my.cnf)

# <a name="performance" /> Configuration de performance

# <a name="crash_recovery" /> Système de recupération et validation de la santé des tables

# <a name="mysql_replication" /> Mise en place d'une replication Mysql
# <a name="mysql_backup" /> Réalisation d'un backup de(s) base(s) de données



