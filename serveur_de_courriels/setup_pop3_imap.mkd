<meta http-equiv='Content-Type' content='text/html; charset=utf-8' /> 
<style>
pre{background:#F8F8FF; border:black dashed 1px; padding:6px}
</style>


# Index 


# <a name="description" /> Description

Suite à la mise en place d'un serveur capable de recevoir des courriels que nous avons valider que l'ensemble fonctionne, nous pouvons ouvrir la porte au client . Bien entendu il faut relativisé, nous parlons d'un environnement interne non exposé sur des courriels provenant d'Internet. Ici faut pas lire , ce que j'ai pas écrit le problème n'est pas au niveau de la sécurité !!!! C'est que si tu met pas de système anti-spam , ton serveur gobera tous puis ce sera pénible à cause du nombre de courriels reçu . Pourquoi je ne met pas tous de suite le service de l'anti-spam simplement pour avoir un flux du transfert de courriel complet ! 
Honnêtement j'active l'anti-spam TOUJOURS en dernier , pour la simple et bonne raison que le système va m'empêcher d'utiliser la commande __telnet__ pour transmettre des courriels, le système jugeant le format invalide . De plus si j'ai un problème et que le courriel n'est pas livré, en plus de valider que ce n'est pas le __MTA__ (postfix) ou le système __MDA__ (__dovecot__ ou autre) je dois regarder l'anti-spam. 
Maintenant libre à vous de fonctionner comme vous le désirez ...

Nous utiliserons pour la démonstration [dovecot](https://fr.wikipedia.org/wiki/Dovecot) [site officiel](http://dovecot.org/).
Une autre options est [Cyrus](https://fr.wikipedia.org/wiki/Cyrus_(logiciel) , il y a 4 ans __Cyrus__ avait plus de fonctionnalité que __dovecot__ une en particulier qui était le partage de répertoire entre les utilisateurs . __Dovecot__ a intégré cette fonctionnalité , encore une fois c'est une question de préférence , je trouve __Dovecot__ plus simple à configurer donc voilà :D.

# <a name="theorie_proto" /> Théorie des protocoles de récupération 

ICI ICI ICI 

# <a name="Installation" /> Installation de dovecot

Tous comme postfix le système est très modulaire si nous regardons les pacquages disponibles pour __dovecot__ :

         $ apt-cache search dovecot
         dovecot-core - secure POP3/IMAP server - core files
         dovecot-dbg - secure POP3/IMAP server - debug symbols
         dovecot-dev - secure POP3/IMAP server - header files
         dovecot-imapd - secure POP3/IMAP server - IMAP daemon
         dovecot-managesieved - secure POP3/IMAP server - ManageSieve server
         dovecot-pop3d - secure POP3/IMAP server - POP3 daemon
         dovecot-sieve - secure POP3/IMAP server - Sieve filters support
         argonaut-dovecot - Argonaut (client-module for dovecot)
         dovecot-antispam - Dovecot plugins for training spam filters
         dovecot-gssapi - secure POP3/IMAP server - GSSAPI support
         dovecot-ldap - secure POP3/IMAP server - LDAP support
         dovecot-lmtpd - secure POP3/IMAP server - LMTP server
         dovecot-lucene - secure POP3/IMAP server - Lucene support
         dovecot-metadata-plugin - Experimental IMAP METADATA Extension for Dovecot
         dovecot-mysql - secure POP3/IMAP server - MySQL support
         dovecot-pgsql - secure POP3/IMAP server - PostgreSQL support
         dovecot-solr - secure POP3/IMAP server - Solr support
         dovecot-sqlite - secure POP3/IMAP server - SQLite support
         fusiondirectory-plugin-dovecot - dovecot plugin for FusionDirectory
         fusiondirectory-plugin-dovecot-schema - LDAP schema for FusionDirectory dovecot plugin
         mysqmail-dovecot-logger - real-time logging system in MySQL - Dovecot traffic-logger
         vmm - manage mail domains/accounts/aliases for Dovecot and Postfix

Comme vous pouvez le voir il y a les modules pour __Mysql, Ldap, postgress, fusiondirectory__, bon comme pour postfix on va pas s'exciter trop vite on commence par la configuration local et après on va voir :D.
L'avantage pour les personnes qui l'écoute en différé vous pouvez sauter des parties :P.

        $ sudo apt-get install  dovecot-imapd dovecot-pop3d

Nous allons installer le service __pop3__ et __imap__ , l'intégration sous Ubuntu est bien fait ceci nous aidera :D.


## <a name="config_local" /> Configuration de dovecot avec des utilisateurs locaux

Regardons la structure de la configuration de dovecot, bien entendu la configuration est sous le répertoire **/etc**, plus précisément **/etc/dovecot**.
Le fichier principale est **/etc/dovecot/dovecot.conf** , comme le système est très modulaire , le systèmes utilise le principe d'inclusion de configuration afin d'activer des types de configuration.

        $ cat dovecot.conf | grep -v "^#" | grep -v ^$
        !include_try /usr/share/dovecot/protocols.d/*.protocol
        dict {
          #quota = mysql:/etc/dovecot/dovecot-dict-sql.conf.ext
          #expire = sqlite:/etc/dovecot/dovecot-dict-sql.conf.ext
        }

        !include conf.d/*.conf
        !include_try local.conf

Débutons l'analyse :

* **!include_try** : Permet de définir des inclusions optionnels, dans le cas de l'inclusion des protocoles ceci nous permet de définir les protocoles que dovecot est en mesure de fournir. Comme vous le constater le __PATH__ n'est pas dans **/etc/** , mais sur le système, ceci permet à Ubuntu de divisé le __packaging__ de l'application et que ce soit dynamiquement activé.
* **dict** : Je vais le sauté pour le moment, de toute manière l'ensemble est en commentaire, et je veux conserver une configuration "simple"
* **!include** : Ceci force l'inclusion s'il n'y a pas au moins 1 fichier de chargé alors l'application ne va pas démarrer , l'ensemble de la configuration "réel" est dans le répertoire **conf.d** un peu comme apache sous Redhat / Centos .
* **local.conf** : Permet de définir des configurations purement local pour nos besoins , nous y reviendrons bien entendu.

Regardons le contenu du répertoire **conf.d** : 

        $ ls /etc/dovecot/conf.d/
        10-auth.conf      10-master.conf      15-mailboxes.conf  90-plugin.conf               auth-dict.conf.ext        auth-static.conf.ext
        10-director.conf  10-ssl.conf         20-imap.conf       90-quota.conf                auth-master.conf.ext      auth-system.conf.ext
        10-logging.conf   10-tcpwrapper.conf  20-pop3.conf       auth-checkpassword.conf.ext  auth-passwdfile.conf.ext  auth-vpopmail.conf.ext
        10-mail.conf      15-lda.conf         90-acl.conf        auth-deny.conf.ext           auth-sql.conf.ext

Comme vous pouvez le constater tous est présent , la segmentation des fichiers permet d'avoir une meilleur vue des configurations par service plutôt que d'avoir un fichier de 900 lignes difficiles à interpréter. 

Bon il y a énormément de commentaire TRÈS pertinent dans les fichiers cependant pour simplifier la visibilité de la configuration je vais enlevé le ligne vide et les commentaires avec les commandes : **grep -v ^# | grep -v ^$**  , comme je suis ultra paresseux , j'ai pas envie de taper tous ces caractères je vais faire un alias pour la commande.

        $ alias  ccl=' grep -v ^# | grep -v ^$ '

Donc maintenant la commande **ccl** on va dire **clear configuration lines** . Je voulais juste clarifier la commande pour pas que vous ne compreniez pas pourquoi vous n'avions pas la commande **ccl** :D.

### <a name="config_auth" /> Configuration d'authentification avec dovecot

Visualisons la configuration contenu dans **conf.d** :

        $ cat 10-auth.conf | ccl
        auth_mechanisms = plain
        !include auth-system.conf.ext

__Yeahh__ ENCORE de l'inclusion .... __grrr__ !!! Bon c'est la vie .

* **auth_mechanisms** [documentation](http://wiki2.dovecot.org/Authentication/Mechanisms) : Pour le moment nous laisserons la configuration en texte claire , ceci nous permettra d'utiliser **telnet** pour nos testes. Par la suite vous pourrez voir les autres modes d'authentification disponible, bien entendu même si le mot de passe est transmis en claire s'il est transmis via un tunnel **SSL/TLS** le problème est moins critique.

Regardons l'autre fichier **auth-system.conf.ext**

        $ cat auth-system.conf.ext | ccl
        passdb {
          driver = pam
          # [session=yes] [setcred=yes] [failure_show_msg=yes] [max_requests=<n>]
          # [cache_key=<key>] [<service name>]
          #args = dovecot
        }
        [... OUTPUT COUPÉ ...]
        userdb {
          # <doc/wiki/AuthDatabase.Passwd.txt>
          driver = passwd
          # [blocking=no]
          #args =
          # Override fields from passwd
          #override_fields = home=/home/virtual/%u
        }
        [... OUTPUT COUPÉ ...]

Dans la configuration présente l'authentification **passdb** est réaliser grâce au système **PAM** [Pluggable Authentification Module](https://fr.wikipedia.org/wiki/Pluggable_Authentication_Modules)

ICI ICI 

## Ajout paramètre pour la définition de la destination
## Ajout du système de MDA (procmail) - Livraison des courriels pour un utilisateur local 
## Explication de mailbox et maildir
## Définition des alias 
## Récupération des courriels avec dovecot (imaps / pop3) pour utilisateur local


