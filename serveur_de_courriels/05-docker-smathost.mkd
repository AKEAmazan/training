<meta http-equiv='Content-Type' content='text/html; charset=utf-8' /> 
<style>
pre{background:#F8F8FF; border:black dashed 1px; padding:6px}
</style>


# Index 

* [ Introduction](#Intro)
* [ Image du conteneur srvmailrelay ](#image)
       * [ DockerFile ](#image_dockerfile)
       * [ DockerFile fichier de configuration](#image_dockerfile_conf)
       * [ DockerFile fichier exécutable (bin) ](#image_dockerfile_bin)
           * [ DockerFile fichier exécutable (bin) DFG](#image_dockerfile_bin_dfg)
           * [ DockerFile fichier exécutable (bin) run](#image_dockerfile_bin_run)

# <a name="Intro" /> Introduction

À la lumière de votre intérêt pour docker , nous allons voir la partie de la __dockerisation__ du serveur de relais , le gros avantage de __dockeriser__ ce service est qu'il change très peu. J'ai créer une images spécialement pour la formation afin de réduire le nombre de paramètre, afin de simplifier la démonstration. 
Pour la petite mise en contexte , cette image est utilisé sur l'ensemble des mes "__datacenters__", bon bon __ok__ je m'excite un peu là , je devrais dire sur mon serveur au centre de donnée et chez moi :P . Il ne reste que l'avantage est que je me suis fait chier une fois et maintenant je peux l'utiliser partout en définissant des paramètres selon le lieu :D. 
En d'autre mot je vais passez en paramètre le nom du serveur de relais , par le fait même que mon __FAI__ soit __BELL__ , __Videotron__ , __Roger__ peut importe lors du démarrage, je vais indiquer la destination. Ceci sera le même principe pour les réseaux que j'autorise à utiliser le service __SMTP__ de mon serveur.

Voyons la configuration maintenant que l'on est confortable avec postfix , ce sera plus simple.

La définition de l'image est disponible ICI : [SrcMailRelay conteneur](https://github.com/x3rus/training/tree/master/serveur_de_courriels/dockers/srvMailRelay)

# <a name="image" /> Image du conteneur srvmailrelay 

C'est partie , pour le plaisir des petits comme des grands :D.

Débutons avec le __DockerFile__ puis nous verrons les fichiers utilisés .

## <a name="image_dockerfile" /> DockerFile 

Voici le contenu : 

        FROM debian:jessie
        MAINTAINER Uri Savelchev <alterrebe@gmail.com>

        # Ignore APT warnings about not having a TTY
        ENV DEBIAN_FRONTEND noninteractive

        # Packages: update
        RUN apt-get update -qq && \
            apt-get install -qq -y --no-install-recommends postfix ca-certificates \
                    libsasl2-modules python-pip supervisor rsyslog && \
            pip install j2cli

        # Fix timezone
        RUN ln -s -f /usr/share/zoneinfo/Canada/Eastern /etc/localtime

        # Add files
        ADD conf /root/conf

        # Configure: supervisor
        ADD bin/dfg.sh /usr/local/bin/
        ADD conf/supervisor-all.conf /etc/supervisor/conf.d/

        # Runner
        ADD run.sh /root/run.sh
        RUN chmod +x /root/run.sh

        # Declare
        EXPOSE 25

        CMD ["/root/run.sh"]

Bon maintenant que je le regarde, il y a des points qui m'ennuie , ce conteneur date et il y a des choses que j'aime moins ... Mais bon . Comme vous pouvez le voir j'ai laissé le nom du __maintener__ original. J'étais partie d'une image disponible sur internet et j'ai réaliser quelques modifications.

* **FROM debian:jessie** : Donc je suis partie d'une __debian__ version __jessie__ , [Debian 8.7 was released January 14th, 2017)(https://www.debian.org/releases/stable/).
* **ENV DEBIAN_FRONTEND noninteractive** : Une  définition d'une variable d'environnement afin qu'il ne pose pas de question , qui ne pourrait pas être répondu car ce doit être automatique.
* **RUN apt-get update , apt-get install et pip install** : Nous réalisons l'installation des pacquages requis pour le système comme vous pouvez le voir il y a bien entendu **postfix** ainsi que le système de __log__ **rsyslog**. De plus il y a d'autre pacquage **python-pip** et **supervisor** , j'installe le système __python-pip__ car afin de modifier le fichier de configuration de postfix je vais utiliser le système [jinja2](http://jinja.pocoo.org/docs/2.9/) qui est un système de template. Ceci me permettra de modifier la configuration de postfix en passant des paramètres lors du démarrage. L'application que je vais utiliser est **j2cli** [documentation](https://pypi.python.org/pypi/j2cli/0.3.0-0). Pour **supervisor** cette application permet de démarrer des applications en premier plan (__Forground__) ceci permettra de conserver le conteneur en exécution tout en utilisant la commande __service__ , même si l'application est par défaut mis en arrière plan. 
* **RUN ln -s -f /usr/share/zoneinfo/Canada/Eastern /etc/localtime** : Bon ici c'est moins beau , je définie directement dans l'image le timezone du conteneur au lieu d'utiliser la variable d'environnement **TZ=America/Montreal** . Ceci est moins bien car si j'avais un "__datacenter__" au Maroc par exemple je devrais créer une autre image pour que le serveur est la bonne heure. Alors que si j'avais passé la variable au démarrage ceci aurait pu être configuration lors de l'initialisation.  (je fus paresseux , de la changer :P , on se reprendra pour les autres :D )
* **ADD conf /root/conf** : Copie des fichier de configuration , nous allons le voir ceci est les fichiers "__templates__" de postfix
* **ADD bin/dfg.sh /usr/local/bin/** : Ajout d'un script réaliser par __Uri__ , bon ça marche , je trouve qu'il s'est cassé un peu le tête , mais apprenons des méthodes de tous pour créer notre configuration :D. Nous jetterons un œil sur le script aussi.
* **ADD conf/supervisor-all.conf /etc/supervisor/conf.d/** : fichier de configuration du système de démarrage des applications en premier plan (__forground__)
* **ADD run.sh /root/run.sh et RUN chmod +x /root/run.sh** : Script de démarrage du conteneur 
* **EXPOSE 25** : Indique que le port 25 doit être exposé , personnellement je sur définie cette configuration avec lors de l'initialisation du conteneur.
* **CMD ["/root/run.sh"]** : Point d'entré lors du démarrage du conteneur.

Rien de fabuleux l'ensemble du traitement est vraiment dans le script de démarrage et la modification des fichiers de configuration. 

Commençons avec les fichiers de configurations.


## <a name="image_dockerfile_conf" /> DockerFile fichier de configuration

Telle que mentionné l'ensemble des fichiers de configuration sont dans le répertoire **conf** , il y a 2 fichiers :

* **postfix-main.cf** : Ce fichier contient la description de la configuration de postfix, ce fichier est de type [jinja2](http://jinja.pocoo.org/docs/latest/), regardons le contenu :

        smtpd_banner = $myhostname ESMTP $mail_name (Ubuntu)
        biff = no

        # appending .domain is the MUA's job.
        append_dot_mydomain = no

        # Uncomment the next line to generate "delayed mail" warnings
        #delay_warning_time = 4h

        readme_directory = no

        # See /usr/share/doc/postfix/TLS_README.gz in the postfix-doc package for
        # information on enabling SSL in the smtp client.

        smtpd_relay_restrictions = permit_mynetworks permit_sasl_authenticated defer_unauth_destination
        myhostname = $myorigin
        alias_maps = hash:/etc/aliases
        alias_database = hash:/etc/aliases
        myorigin = {{ RELAY_HOST_NAME }}
        mydestination = {{ RELAY_HOST_NAME }}
        {% if (EXT_RELAY_HOST != "Not_DEFINE") %}relayhost = {{ EXT_RELAY_HOST }} {% endif %}
        mynetworks = 127.0.0.0/8 [::ffff:127.0.0.0]/104 [::1]/128 {{ ACCEPTED_NETWORKS }}
        mailbox_size_limit = 0
        recipient_delimiter = +
        inet_interfaces = all
        inet_protocols = ipv4
    * Nous retrouvons l'ensemble des configurations postfix que nous avons déjà couvert , je ne reviendrais pas sur le sujet , je vais me concentré sur les variables présent dans le fichier qui sont encadré avec {{ et }} 
    * **myorigin = {{ RELAY_HOST_NAME }}** : Cette variable sera le nom de la machine qui sera présenté lors de l'envoie (__hostname__)
    * **mydestination = {{ RELAY_HOST_NAME }}** : Par défaut dans la configuration je définie que la machine accepte les courriels pour son nom de machine.
    * **{% if (EXT_RELAY_HOST != "Not_DEFINE") %}relayhost = {{ EXT_RELAY_HOST }} {% endif %}** : Un peu plus compliqué , pour mettre en contexte je voulais avoir la même image au __datacenter__ (__OVH__) et chez moi , malheureusement chez moi je suis obligé de passé par mon fournisseur d'accès internet. Dans le cadre __d'OVH__ l'envoie de courriel peut être réalisé directement, donc j'ai mis une condition. Si la variable **{{ EXT_RELAY_HOST }}** n'est pas égale à "__Not\_DEFINE__" alors la valeur est assigné à l'instruction __relayhost__. C'est un simple if :D.
    * **mynetworks = ... {{ ACCEPTED_NETWORKS }}** : Permet de définir encore par paramètre les réseaux autorisés à transmettre leurs courriels par cette machine. 
    * Bien entendu le nombre de paramètre n'est pas limité, nous verrons le processus de substitution.
* **supervisor-all.conf** : La configuration pour le système __supervisor__, dans ce cas la configuration est "statique" :

        [supervisord]
        logfile = /var/log/supervisord.log
        logfile_backups = 0

        [program:rsyslogd]
        command = /usr/sbin/rsyslogd -n

        [program:postfix]
        command = /usr/local/bin/dfg.sh /var/spool/postfix/pid/master.pid /etc/init.d/postfix start
        startsecs = 3


## <a name="image_dockerfile_bin" /> DockerFile fichier exécutable (bin) 

### <a name="image_dockerfile_bin_dfg" /> DockerFile fichier exécutable (bin) DFG

Si nous regardons un peu plus haut vous constatez que la commande de démarrage de postfix utilise un script , fait maison, nommé **dfg** pour __daemon Forground__ . Telle que mentionné précédemment ceci à pour but de conservé un processus en avant plan (__forground__) même si le processus fut mis en arrière plan (__background__) par le système comme c'est le cas lors de l'utilisation des scripts sous __/etc/init.d__.

Telle que mentionné je ne l'aurait personnellement pas fait comme telle, mais justement autant montré d'autre manière de faire après tous ça sert aussi à ça le libre apprendre des autres !! Ça peut toujours donner des idées pour d'autre projet / besoin !

        #! /usr/bin/env bash
        set -eu 
        
        # dfg: Daemon Foreground
        # Runs in foreground while a daemon is running and proxies signals to it.
        # As a result, a daemonizing process can be run with supervisor
        
        function display_help(){
            cat <<EOF
        dfg: Daemon Foreground
        Starts a daemon and runs in foreground while the daemon is active, and proxies signals.
        As a result, a daemonizing process can be run with supervisor.
        
        Usage: $(basename $0) <pidfile> <command...>
        EOF
        }
        [ $# -lt 2 ] && display_help
        
        # Arguments
        pidfile="$1"
        shift
        command=$@
        
        # Go foreground, proxy signals
        function kill_app(){
            kill $(cat $pidfile)
            exit 0
        }
        trap "kill_app" SIGINT SIGTERM
        
        # Launch daemon
        $command
        sleep 2
        
        # Loop while the pidfile and the process exist
        while [ -f $pidfile ] && kill -0 $(cat $pidfile) ; do
            sleep 0.5
        done
        exit 1000

Bon rapidement vous pourrez vous amusez , le prendre , le modifier, faire des teste , quelques point :

* **[ $# -lt 2 ] && display_help** : S'il n'y a pas 2 paramètres au script le système affiche l'aide grâce à la fonction __display\_help__.
* **pidfile="$1"** : Le premier paramètre est le fichier contenant le numéro du processus (__PID__)
* **shift** : le système supprimer le premier paramètre de la ligne de commande
* **command=$@** : assignation à la variable __$command__ l'ensemble de la ligne de commande restante ( comme ceci est fait après le __shift__ tous sauf le fichier __pid__ )
* **$command** : Démarrage de la commande passé en paramètre.
* **while** : Le système boucle 
    * **[ -f $pidfile ]** : Il valide que le fichier __pid__ est toujours présent 
    * **kill -0 $(cat $pidfile)** : En plus de valider la présence du fichier, il valide que le __PID__ est bien en fonction en envoyant le signal 0 , donc rien du tous au numéro du processus.
    * Si le fichier ET que l'envoie du signe fonctionne alors il réalise un __sleep__ 0.5 seconde. 

Donc c'est en gros les point important :D, maintenant à vous de vous amuser !!


### <a name="image_dockerfile_bin_run" /> DockerFile fichier exécutable (bin) run

Place au fichier d'exécution du conteneur , le plus important ! Nous allons donc voir la substitution de variable et le démarrage de postfix.

Voyons le contenu du fichier :

        #! /usr/bin/env bash
        set -e # exit on error

        # Variables
        export EXT_RELAY_HOST=${EXT_RELAY_HOST:-"email-smtp.us-east-1.amazonaws.com"}
        export EXT_RELAY_PORT=${EXT_RELAY_PORT:-"25"}
        export RELAY_HOST_NAME=${RELAY_HOST_NAME:-"relay.example.com"}
        export ACCEPTED_NETWORKS=${ACCEPTED_NETWORKS:-"192.168.0.0/16 172.16.0.0/12 10.0.0.0/8"}
        export OTHER_MY_DEST

        echo $RELAY_HOST_NAME > /etc/mailname

        # Templates
        j2 /root/conf/postfix-main.cf > /etc/postfix/main.cf

        # Launch
        rm -f /var/spool/postfix/pid/*.pid
        exec /usr/bin/supervisord -n

__Yep__ c'est pas long :D, puis on aime ça, c'est plus facile à comprendre !!

* Définition des variables , je vais en prendre qu'un pour l'exemple, mais le concept s'applique pour tous .

        export RELAY_HOST_NAME=${RELAY_HOST_NAME:-"relay.example.com"}
    * Nous assignons la variable d'environnement __RELAY\_HOST\_NAME__ à __RELAY\_HOST\_NAME__ , heu c'est le même nom ... (Je sais , on est le matin j'ai pas encore bus !! ) tous ce joue par la suite **:-"rela...** . Si la variable __RELAY\_HOST\_NAME__ est vide pas de valeur alors il assignera la valeur par défaut qui est définie après les caractères : **:-**. Magie !! On apprend tous les jours un peu plus à utiliser **bash** :D. Ceci est réaliser pour l'ensemble des variable ceci ne nous oblige pas à tous définir :D.
* Assignation du nom de la machine au fichier **/etc/mailname** , certaine application l'utilise c'est plus propre.
* **j2** : IMPORTANT toute la manipulation du fichier de configuration est réalisé ici , avec la commande **j2** (installé avec __pip__ ) le système va prendre les variables d'environnement et faire la substitution. Par défaut le résultat est affiché à l'écran nous réalisons donc une redirection dans le bon fichier de postfix soit : **/etc/postfix/main.cf**
* **rm \*.pid**: Un petit __cleanup__ des fichiers de __pid__ au cas où il y aurait des donnée qui traine :D.
* Démarrage de __supervisord__ pour le service .

Et voilà on a notre image prête à l'usage !!!

## <a name="image_creation" /> Création de l'image depuis le Dockerfile

Petit rappelle de l'utilisation de **docker build** afin de créer l'image finale que vous pourrez déplacer où bon vous semble. Nous avons déjà vu la commande, mais pour ceux qui n'ont pas suivie les autres formations ou tous simplement un rappel car vous ne l'avez pas utilisé beaucoup .

Réalisation de la création de l'image , allez dans le répertoire où ce trouve le __Dockerfile__ :

        $ docker build -t srvmailrelay .

* **-t srvmailrelay** : ceci est le nom de l'image que je lui ai assigné bien entendu libre à vous de le changer.

Validons le tous :

        $ docker images | grep srvmailrelay
        srvmailrelay                  latest              d42998a69f7c        23 hours ago        182 MB

**Yeah** on peut passer à l'autre section :D.

# <a name="conteneur" /> Utilisation du conteneur depuis l'image

J'espère que l'explication ne furent pas trop rapide, vous aurez le temps digérer le tous tranquillement , passons à présent à l'utilisation du conteneur.
Comment l'initialiser adéquatement , nous verrons l'opération manuel et l'opération plus jolie avec le __docker-compose__.

## <a name="conteneur_manual_init" /> Initialisation manuel du conteneur 

Quand je dis manuel, je veux dire avec l'instruction **docker run** et l'ensemble des paramètres sur la ligne de commande, ceci est très pratique lors de testes mais lors de la mise en "production" ceci à ces limites.

Pour rappel nous avions quelques variable disponible :

* `RELAY_HOST_NAME=relay.example.com`: Nom de machine (__hostname__) qui sera assigné au serveur smtp
* `ACCEPTED_NETWORKS=192.168.0.0/16 172.16.0.0/12 10.0.0.0/8`: La liste des réseaux qui sont autorisé à transmettre leur courriel par le serveur
* `EXT_RELAY_HOST=email-smtp.us-east-1.amazonaws.com`: Nom du serveur de relais si utilisé.

Nous aurions pu avoir plus d'option, mais c'est déjà bien :D, libre à vous de rajouter ce que vous avez besoin :). 

Donc si nous initialisons le conteneur , voici un exemple d'utilisation :

        $ docker run -d -h relay.example.com -e ACCEPTED_NETWORKS='192.168.0.0/16 172.16.0.0/12 10.0.0.0/8' -e EXT_RELAY_HOST=relay.mon_fai.com srvmailrelay
        4670b8a8ea8a86381ed77d08f1cf603128b0adbf3c7f720dad4d7e86820e5e24

        $ docker ps
        CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
        4670b8a8ea8a      srvmailrelay        "/root/run.sh"      45 seconds ago      Up 44 seconds       25/tcp              distracted_lamport

Nous allons récupérer un __shell__ sur le conteneur afin de valider la configuration .

        $ docker exec -it mailrelay bash
        root@relay:/# cat /etc/postfix/main.cf
        smtpd_banner = $myhostname ESMTP $mail_name (Ubuntu)
        biff = no

        # appending .domain is the MUA's job.
        append_dot_mydomain = no

        # Uncomment the next line to generate "delayed mail" warnings
        #delay_warning_time = 4h

        readme_directory = no

        # See /usr/share/doc/postfix/TLS_README.gz in the postfix-doc package for
        # information on enabling SSL in the smtp client.

        smtpd_relay_restrictions = permit_mynetworks permit_sasl_authenticated defer_unauth_destination
        myhostname = $myorigin
        alias_maps = hash:/etc/aliases
        alias_database = hash:/etc/aliases
        myorigin = relay.example.com
        mydestination = relay.example.com
        relayhost = relay.mon_fai.com
        mynetworks = 127.0.0.0/8 [::ffff:127.0.0.0]/104 [::1]/128 192.168.0.0/16 172.16.0.0/12 10.0.0.0/8
        mailbox_size_limit = 0
        recipient_delimiter = +
        inet_interfaces = all
        inet_protocols = ipv4
        root@relay:/#

Vous pouvez reprendre le __template jinja2__ et valider que l'ensemble des variables furent substitué , rapidement :

* **relayhost = relay.mon_fai.com** : utilise la variable **EXT\_RELAY\_HOST=relay.mon_fai.com**
* **mynetworks = ...192.168.0.0/16 172.16.0.0/12 10.0.0.0/8** : Utilise la variable **ACCEPTED\_NETWORKS='192.168.0.0/16 172.16.0.0/12 10.0.0.0/8'**

J'aimerai porter votre attention sur le paramètre **myorigin** : si nous regardons le fichier de __template__ ce devrait être la valeur de la variable **RELAY\_HOST\_NAME**. Une valeur fut attribué lors de l'initialisation du conteneur , lors de l'appel du script **run.sh**. 

On valide l'autre configuration SANS __relayhost__ :D.

        $ docker run -d -h relay.example.com  -e ACCEPTED_NETWORKS='192.168.0.0/16 172.16.0.0/12 10.0.0.0/8' -e EXT_RELAY_HOST=Not_DEFINE srvmailrelay       614f2846a28e5b1adbeac48a199d0e3f117e42822137493d7fbb425b0df73136

        $ docker ps
        CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
        614f2846a28e        srvmailrelay        "/root/run.sh"      13 seconds ago      Up 11 seconds       25/tcp              ecstatic_bose
        4670b8a8ea8a        srvmailrelay        "/root/run.sh"      3 minutes ago       Up 3 minutes        25/tcp              distracted_lamport

        $ docker exec -it ecstatic_bose bash
        root@relay:/# cat /etc/postfix/main.cf
        smtpd_banner = $myhostname ESMTP $mail_name (Ubuntu)
        biff = no

        # appending .domain is the MUA's job.
        append_dot_mydomain = no

        # Uncomment the next line to generate "delayed mail" warnings
        #delay_warning_time = 4h

        readme_directory = no

        # See /usr/share/doc/postfix/TLS_README.gz in the postfix-doc package for
        # information on enabling SSL in the smtp client.

        smtpd_relay_restrictions = permit_mynetworks permit_sasl_authenticated defer_unauth_destination
        myhostname = $myorigin
        alias_maps = hash:/etc/aliases
        alias_database = hash:/etc/aliases
        myorigin = relay.example.com
        mydestination = relay.example.com

        mynetworks = 127.0.0.0/8 [::ffff:127.0.0.0]/104 [::1]/128 192.168.0.0/16 172.16.0.0/12 10.0.0.0/8
        mailbox_size_limit = 0
        recipient_delimiter = +
        inet_interfaces = all
        inet_protocols = ipv4

**Yeah** ça fonctionne , comme vous pouvez le voir maintenant l'entrée __relayhost__ n'est plus présent :D, car dans le __template__ si la variable **EXT\_RELAY\_HOST** == __Not\_DEFINE__ il laisse le système transmettre directement sur internet. Je sais ma condition est pas super , du moins __Not\_DEFINE__ devrait être autre chose genre __DIRECT\_TO\_THE\_WORLD__ , ça vous fera un exercice :P.

Comme vous pouvez le voir j'ai les 2 conteneurs qui sont en exécution en même temps très pratique pour les testes !!

Bon c'est bien, ça fonctionne mais dans 3 mois si faut le redémarrer, vous chercherez dans votre __bash history__ et il est probable que la commande ni soit plus . Alors là "Panique au Bureau" :P , voilà pourquoi je vous invite FORTEMENT à utiliser un fichier de type __docker-compose__

Bon je vais supprimer les conteneurs actuelle :

        $ docker ps
        CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
        614f2846a28e        srvmailrelay        "/root/run.sh"      8 minutes ago       Up 8 minutes        25/tcp              ecstatic_bose
        4670b8a8ea8a        srvmailrelay        "/root/run.sh"      11 minutes ago      Up 11 minutes       25/tcp              distracted_lamport
        $ docker stop ecstatic_bose distracted_lamport
        ecstatic_bose
        distracted_lamport
        $ docker rm ecstatic_bose distracted_lamport                                                                                                         
        ecstatic_bose
        distracted_lamport


## <a name="conteneur_compose_init" /> Initialisation du conteneur  avec Docker-Compose


Vous pouvez utiliser un fichier de configuration qui permettra l'initialisation de votre conteneur, l'avantage bien entendu est d'avoir un fichier présent sur le système avec l'ensemble des informations d'initialisation. Ceci vous permet aussi d'ajouter Beaucoup d'options simplement et de les consulter facilement.

J'ai mis un exemple du fichier dans le répertoire de la définition du conteneur [srvmailrelay](https://github.com/x3rus/training/tree/master/serveur_de_courriels/dockers/srvMailRelay) .

Voici le contenu :

          mailrelay:
              image: 'srvmailrelay'
              restart: unless-stopped
              container_name : 'mailrelay'
              hostname: 'relais.example.com'
              environment:
                  - ENABLE_SASL_AUTH=no
                  - RELAY_HOST_NAME=monServerDeRelaisInterne.example.com
                  - ACCEPTED_NETWORKS=172.17.0.0/16
                 #- EXT_RELAY_HOST=Not_DEFINE
                  - EXT_RELAY_HOST=relai.fai.com
                  - OTHER_MY_DEST="localhost.example.com, localhost"
              volumes:
                  - '/tmp/mailrelay/var-spool-postfix:/var/spool/postfix'
          #    ports:
                  # - "IP_INTERNE:25:25"

Ligne par ligne :

* **mailrelay:** : ceci est le nom du service , quand nous utiliserons plusieurs conteneur pour la gestion d'un service nous verrons plus l'utilité on ce garde ça pour plus tard :D
* **images: srvmailrelay**  : Ceci indique quelle image docker utilisé , si nous utilisons une images disponible dans un registry le système va automatiquement le télécharger pour pouvoir la démarrer
* **restart: unless-stopped**: restart , si le service de docker redémarre (voir un reboot du serveur) , est-ce que ce conteneur doit être redémarrer , avec ce paramêtre il sera automatiquement redémarrer sauf s'il fut arrété manuellement préalablement.
* **hostname: 'relais.example.com'**: le nom de la "machine" (__hostname__ )
* **environment:** : ceci définie une liste de variable d'environnement qui seront transmis au conteneur lors de l'initialisation , comme vous pouvez le voir il y a plus de variable ici , ceci est du au fait que mon image __docker__ est légèrement différente :P.
    * **- RELAY\_HOST\_NAME=monServerDeRelaisInterne.example.com**
    * **- ACCEPTED\_NETWORKS=172.17.0.0/16**
    * **- EXT\_RELAY\_HOST=relai.fai.com**
* **volumes:** : définie la liste des répertoires qui seront lié entre la machine local ET le conteneur 
