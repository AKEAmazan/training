<meta http-equiv='Content-Type' content='text/html; charset=utf-8' /> 
<style>
pre{background:#F8F8FF; border:black dashed 1px; padding:6px}
</style>


# Index 

# <a name="Intro" /> Introduction

Nous avons donc vue la mise en place du système de réception de courriel localement ainsi que la possibilité pour les utilisateurs de récupérer leur courriel grâce au système __pop3__ et __imap__. Nous avions fait l'exercice avec un [pet container](http://rhelblog.redhat.com/2016/06/08/in-defense-of-the-pet-container-part-1-prelude-the-only-constant-is-complexity/) en d'autre mot avec un conteneur docker comme si c'était une __VM__. C'est mal , c'est bien je vous laisse lire le blog de RedHat sur le sujet, je suis un puriste sur l'utilisation du logiciel libre après je ne suis pas rigide sur les méthodes. Donc pour moi un pet conteneur c'est pas la fin du monde. 
Par contre il reste que c'est mieux d'avoir des vraies conteneurs qui sont indépendant , bien structuré que l'on peut modifier manipulé de manière indépendante ! Comme nous sommes dans le cadre de la formation nous allons faire l'exercice. 
Mettons tous de suite quelque chose au claire, ma configuration actuelle est un __pet conteneur__ , dû à des contrainte de temps de migration de serveur je n'avais pas eu le temps de faire l'exercice que l'on fait ici !!!
En d'autre mot pas de stress :D .

La grande particularité de la configuration qui suit est que nous allons pour la première fois depuis notre utilisation dans la formation connecter 2 conteneurs ensemble . 

* __postfix__ : réception et envoie de courriel
* __dovecot__ : Récupération des courriels.

# <a name="setup_images" /> Création des images 

Pour débuter du bon pieds nous allons définir les critères de configuration afin de ne pas tourné en rond lors de la mise en place de postfix , voici les critère à répondre . 

* **réception** : Permettre la réception de courriel pour 1 ou plusieurs domaines
* **envoie** : Permettre l'envoie de courriel sans authentification pour un ou plusieurs réseaux nommé (quand nous mettrons la configuration avec __Mysql__ nous ajouterons l'authentification)
* **MailDir** : Utilisation du système de stockage __maildir__ afin de limité les risques de corruption du fichier unique de courriel définie avec le format __mbox__
* **Validation des adresses à la source** : Nous voulons conservé la validation des adresses de courriels au niveau de postfix afin de ne pas avoir une charge élevé de courriels .
* **imap** : Permettre la réception de courriel via le protocole __imap__ , je vais mettre de coté le __pop3__ pour le moment.

Ça semble bon :D , maintenant passons au variable que nous désirons avoir configurable :

* **domaines** : Avoir une variable configurable pour que l'image soit utilisable pour n'importe quelle domaine
* **mynetwork** : Avoir une variable configuration pour la définition des réseaux qui peuvent transmettre des courriels.
* **relayhost** : Si le déploiement est fait dans un réseau restrictif permettre l'envoie pour via un __relayhost__.
* **authentification en claire** : Paramètre permettant l'authentification en claire sans chiffrement , bon vraiment pas obligatoire mais sinon j'ai rien pour dovecot :P

Comme la formation est sous Ubuntu , nous allons prendre la dernière __LTS__ pour le besoin donc Ubuntu:16.04

## <a name="setup_postfix" /> Création de l'image SMTP (postfix)

Nous allons reprendre bêtement les étapes vue dans la formation pour faire la création du __Dockerfile__ :

1. Installation des packages postfix
2. Mise en place d'un fichier de configuration en __template__ [Jinja2](http://jinja.pocoo.org/docs/2.9/)
3. Script de démarrage de postfix

Nous avons déjà débuter cette configuration lors de la mise en place du conteneur pour le __relayhost__ bien entendu on va s'en inspirer on l'a déjà étudier :D. J'ai tendance à présenter un produit fini quand je présente docker, malheureusement vous n'avez pas la chance de voir le processus de création incluant les erreur :D . Nous allons donc faire la démarche ensemble afin de voir l'avantage de l'utilisation de docker avec l'utilisation des couches (__layer__) en cache . 

Débutons je crée la structure :

        $ ls -R srvMailWithImap/
        srvMailWithImap/:
        imap  smtp

        srvMailWithImap/imap:

        srvMailWithImap/smtp:
        bin  Dockerfile  run.sh

        srvMailWithImap/smtp/bin:
        dfg.sh

Comme vous pouvez le voir , dans le répertoire __srvMailWithImap/__ il y a 2 répertoires 1 pour le service __smtp__ et l'autre pour le service __imap__ . 
Dans le répertoire __smtp__ j'ai repris une partie de la configuration du serveur __srvMailRelay__ , soit le script __dfg.sh__ ainsi que le script de démarrage. Nous le modifierons peut-être par la suite, mais pour le moment ceci nous donne un point de départ, et nous savons qu'il fonctionne !!

Voici le contenu du fichier **Dockerfile**

        $ cat Dockerfile
        # Using debian
        # Start Exemple:
        # ou can add -p 25:25 for LAN access
        FROM ubuntu:16.04
        MAINTAINER Boutry Thomas <thomas.boutry@x3rus.com>

        # Ignore APT warnings about not having a TTY
        ENV DEBIAN_FRONTEND noninteractive

        # Packages: update
        RUN apt-get update -qq && \
            apt-get install -qq -y --no-install-recommends postfix \
                    python-pip supervisor rsyslog && \
            pip install j2cli

        # Configure: supervisor
        ADD bin/dfg.sh /usr/local/bin/
        ADD conf/supervisor-all.conf /etc/supervisor/conf.d/

        # Runner
        ADD run.sh /root/run.sh
        RUN chmod +x /root/run.sh

        # Declare
        EXPOSE 25

        CMD ["/root/run.sh"]

Bien simple :

* Nous débutons avec l'image **Ubuntu:16.04** comme nous avons utilisé cette distribution depuis le début.
* Installation des packages pour postfix et __supervisor__ ainsi que le système __rsyslog__ pour les logs.
* Nous installons aussi __j2cli__ , toujours dans l'optique d'utiliser le système __jinja2__ comme __template__ pour les fichiers de configuration.
* Installation des fichiers de configuration pour __supervisor__ , j'ai simplement repris ceux déjà présenter lors de la présentation de la __dockerisation__ du serveur de relais.

L'ensemble des fichiers sont disponible sur [github](https://github.com/x3rus/training/tree/master/serveur_de_courriels/dockers/srvMailWithImap/smtp).

### <a name="setup_postfix_install_pkg" /> Installation des packages dans l'image

Passons à la génération de l'image , bien entendu la configuration n'est pas terminé !! 

        $ docker build -t srvsmtp .
        Sending build context to Docker daemon 6.144 kB
        Step 1 : FROM ubuntu:16.04
         ---> c73a085dc378
        Step 2 : MAINTAINER Boutry Thomas <thomas.boutry@x3rus.com>
         ---> Running in d42a4e80f101
         ---> 9421a73877a6
       [... OUTPUT COUPÉ ...]

Cette compilation est un peu plus longue, car ceci comprend l'installation des applications.

Super , j'en attendait pas autant :) , on a déjà une erreur :D , la voici :

       [... OUTPUT COUPÉ ...]
        Running hooks in /etc/ca-certificates/update.d...
        done.
        Collecting j2cli
          Downloading j2cli-0.3.1_0-py2-none-any.whl
        Collecting jinja2>=2.7.2 (from j2cli)
          Downloading Jinja2-2.9.5-py2.py3-none-any.whl (340kB)
        Collecting MarkupSafe>=0.23 (from jinja2>=2.7.2->j2cli)
          Downloading MarkupSafe-0.23.tar.gz
        Complete output from command python setup.py egg_info:
          Traceback (most recent call last):
          File "<string>", line 1, in <module>
          ImportError: No module named setuptools
          ----------------------------------------
          Command "python setup.py egg_info" failed with error code 1 in /tmp/pip-build-Gs2DNu/MarkupSafe/
          You are using pip version 8.1.1, however version 9.0.1 is available.
          You should consider upgrading via the 'pip install --upgrade pip' command.
         The command '/bin/sh -c apt-get update -qq &&     apt-get install -qq -y --no-install-recommends postfix         python-pip supervisor rsyslog &&     pip install j2cli' returned a non-zero code: 1



Vous me direz , mais pourquoi ça fonctionnait très bien avec le serveur de relais , effectivement mais nous étions avec une Debian __jessie__ , maintenant nous sommes avec Ubuntu.

Comment analyser le problème , voici comment je procède :

        $ docker run -it ubuntu:16.04 bash
        root@6c3da44d101c:/# apt-get update && apt-get install python-pip
	The following additional packages will be installed:
	  binutils build-essential bzip2 ca-certificates cpp cpp-5 dpkg-dev fakeroot file g++ g++-5 gcc gcc-5 gcc-5-base ifupdown iproute2 isc-dhcp-client
	  isc-dhcp-common libalgorithm-diff-perl libalgorithm-diff-xs-perl libalgorithm-merge-perl libasan2 libatm1 libatomic1 libc-dev-bin libc6 libc6-dev libcc1-0
	  libcilkrts5 libdns-export162 libdpkg-perl libexpat1 libexpat1-dev libfakeroot libffi6 libfile-fcntllock-perl libgcc-5-dev libgdbm3 libgmp10 libgomp1
	  libisc-export160 libisl15 libitm1 liblsan0 libmagic1 libmnl0 libmpc3 libmpfr4 libmpx0 libperl5.22 libpython-all-dev libpython-dev libpython-stdlib
	  libpython2.7 libpython2.7-dev libpython2.7-minimal libpython2.7-stdlib libquadmath0 libsqlite3-0 libssl1.0.0 libstdc++-5-dev libstdc++6 libtsan0 libubsan0
	  libxtables11 linux-libc-dev make manpages manpages-dev mime-support netbase openssl patch perl perl-modules-5.22 python python-all python-all-dev
	  python-dev python-minimal python-pip-whl python-pkg-resources python-setuptools python-wheel python2.7 python2.7-dev python2.7-minimal rename xz-utils
	Suggested packages:
	  binutils-doc bzip2-doc cpp-doc gcc-5-locales debian-keyring g++-multilib g++-5-multilib gcc-5-doc libstdc++6-5-dbg gcc-multilib autoconf automake libtool
	  flex bison gdb gcc-doc gcc-5-multilib libgcc1-dbg libgomp1-dbg libitm1-dbg libatomic1-dbg libasan2-dbg liblsan0-dbg libtsan0-dbg libubsan0-dbg
	  libcilkrts5-dbg libmpx0-dbg libquadmath0-dbg ppp rdnssd iproute2-doc resolvconf avahi-autoipd isc-dhcp-client-ddns apparmor glibc-doc libstdc++-5-doc
	  make-doc man-browser ed diffutils-doc perl-doc libterm-readline-gnu-perl | libterm-readline-perl-perl python-doc python-tk python-setuptools-doc
	  python2.7-doc binfmt-support
	The following NEW packages will be installed:
	  binutils build-essential bzip2 ca-certificates cpp cpp-5 dpkg-dev fakeroot file g++ g++-5 gcc gcc-5 ifupdown iproute2 isc-dhcp-client isc-dhcp-common
	  libalgorithm-diff-perl libalgorithm-diff-xs-perl libalgorithm-merge-perl libasan2 libatm1 libatomic1 libc-dev-bin libc6-dev libcc1-0 libcilkrts5
	  libdns-export162 libdpkg-perl libexpat1 libexpat1-dev libfakeroot libffi6 libfile-fcntllock-perl libgcc-5-dev libgdbm3 libgmp10 libgomp1 libisc-export160
	  libisl15 libitm1 liblsan0 libmagic1 libmnl0 libmpc3 libmpfr4 libmpx0 libperl5.22 libpython-all-dev libpython-dev libpython-stdlib libpython2.7
	  libpython2.7-dev libpython2.7-minimal libpython2.7-stdlib libquadmath0 libsqlite3-0 libssl1.0.0 libstdc++-5-dev libtsan0 libubsan0 libxtables11
	  linux-libc-dev make manpages manpages-dev mime-support netbase openssl patch perl perl-modules-5.22 python python-all python-all-dev python-dev
	  python-minimal python-pip python-pip-whl python-pkg-resources python-setuptools python-wheel python2.7 python2.7-dev python2.7-minimal rename xz-utils
	The following packages will be upgraded:
	  gcc-5-base libc6 libstdc++6
	3 upgraded, 87 newly installed, 0 to remove and 25 not upgraded.
	Need to get 88.4 MB of archives.
	After this operation, 268 MB of additional disk space will be used.
	Do you want to continue? [Y/n] y
	 
        [... Isshhh c beaucoup de packages requis :P ...]

Je démarre un Ubuntu éphémère uniquement pour valider la procédure , ceci me permettra de réaliser l'analyse du problème en mode interactif. 

Recherche du package __j2cli__ 

        root@6c3da44d101c:/# pip search j2cli
        j2cli3 (0.0.7.post0)  - Command-line interface to Jinja2 for templating in shell scripts.
        j2cli (0.3.1-0)       - Command-line interface to Jinja2 for templating in shell scripts.

__Humm__ ça semble bon :-/ on va tenter de l'installer alors :

        root@6c3da44d101c:/# pip install j2cli
        Collecting j2cli
          Downloading j2cli-0.3.1_0-py2-none-any.whl
        Collecting jinja2>=2.7.2 (from j2cli)
          Downloading Jinja2-2.9.5-py2.py3-none-any.whl (340kB)
          100% |################################| 348kB 1.1MB/s
        Collecting MarkupSafe>=0.23 (from jinja2>=2.7.2->j2cli)
        Downloading MarkupSafe-0.23.tar.gz
        Building wheels for collected packages: MarkupSafe
        Running setup.py bdist_wheel for MarkupSafe ... done
        Stored in directory: /root/.cache/pip/wheels/a3/fa/dc/0198eed9ad95489b8a4f45d14dd5d2aee3f8984e46862c5748
        Successfully built MarkupSafe
        Installing collected packages: MarkupSafe, jinja2, j2cli
        Successfully installed MarkupSafe-0.23 j2cli-0.3.1-0 jinja2-2.9.5
        You are using pip version 8.1.1, however version 9.0.1 is available.
        You should consider upgrading via the 'pip install --upgrade pip' command.

Donc :

        $ docker build -t srvsmtp .

Aucun problème ... On va refaire un teste alors avec le __Dockerfile__ :

        Command "python setup.py egg_info" failed with error code 1 in /tmp/pip-build-cpjQyz/MarkupSafe/
        You are using pip version 8.1.1, however version 9.0.1 is available.
        You should consider upgrading via the 'pip install --upgrade pip' command.
        The command '/bin/sh -c apt-get update -qq &&     apt-get install -qq -y --no-install-recommends postfix         python-pip supervisor rsyslog &&     pip install j2cli' returned a non-zero code: 1

Pourquoi ? Si nous regardons une des différences entre la configuration dans le __Dockerfile__ et mon teste est que lors de l'installation dans le __Dockerfile__ il y a l'instruction **--no-install-recommends**. Résultat il manque des packages requis pour l'utilisation de **pip**. 

Bien entendu 2 options s'offre à nous :

* Supprimer le paramètre **--no-install-recommends** dans le __Dockerfile__ , résultat une image plus grosse , est-ce vraiment critique ?!?! À vous de voir.
* Ajuster les packages lors de l'installation afin de conserver l'option d'installation des packages requis uniquement.

Bon , comme la suppression du paramètre est assez simple , je vais prendre l'option, car l'important n'est pas la solution mais le processus pour y arrivé, sinon vous ne seriez pas là :D. 

Donc je quitte mon conteneur de teste , car pollué par trop de packages et en redémarre un nouveau et reprend :

        root@6c3da44d101c:/# exit
        ٩(◠◡◠)۶ $ docker run -it ubuntu:16.04 bash
        root@8f4caf46401e:/#  apt-get update && apt-get --no-install-recommends install python-pip
        The following additional packages will be installed:
          ca-certificates libexpat1 libffi6 libpython-stdlib libpython2.7-minimal libpython2.7-stdlib libsqlite3-0 libssl1.0.0 mime-support openssl python
          python-minimal python-pip-whl python2.7 python2.7-minimal
        Suggested packages:
          python-doc python-tk python2.7-doc binutils binfmt-support
        Recommended packages:
          file build-essential python-all-dev python-setuptools python-wheel
        The following NEW packages will be installed:
          ca-certificates libexpat1 libffi6 libpython-stdlib libpython2.7-minimal libpython2.7-stdlib libsqlite3-0 libssl1.0.0 mime-support openssl python
          python-minimal python-pip python-pip-whl python2.7 python2.7-minimal
        0 upgraded, 16 newly installed, 0 to remove and 28 not upgraded.
        Need to get 7450 kB of archives.
        After this operation, 24.9 MB of additional disk space will be used.

Pas mal moins de packages, bon maintenant nous allons être dans le détail pour le problème spécifique . Regardons le message d'erreur que nous avons avec le conteneur :

        Collecting MarkupSafe>=0.23 (from jinja2>=2.7.2->j2cli)
          Downloading MarkupSafe-0.23.tar.gz
        Complete output from command python setup.py egg_info:
          Traceback (most recent call last):
          File "<string>", line 1, in <module>
          ImportError: No module named setuptools

Si nous regardons , un des packages recommencés il y a **python-setuptools** , ceci correspond au message d'erreur que nous avons :D , installons le pour voir et testons à nouveau .


        root@8f4caf46401e:/# apt-get --no-install-recommends install python-setuptools
        Collecting j2cli
          Downloading j2cli-0.3.1_0-py2-none-any.whl
        Collecting jinja2>=2.7.2 (from j2cli)
          Downloading Jinja2-2.9.5-py2.py3-none-any.whl (340kB)
          100% |################################| 348kB 1.1MB/s
        Collecting MarkupSafe>=0.23 (from jinja2>=2.7.2->j2cli)
          Downloading MarkupSafe-0.23.tar.gz
          Building wheels for collected packages: MarkupSafe
          Running setup.py bdist_wheel for MarkupSafe ... error
          Complete output from command /usr/bin/python -u -c "import setuptools, tokenize;__file__='/tmp/pip-build-NleDVW/MarkupSafe/setup.py';exec(compile(getattr(tokenize, 'open', open)(__file__).read().replace('\r\n', '\n'), __file__, 'exec'))" bdist_wheel -d /tmp/tmp2aCAjppip-wheel- --python-tag cp27:
          usage: -c [global_opts] cmd1 [cmd1_opts] [cmd2 [cmd2_opts] ...]
          or: -c --help [cmd1 cmd2 ...]
          or: -c --help-commands
          or: -c cmd --help
          error: invalid command 'bdist_wheel'
          ----------------------------------------
          Failed building wheel for MarkupSafe
          Running setup.py clean for MarkupSafe
          Failed to build MarkupSafe
          Installing collected packages: MarkupSafe, jinja2, j2cli
          Running setup.py install for MarkupSafe ... done
          Successfully installed MarkupSafe-0.23 j2cli-0.3.1-0 jinja2-2.9.5

**COOL** encore une erreur mais PAS la même , si nous regardons encore le message il y a le mot __wheel__ de présent , il est aussi dans un des packages recommandés pour l'installation ajoutons le :D .

        root@8f4caf46401e:/# apt-get --no-install-recommends install python-wheel                                                                                     
        root@8f4caf46401e:/# pip install j2cli
        Requirement already satisfied (use --upgrade to upgrade): j2cli in /usr/local/lib/python2.7/dist-packages
        Requirement already satisfied (use --upgrade to upgrade): jinja2>=2.7.2 in /usr/local/lib/python2.7/dist-packages (from j2cli)
        Requirement already satisfied (use --upgrade to upgrade): MarkupSafe>=0.23 in /usr/local/lib/python2.7/dist-packages (from jinja2>=2.7.2->j2cli)
        You are using pip version 8.1.1, however version 9.0.1 is available.
        You should consider upgrading via the 'pip install --upgrade pip' command.
        root@8f4caf46401e:/# echo $?
        0

**Yeahhh** du premier coup :P, nous allons donc ajuster le fichier __Dockerfile__ , voici donc la nouvelle ligne avec la liste des packages :


        # Packages: update
        RUN apt-get update -qq && \
            apt-get install -qq -y --no-install-recommends postfix \
                    python-pip supervisor rsyslog python-wheel python-setuptools  && \
                    pip install j2cli


On reconstruit l'image :

        $ docker build -t srvsmtp .                                                                                                                          
        Sending build context to Docker daemon 6.656 kB
        Step 1 : FROM ubuntu:16.04
         ---> c73a085dc378
         Step 2 : MAINTAINER Boutry Thomas <thomas.boutry@x3rus.com>
         [ ... OUTPUT COUPÉ ...]

        Removing intermediate container ba87a471cb7a
        Step 5 : ADD bin/dfg.sh /usr/local/bin/
         ---> b842eee6ca8a
         Removing intermediate container 4631078aaad4
        Step 6 : ADD conf/supervisor-all.conf /etc/supervisor/conf.d/
         lstat conf/supervisor-all.conf: no such file or directory

Je suis sûr que vous pensez que je l'ai fait volontairement, mais même pas je vous jure ... En temps normale je le cache ça :P . Bon on va capitalisé sur le problème j'ai opté pour vous montrer tous, donc ça sera tous , le bon et le moins bon .

### <a name="setup_postfix_setup_conf" /> Mise en place des fichiers de configuration

Donc suite à l'erreur de mon oublie du fichier de __supervisor__ je vais le mettre dans le répertoire conf , voici le contenu , c'est le même que pour le __relayhost__ je ne prendrai pas le temps d'écrire.

        [supervisord]
        logfile = /var/log/supervisord.log
        logfile_backups = 0

        [program:rsyslogd]
        command = /usr/sbin/rsyslogd -n

        [program:postfix]
        command = /usr/local/bin/dfg.sh /var/spool/postfix/pid/master.pid /etc/init.d/postfix start
        startsecs = 3

Donc on reprend :D : 

        $ docker build -t srvsmtp .
        [... OUTPUT COUPÉ ...]
        Step 3 : ENV DEBIAN_FRONTEND noninteractive
         ---> Using cache
         ---> 7bb41adacabf
        Step 4 : RUN apt-get update -qq &&     apt-get install -qq -y --no-install-recommends postfix         python-pip supervisor rsyslog python-wheel python-setuptools  &&     pip install j2cli
         ---> Using cache
         ---> db7a6b374677
        Step 5 : ADD bin/dfg.sh /usr/local/bin/
         ---> Using cache
         ---> b842eee6ca8a
        [... OUTPUT COUPÉ ...]

Ce qui est super est que le temps pris pour l'installation n'est pas repris maintenant car __docker__ va utiliser le cache des couches (__layers__) déjà compilé. 

État de la situation nous avons un conteneur qui à l'ensemble des packages d'installer ainsi que la configuration minimal pour le démarrage du conteneur , il nous reste :

1. Mettre en place la configuration pour postfix , en __template__
2. Modifier le script **run.sh** afin qu'il traite notre fichier de configuration en __template__ et le dispose dans le bon répertoire
3. Ajuster les valeurs par défaut de notre image si besoin est !

Voici notre fichier de configuration en __template__  (**conf/postfix-main.j2**) : 

        smtpd_banner = $myhostname ESMTP $mail_name

        alias_database = hash:/etc/aliases
        alias_maps = hash:/etc/aliases

        # Si vous le désirez nous pourrions avoir ce paramètre en option
        home_mailbox = Maildir/

        smtpd_relay_restrictions = permit_mynetworks  defer_unauth_destination
        myhostname = $myorigin
        myorigin = {{ SMTP_HOSTNAME }}

        mydestination = {{ ACCEPT_DOMAIN }}
        mynetworks = 127.0.0.0/8 [::ffff:127.0.0.0]/104 [::1]/128 {{ PERMIT_NETWORK }}
        inet_interfaces = all
        inet_protocols = ipv4

        {% if (EXT_RELAY_HOST != "DIRECT") %}relayhost = {{ EXT_RELAYHOST }} {% endif %}

Nous allons donc l'ajouter dans le __Dockerfile__

        [...OUTPUT COUPÉ ...]
        ADD conf/supervisor-all.conf /etc/supervisor/conf.d/

        # Setup postfix conf
        ADD conf/postfix-main.j2 /root/

        # Runner
        ADD run.sh /root/run.sh
        [...OUTPUT COUPÉ...]

Comme vous pouvez le constater j'ai mis la configuration **après** la définition des packages, ceci principalement pour ne pas à avoir à les réinstaller et profiter du caches de __docker__.

Le fichier sera donc dans le répertoire **/root** , nous devons ajuster le fichier **run.sh** pour le traitement du fichier , voici le nouveau contenu :

        #! /usr/bin/env bash
        set -e # exit on error

        # Variables
        export EXT_RELAY_HOST=${EXT_RELAY_HOST:-"DIRECT"}
        export SMTP_HOSTNAME=${SMTP_HOSTNAME:-"relay.example.com"}
        export PERMIT_NETWORK=${PERMIT_NETWORK:-"192.168.0.0/16"}
        export ACCEPT_DOMAIN=${ACCEPT_DOMAIN:-"localhost $SMTP_HOSTNAME"}
                              
        echo $SMTP_HOSTNAME > /etc/mailname
             
        # Templates
        j2 /root/postfix-main.j2 > /etc/postfix/main.cf

        # Launch
        rm -f /var/spool/postfix/pid/*.pid
        exec /usr/bin/supervisord -n

Principale changement :

* Les variables  et les valeurs par défaut
* Le patch pour le fichier postfix de __template__

On reconstruit l'image :D :

        $ docker build -t srvsmtp . 
        [... OUTPUT COUPÉ ...]
         ---> b842eee6ca8a
         Step 6 : ADD conf/supervisor-all.conf /etc/supervisor/conf.d/
          ---> Using cache
          ---> 98fd86c1b2a2
         Step 7 : ADD conf/postfix-main.j2 /root/
          ---> e6bbe80dbe93
        [... OUTPUT COUPÉ ...]


Comme vous pouvez  le constater le système à utiliser le cache jusqu'à la première modification
# les logs 
http://hokstadconsulting.com/docker/postfix , utilisation de -v /dev/log:/dev/log
