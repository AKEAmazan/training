Refreshing Terraform state in-memory prior to plan...
The refreshed state will be used to calculate this plan, but will not be
persisted to local or remote state storage.


------------------------------------------------------------------------

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

+ aws_default_vpc.default
      id:                                    <computed>
      arn:                                   <computed>
      assign_generated_ipv6_cidr_block:      <computed>
      cidr_block:                            <computed>
      default_network_acl_id:                <computed>
      default_route_table_id:                <computed>
      default_security_group_id:             <computed>
      dhcp_options_id:                       <computed>
      enable_classiclink:                    <computed>
      enable_classiclink_dns_support:        <computed>
      enable_dns_hostnames:                  <computed>
      enable_dns_support:                    "true"
      instance_tenancy:                      <computed>
      ipv6_association_id:                   <computed>
      ipv6_cidr_block:                       <computed>
      main_route_table_id:                   <computed>
      tags.%:                                "1"
      tags.Name:                             "Default VPC"

  + aws_key_pair.admin
      id:                                    <computed>
      fingerprint:                           <computed>
      key_name:                              "admin-key"
      public_key:                            "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDReMyXDOfuGipgcQViDTr3kqfbLVbIegJI+j3Br2wgX5CQXkWoFqKKZv3JIS4RnZdyQ3HCf8hbwUA1SoW4ngOAARToLYbMA80bHilZK5AzpYoTVH9GgfruLeq/ljJJAyh33vQgk26VX63mBIlp7cgxMx96T2iSqUuNbylXHgEOhPXMytv7FT4JcxMhNIRCq9YnsS8nD7+6GrJ7tSnochTauXs3OrM8bTA0AgZfj0PrC8aDZRCEShPU9QEjGTrtIX5AVcRoP01UInk1JWfQIBk1x5WPKYUDXQIrZPyLkWJ0Y6H7qcLKyBmDqTrEuMZ6fi9zcpEFkkg3wyC9ERr/UmVx xerus@goishi"

  + aws_key_pair.ansible
      id:                                    <computed>
      fingerprint:                           <computed>
      key_name:                              "ansible-key"
      public_key:                            "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDr1Av8Kj8LqsI6cK31n4IElsxsGemzDXAI8NSCSRtTlNh8dJIIXpWnrGFSM9NU8++4qQmlYv+5uRhKS1SMZcPgRlcNGIBGLQxolFVw437zvt5O5mgLePRjgXpQWF/0fwx4iKark9Djyt8eHjSbTHCqpflT2xgFPMq0sJFJWmIMcGMkIh436AbjubvlgB8K1CGJzbTM4xHhlEywrggDekUcvXD2IKQFHAbO1pU/47krLdaOEhY0KeHnxfrBLU4RLxn1lyQkWLqLvuM+7o4j5lcMS/v3CC5t8I80uMByK76TC7qFOmZdU0jdo0tJBDzCBw1EmjIkD9urO1ZfL+r7FSbH xerus@goishi"

  + aws_security_group.allow_external_communication
      id:                                    <computed>
      arn:                                   <computed>
      description:                           "Allow system reach other servers"
      egress.#:                              "1"
      egress.1403647648.cidr_blocks.#:       "1"
      egress.1403647648.cidr_blocks.0:       "0.0.0.0/0"
      egress.1403647648.description:         ""
      egress.1403647648.from_port:           "0"
      egress.1403647648.ipv6_cidr_blocks.#:  "0"
      egress.1403647648.prefix_list_ids.#:   "0"
      egress.1403647648.protocol:            "tcp"
      egress.1403647648.security_groups.#:   "0"
      egress.1403647648.self:                "false"
      egress.1403647648.to_port:             "65535"
      ingress.#:                             <computed>
      name:                                  "allow_external_communication"
      owner_id:                              <computed>
      revoke_rules_on_delete:                "false"
      tags.%:                                "1"
      tags.Name:                             "allow_external_comm"
      vpc_id:                                <computed>

  + aws_security_group.allow_mysql_internal
      id:                                    <computed>
      arn:                                   <computed>
      description:                           "Allow Mysql connexion from web server"
      egress.#:                              <computed>
      ingress.#:                             "1"
      ingress.423691546.cidr_blocks.#:       "1"
      ingress.423691546.cidr_blocks.0:       "172.31.60.0/27"
      ingress.423691546.description:         ""
      ingress.423691546.from_port:           "3306"
      ingress.423691546.ipv6_cidr_blocks.#:  "0"
      ingress.423691546.prefix_list_ids.#:   "0"
      ingress.423691546.protocol:            "tcp"
      ingress.423691546.security_groups.#:   "0"
      ingress.423691546.self:                "false"
      ingress.423691546.to_port:             "3306"
      name:                                  "allow_mysql_internal"
      owner_id:                              <computed>
      revoke_rules_on_delete:                "false"
      tags.%:                                "1"
      tags.Name:                             "allow_mysql_internal"
      vpc_id:                                <computed>

  + aws_security_group.allow_remote_admin
      id:                                    <computed>
      arn:                                   <computed>
      description:                           "Allow ssh and RDP inbound traffic"
      egress.#:                              <computed>
      ingress.#:                             "2"
      ingress.2223400681.cidr_blocks.#:      "1"
      ingress.2223400681.cidr_blocks.0:      "0.0.0.0/0"
      ingress.2223400681.description:        ""
      ingress.2223400681.from_port:          "3389"
      ingress.2223400681.ipv6_cidr_blocks.#: "0"
      ingress.2223400681.prefix_list_ids.#:  "0"
      ingress.2223400681.protocol:           "tcp"
      ingress.2223400681.security_groups.#:  "0"
      ingress.2223400681.self:               "false"
      ingress.2223400681.to_port:            "3389"
      ingress.2541437006.cidr_blocks.#:      "1"
      ingress.2541437006.cidr_blocks.0:      "0.0.0.0/0"
      ingress.2541437006.description:        ""
      ingress.2541437006.from_port:          "22"
      ingress.2541437006.ipv6_cidr_blocks.#: "0"
      ingress.2541437006.prefix_list_ids.#:  "0"
      ingress.2541437006.protocol:           "tcp"
      ingress.2541437006.security_groups.#:  "0"
      ingress.2541437006.self:               "false"
      ingress.2541437006.to_port:            "22"
      name:                                  "allow_remote_admin"
      owner_id:                              <computed>
      revoke_rules_on_delete:                "false"
      tags.%:                                "1"
      tags.Name:                             "allow_remote_admin"
      vpc_id:                                <computed>

  + aws_security_group.allow_web
      id:                                    <computed>
      arn:                                   <computed>
      description:                           "Allow web traffic to server"
      egress.#:                              <computed>
      ingress.#:                             "2"
      ingress.2214680975.cidr_blocks.#:      "1"
      ingress.2214680975.cidr_blocks.0:      "0.0.0.0/0"
      ingress.2214680975.description:        ""
      ingress.2214680975.from_port:          "80"
      ingress.2214680975.ipv6_cidr_blocks.#: "0"
      ingress.2214680975.prefix_list_ids.#:  "0"
      ingress.2214680975.protocol:           "tcp"
      ingress.2214680975.security_groups.#:  "0"
      ingress.2214680975.self:               "false"
      ingress.2214680975.to_port:            "80"
      ingress.2617001939.cidr_blocks.#:      "1"
      ingress.2617001939.cidr_blocks.0:      "0.0.0.0/0"
      ingress.2617001939.description:        ""
      ingress.2617001939.from_port:          "443"
      ingress.2617001939.ipv6_cidr_blocks.#: "0"
      ingress.2617001939.prefix_list_ids.#:  "0"
      ingress.2617001939.protocol:           "tcp"
      ingress.2617001939.security_groups.#:  "0"
      ingress.2617001939.self:               "false"
      ingress.2617001939.to_port:            "443"
      name:                                  "allow_web"
      owner_id:                              <computed>
      revoke_rules_on_delete:                "false"
      tags.%:                                "1"
      tags.Name:                             "allow_web"
      vpc_id:                                <computed>

  + aws_subnet.bd-private-2a
      id:                                    <computed>
      arn:                                   <computed>
      assign_ipv6_address_on_creation:       "false"
      availability_zone:                     "us-west-2a"
      cidr_block:                            "172.31.50.0/27"
      ipv6_cidr_block:                       <computed>
      ipv6_cidr_block_association_id:        <computed>
      map_public_ip_on_launch:               "false"
      tags.%:                                "1"
      tags.Name:                             "BD"
      vpc_id:                                "${aws_default_vpc.default.id}"

  + aws_subnet.web-public-2a
      id:                                    <computed>
      arn:                                   <computed>
      assign_ipv6_address_on_creation:       "false"
      availability_zone:                     "us-west-2a"
      cidr_block:                            "172.31.60.0/27"
      ipv6_cidr_block:                       <computed>
      ipv6_cidr_block_association_id:        <computed>
      map_public_ip_on_launch:               "false"
      tags.%:                                "1"
      tags.Name:                             "Web"
      vpc_id:                                "${aws_default_vpc.default.id}"
Plan: 9 to add, 0 to change, 0 to destroy.

------------------------------------------------------------------------

Note: You didn't specify an "-out" parameter to save this plan, so Terraform
can't guarantee that exactly these actions will be performed if
"terraform apply" is subsequently run.

