version: '2'

services:
  nginx-proxy:
    image: jwilder/nginx-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/srv/docker/nginx-t/nginx/vhost.d:/etc/nginx/vhost.d"
      - "/srv/docker/nginx-t/nginx/html:/usr/share/nginx/html"
      - "/srv/docker/nginx-t/nginx/certs:/etc/nginx/certs"
      - "/var/run/docker.sock:/tmp/docker.sock:ro"
    networks:
      - proxy-tier

  letsencrypt-nginx-proxy-companion:
    image: jrcs/letsencrypt-nginx-proxy-companion
    environment:
      -  ACME_CA_URI=https://acme-staging.api.letsencrypt.org/directory
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    volumes_from:
      - "nginx-proxy"
    networks:
      - proxy-tier

  portus:
    image: opensuse/portus:head
    environment:
      - PORTUS_MACHINE_FQDN_VALUE=${MACHINE_FQDN}

      # DB. The password for the database should definitely not be here. You are
      # probably better off with Docker Swarm secrets.
      - PORTUS_PRODUCTION_HOST=db
      - PORTUS_PRODUCTION_DATABASE=portus_production
      - PORTUS_PRODUCTION_PASSWORD=${DATABASE_PASSWORD}
      - PORTUS_DB_POOL=5

      # Secrets. It can possibly be handled better with Swarm's secrets.
      - PORTUS_SECRET_KEY_BASE=${SECRET_KEY_BASE}
      - PORTUS_KEY_PATH=/certificates/${MACHINE_FQDN}.key
      - PORTUS_PASSWORD=${PORTUS_PASSWORD}

      # SSL
      - PORTUS_PUMA_TLS_KEY=/certificates/${MACHINE_FQDN}.key
      - PORTUS_PUMA_TLS_CERT=/certificates/${MACHINE_FQDN}.crt

      # NGinx is serving the assets instead of Puma. If you want to change this,
      # uncomment this line.
      #- RAILS_SERVE_STATIC_FILES='true'
      - VIRTUAL_HOST=toto.x3rus.com
      - VIRTUAL_PORT=3000
      - LETSENCRYPT_HOST=toto.x3rus.com
      - LETSENCRYPT_EMAIL=crypt@x3rus.com
    ports:
      - 3000:3000
    links:
      - db
    volumes:
      - /srv/docker/nginx-t/nginx/certs:/certificates:ro
      - static:/srv/Portus/public
    networks:
      - proxy-tier

  crono:
    image: opensuse/portus:head
    environment:
      - PORTUS_MACHINE_FQDN_VALUE=${MACHINE_FQDN}

      # DB. The password for the database should definitely not be here. You are
      # probably better off with Docker Swarm secrets.
      - PORTUS_PRODUCTION_HOST=db
      - PORTUS_PRODUCTION_DATABASE=portus_production
      - PORTUS_PRODUCTION_PASSWORD=${DATABASE_PASSWORD}
      - PORTUS_DB_POOL=5

      # Secrets. It can possibly be handled better with Swarm's secrets.
      - PORTUS_SECRET_KEY_BASE=${SECRET_KEY_BASE}
      - PORTUS_KEY_PATH=/certificates/${MACHINE_FQDN}.key
      - PORTUS_PASSWORD=${PORTUS_PASSWORD}

      # We want to execute crono, not portus
      - PORTUS_INIT_COMMAND=bin/crono
    links:
      - db
    volumes:
      - /srv/docker/nginx-t/nginx/certs:/certificates:ro
    networks:
      - proxy-tier

  db:
    image: library/mariadb:10.0.23
    environment:
      - MYSQL_DATABASE=portus_production

      # Again, the password shouldn't be handled like this.
      - MYSQL_ROOT_PASSWORD=${DATABASE_PASSWORD}
    volumes:
      - /var/lib/portus/mariadb:/var/lib/mysql
    networks:
      - proxy-tier

  registry:
    image: library/registry:2.6
    command: ["/bin/sh", "/etc/docker/registry/init"]
    environment:
      # Authentication
      REGISTRY_AUTH_TOKEN_REALM: https://${MACHINE_FQDN}/v2/token
      REGISTRY_AUTH_TOKEN_SERVICE: ${MACHINE_FQDN}
      REGISTRY_AUTH_TOKEN_ISSUER: ${MACHINE_FQDN}
      REGISTRY_AUTH_TOKEN_ROOTCERTBUNDLE: /secrets/${MACHINE_FQDN}.crt

      # SSL
      REGISTRY_HTTP_TLS_CERTIFICATE: /secrets/${MACHINE_FQDN}.crt
      REGISTRY_HTTP_TLS_KEY: /secrets/${MACHINE_FQDN}.key

      # Portus endpoint
      REGISTRY_NOTIFICATIONS_ENDPOINTS: >
        - name: portus
          url: https://${MACHINE_FQDN}/v2/webhooks/events
          timeout: 2000ms
          threshold: 5
          backoff: 1s
    volumes:
      - /var/lib/portus/registry:/var/lib/registry
      - /srv/docker/nginx-t/nginx/certs:/secrets:ro
      - ./registry/config.yml:/etc/docker/registry/config.yml:ro
      - ./registry/init:/etc/docker/registry/init:ro
    ports:
      - 5000:5000
      - 5001:5001 # required to access debug service
    links:
      - portus:portus
    networks:
      - proxy-tier


networks:
  proxy-tier:
    external:
       name: br-proxy

volumes:
  static:
    driver: local
