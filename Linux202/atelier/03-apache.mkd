
<meta http-equiv='Content-Type' content='text/html; charset=utf-8' /> 
<style>
pre{background:#F8F8FF; border:black dashed 1px; padding:6px}
</style>

# Index 

# <a name="Desction" /> Description

Petit exercice pour apache , afin de mettre en pratique l'ensemble de ce que l'on a appris .
Afin de facilité l'exercice nous allons utiliser __Docker__ pour l'environnement initial , ainsi que **git**
pour avoir tout le monde les mêmes fichier / erreur :)

Le concepts de l'atelier sera la détection d'erreur et le mise en place de configuration 

# <a name="requis" /> Réalisons l'installation des pré requis

* Installer Docker 

         sudo apt-get update
         sudo apt-get install apt-transport-https ca-certificates

         sudo apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E

         sudo vim /etc/apt/sources.list.d/docker.list

* Ajouter l'entré suivante :
    * Pour  Ubuntu Precise 12.04 (LTS)

            deb https://apt.dockerproject.org/repo ubuntu-precise main

    * Pour  Ubuntu Trusty 14.04 (LTS)

            deb https://apt.dockerproject.org/repo ubuntu-trusty main

    * Pour Ubuntu Xenial 16.04 (LTS)

            deb https://apt.dockerproject.org/repo ubuntu-xenial main

* Réaliser l'installation de docker 

        sudo apt-get update 
        sudo apt-get install  docker-engine
        sudo service docker start

J'espère que ce sera correct :P

* Référence :
    * [docker install ubuntu ](https://docs.docker.com/engine/installation/linux/ubuntulinux/) 
    * [docker install centos ](https://docs.docker.com/engine/installation/linux/centos/)

* Récupération de l'image pour l'exercice 

TODO : compléter la commande docker pull

        $ sudo docker pull .....

Ou si vous désirez le builder vous même récupérer le Dockerfile ICI : TODO fournit le dockerfile

# <a name="start_init_and_validate" /> Démarrage initial du conteneur et validation que ceci fonctionne 

* Démarrer le conteneur 

        $ sudo docker  run -d --hostname atelier.x3rus.com --name atelier_apache linux202_atelier_apache

* NOTE : la prochaine fois que vous voudrez le démarrer utiliser uniquement l'instruction

        $ sudo docker start atelier_apache

* Récupérer l'adresse du conteneur , dans l'exemple ci-dessous 172.17.0.9

        $ sudo docker  inspect atelier_apache | grep IPAddress
                "IPAddress": "172.17.0.9",
                 "SecondaryIPAddresses": null,

* Accéder au conteneur de manière interactif 

        $ sudo docker exec -it atelier_apache bash
        root@atelier:/# ip addr show eth0
        21: eth0@if22: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default 
            link/ether 02:42:ac:11:00:09 brd ff:ff:ff:ff:ff:ff
             inet 172.17.0.9/16 scope global eth0


* Démarrez apache et valider la page web , dans mon cas : http://172.17.0.9

        root@atelier:/# /etc/init.d/apache2 start     
         * Starting web server apache2
         /usr/sbin/apache2ctl: 87: ulimit: error setting limit (Operation not permitted)
         * Setting ulimit failed. See README.Debian for more information.
         * 
        root@atelier:/# netstat -lntp
        Active Internet connections (only servers)
        Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name
        tcp6       0      0 :::80                   :::*                    LISTEN      39/apache2   

* Vous devriez avoir la page par défaut


# <a name="start" /> Démarrage du conteneur les prochaines fois

Si vous ne réalisez pas l'exercice en un coup, voici les étapes pour la prochaine fois . Ce sera moins long

        $ sudo docker start atelier_apache
        $ sudo docker exec -it atelier_apache bash
        root@atelier:/# /etc/init.d/apache2 start
        root@atelier:/# ip addr show eth0 # pour avoir l'IP du conteneur

# <a name="exercices" /> Début de l'exercice.

## <a name="refresh_conf"/> Rafraichir la configuration et les données

L'ensemble du répertoire **/etc** et **/var/www/html** est sous __git__ depuis les dépôts définie chez __github__

* **/etc** : https://github.com/x3rus/exo-apache-conf.git
* **/var/www/html** : https://github.com/x3rus/exo-apache-data.git

Nous allons donc rafraîchir les informations afin de réalisé les correctifs qui ont pu être apporté depuis la création du conteneur __docker__. Nous allons récupéré la branche **step0** au fur et à mesure de l'exercice nous récupérerons les autres branches.

        root@atelier:/# cd /etc
        root@atelier:/etc# git pull origin step0
        root@atelier:/etc# cd /var/www/
        root@atelier:/var/www/# git pull origin step0


Démarrer apache et valider que vous voyez toujours la page par défaut .

## <a name="create_vhost"/> Création d'un serveur Virtuel 

Pour débuté du bon pied nous allons mettre en place un serveur virtuel (__Virtual host__).

1. Désactiver le serveur virtuel par défaut 

2. Définir votre serveur virtuel et s'assurer qu'il sera chargé comme Serveur Virtuel par défaut

Voici les informations à définir pour le serveur virtuel :

* Répertoire racine du site : **/var/www/vhosts/toto/website**
* Définition des logs : **/var/www/vhosts/toto/logs**
* Nom primaire du site web : **toto.example.com**
* Nom secondaire du site web : **titi.example.com**
* Email de l'administrateur : **admin@example.com**
* Port d'écoute : **80**

Bien entendu utiliser le système Debian avec les liens symboliques pour l'activation des sites :D, merci.

Mettre le fichier __index.html__ suivant dans le répertoire racine : 

        <h2> Woot , toto.example.com </h2>
        <br>
        ca fonctionne et de 1 !!

Prendre note que la configuration en place définie dans **step0** comporte un problème pour la mise en place de cette configuration :D ... Faut la trouver :D.

### <a name="create_vhost_solution" /> Solution: Création d'un serveur Virtuel

Pour avoir la solution vous pouvez récupérer la branche __step0\_solution__ vous pourrez voir les changements des fichiers qui fut réalisé.

Pour l'ensemble des commandes réalisé consultez les fichiers :

* **/etc/CMD\_USE** : commande plus système , comprend les installations de pacquage si requis ,...
* **/var/www/CMD\_USE** : Commande requis pour la section site web

## <a name="limitation_dun_repertoire"/> Limitation du répertoire admin

Premièrement Bravo, pour les personnes qui ont réalisé l'étape 0 :D , on continue :) . 
À ce stade vous avez 2 choix ou vous continuer avec votre configuration actuelle qui probablement fonctionne ou vous récupérez la branche **step1**. Libre à vous selon votre confort et surtout la différence de solution mise en place lors de l'étape 0 :D.

Voici l'instruction pour passé en mode __step1__:

        $ cd /etc
        $ git reset --hard origin/step1
        $ git pull origin step1
        $ cd /var/www
        $ git reset --hard origin/step1
        $ git pull origin step1

Bon on peut maintenant passer à l'exercice :D , pour cette section nous allons limité l'accès au répertoire **admins** et **users** contenu dans le site web toto. 

* Créez un répertoire **admins** dans le répertoire racine du site toto
* Créez 4 utilisateurs avec des mots de passe nom des utilisateurs : __robert__, __nesta__ , __bob__, __bonny__
* Créez 2 groupes :
    * __admins__ , voici les membres __robert__ et __nesta__

* Faire en sorte que les membres du groupe __admins__ puissent consulter le répertoire __admins__
* Faire en sorte que toutes personne authentifié puisse consulter le contenu du répertoire __users__
* Le système apache dois lister le contenu du répertoire , pas besoin de fichier __index__
* **La configuration doit être réaliser dans le virtualhost , fichier sous /etc**

Vous pouvez utilisez la commande suivante pour créer de faux fichier :

        $ cd LE_REPERTOIRE_DU_SITE/admins
        $ touch secret ultra_secret mega_secret FaireSaMarque

        $ cd LE_REPERTOIRE_DU_SITE/valeurs
        $ touch nos_valeurs tes_valeurs SuperFormation

* Idéalement s'assurer que le fichier de groupe ET de mot de passe soit inaccessible depuis internet.

### <a name="limitation_dun_repertoire_solution" /> Solution: Limitation du répertoire admin

Pour avoir la solution vous pouvez récupérer la branche __step1\_solution__ vous pourrez voir les changements des fichiers qui fut réalisé.

Pour l'ensemble des commandes réalisé consultez les fichiers :

* **/etc/CMD\_USE** : commande plus système , comprend les installations de pacquage si requis ,...
* **/var/www/CMD\_USE** : Commande requis pour la section site web , comprend l'installation de pacquage requis pour le site

## <a name="redirect_imgs_static_vhost"/> Redirection du contenu images vers un autre site

**Mise en context**:

Nous avons le site web __toto.example.com__ qui est un gros site afin  de réduire la charge sur le serveur apache qui gère aussi les page dynamique il fut opté de transférer l'ensemble du contenu sous le site __medias.example.com__. Nous profiterons de l'opération pour passé du format de fichier __jpeg__ à __png__ afin d'avoir l'option de transparence des images non disponible sous le format __jpg__.

1. Récupérer la nouvelle configuration depuis git . Il est important de réaliser l'opération au moins pour le répertoire **/var/www** car je vous ai mis un site web pré-formater pour l'exercice avec des images **libre** et une structure existante.

        $ cd /etc
        $ git reset --hard origin/step2
        $ git pull origin step2
        $ cd /var/www
        $ git reset --hard origin/step2
        $ git pull origin step2

2. À ce stade si tous fonctionne bien vous devriez être en mesure de rejoindre les liens suivant ( je suis pas web designer ;) ), changez l'IP pour celle de votre conteneur.

    * http://172.17.0.1/ : Avec image de post-it style mario bros
    * http://172.17.0.1/services/index.html : Les service avec une images __do not panic__, et une représentation d'en tête de paquet IP pour le système de VLAN.
    * http://172.17.0.1/contact/index.html : Page avec une carte "d'Internet".

    * Vous avez aussi les répertoires __/var/www/vhosts/medias/__ pour la création du serveur virtuel qui suit (je suis gentil).
3. Créez un nouveau serveur virtuel , qui écoutera sur le port 8080 (pour un peu de challenge :D ).
    * Répertoire racine du site : **/var/www/vhosts/medias/website**
    * Définition des logs : **/var/www/vhosts/medias/logs**
    * Nom primaire du site web : **medias.example.com**
    * Email de l'administrateur : **admin@example.com**
    * Port d'écoute : **8080**
    * Ne pas permettre de lister le contenu du répertoire quand il n'y a pas d'index

4. 



* Redirection d'URL afin de déplacer le contenu des images , changement d'URL (statique.toto.com) + changement de répertoire
  mettre des images dans git pour ca de moins a faire.
* Mise en place d'un alias ... peut-etre meme avec redirection
* Bloquer les vieux IE non green .. machins
* Setup du site en SSL
* passez en mode workers


* Créer des erreur avec un .htaccess !!

## <a name=""/> 
## <a name=""/> 
## <a name=""/> 
## <a name=""/> 

## <a name="installation_dapache" /> Réaliser l'installation d'apache sur un de vos système

Bon maintenant que vous maitrisez apache vous pouvez l'installer en dehors de **docker** , car j'avais fait l'exercice initiale pour vous dans __docker__. Trouvez une machine ou démarrer un conteneur peu importe le distribution et réalisé l'installation d'apache .

