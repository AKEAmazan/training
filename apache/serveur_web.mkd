<meta http-equiv='Content-Type' content='text/html; charset=utf-8' /> 
<style>
pre{background:#F8F8FF; border:black dashed 1px; padding:6px}
</style>

TODO : Corriger les \_

# Index 

* [ Introduction](#Intro) 
* [ Installation ](#Installation) 
       * [ Démarrage et test après installation](#start_test) 
* [ Configuration de Base](#basic_conf) 
       * [ Fichier Principale ](#main_file) 
       * [ Fichiers Incluent](#include_files) 
* [ Virtual Host par défaut](#virt_host) 
* [ Paramétrisation du serveur](#param_server) 
       * [ Paramétrisation de la configuration Directory](#param_directory) 
           * [ Changement du répertoire Racine ( DocumentRoot)](#param_docroot) 
           * [ Autorisation d'accès par hostname ou ip ( Require )](#Auth_access) 
           * [Utilisation du Virtual host par défaut (bonne pratique)](#virt_host_good) 
       * [ Autorisation d'accès avec authentification local](#auth_local_access) 
           * [ Création du fichier de mot de passe ( __htpasswd__ )](#htpasswd) 
* [ Référence :](#Reference) 

# <a name="Intro" /> Introduction


Apache est apparu en avril 1995. Au début, il s'agissait d'une collection de correctifs et d'additions au serveur NCSA HTTPd 1.3, qui était dans le domaine public et le serveur HTTP alors le plus répandu. De cette origine, de nombreuses personnes affirment que le nom Apache vient de a patchy server, soit « un serveur rafistolé ». Par la suite, Apache a été complètement réécrit, de sorte que, dans la version 2, il ne reste pas de trace de NCSA HTTPd.

Au début, Apache était la seule alternative sérieuse et libre au serveur HTTP de Netscape (iPlanet, maintenant Sun ONE). Depuis avril 1996, selon l'étude permanente de Netcraft2, Apache est devenu le serveur HTTP le plus répandu sur Internet.

Part de marché d'Apache :

* En mai 1999, il faisait tourner 57 % des serveurs Web, début 2004, il était à environ 69 % de parts de marché, et il ne détient plus que 50,61 % du marché à la fin du mois de janvier 2008 ;
* En février 2008, Apache représente 50,93 % des parts de marché ;
* En novembre 2008, 72,45 % de parts de marché pour Apache ;
* En novembre 2011, 65,00 % de parts de marché pour Apache ;
* En mai 2014, 38,00 % de parts de marché pour Apache et 33,00 % pour Microsoft IIS.
* En janvier 2015 sur l'analyse de 876,812,666 sites, correspondant à 5,061,365 ordinateurs frontaux, les parts de marché sont de 39.74 % pour Apache, et 27,52 % pour IIS. Sur les part de marché des serveurs actifs (en excluant les sites parkings) par contre, 50.72 % pour Apache, 14.82 % pour Nginx et IIS passe en 3e position avec seulement 10.55 %, perdant 1.17 % de parts par rapport au mois précédent.

La popularité de GNU/Linux doit beaucoup au serveur web apache et la monté en puissance de l'Internet. Il est indéniable que les organisation furent à la recherche d'une solution "gratuite" et performance afin de fournir les service Internet. 
Parfois il faut pas grand chose pour que la popularité d'une application ou d'un système voit le jours ...

Nous allons voir la structure du logiciel, Apache fonction avec un système de module permettant d'ajouter des fonctionnalités. La configuration d'Apache ce structure selon une hiérarchie de paramètre définie sous des __context__ , nous permettant de définir des valeurs de manière granulaire.

Bon fini l'intro on va jouer un peu :D.

# <a name="Installation" /> Installation 

S'il y a bien une application testé et valider dans une distribution c'est bien le logiciel Apache ! À ma connaissance toutes les distributions offre le logiciel. Bien entendu l'installation peut être différente , voici comment procéder pour __Ubuntu__ et __Redhat__.

        # Pour Ubuntu 
        $ sudo apt-get install  apache2

        # Pour RedHat
        $ sudo yum install httpd


Si nous regardons la structure des fichiers nous constaterons qu'il diffère voyons pour Ubuntu :

        $  ls -l  /etc/apache2/
        total 80
        -rw-r--r-- 1 root root  7115 Jan  7  2014 apache2.conf
        drwxr-xr-x 2 root root  4096 Nov 25 08:20 conf-available
        drwxr-xr-x 2 root root  4096 Nov 25 08:20 conf-enabled
        -rw-r--r-- 1 root root  1782 Jan  3  2014 envvars
        -rw-r--r-- 1 root root 31063 Jan  3  2014 magic
        drwxr-xr-x 2 root root 12288 Nov 25 08:20 mods-available
        1drwxr-xr-x 2 root root  4096 Nov 25 08:20 mods-enabled
        -rw-r--r-- 1 root root   320 Jan  7  2014 ports.conf
        drwxr-xr-x 2 root root  4096 Nov 25 08:20 sites-available
        drwxr-xr-x 2 root root  4096 Nov 25 08:20 sites-enabled

Et maintenant pour Redhat :

        $ ls -l /etc/httpd/
        total 8
        drwxr-xr-x 2 root root 4096 Nov 20 09:29 conf
        drwxr-xr-x 2 root root 4096 Nov 20 09:29 conf.d
        lrwxrwxrwx 1 root root   19 Nov 20 09:29 logs -> ../../var/log/httpd
        lrwxrwxrwx 1 root root   27 Nov 20 09:29 modules -> ../../usr/lib/httpd/modules
        lrwxrwxrwx 1 root root   19 Nov 20 09:29 run -> ../../var/run/httpd

## <a name="start_test" /> Démarrage et test après installation

Démarrage du service Apache :

        # Pour Ubuntu
        $ sudo service apache2 start
        * Starting web server apache2
          
        # Pour RedHat
        $ sudo service httpd start


Vous pouvez dès a présent valider l'installation en allant a l'URL http://IP-du-serveur ou http://127.0.0.1 si l'installation est réalisé directement sur votre poste. Voici le résultat pour Ubuntu :

![default_page_ubuntu.png](./imgs/default_page_ubuntu.png)

Nous allons maintenant mettre une petite page web pour démontré que nous somme bien en mesure de modifier le contenu. Vous pouvez utiliser votre éditeur préféré pour créer le fichier **/var/www/html/demo.html**

        $ cat /var/www/html/demo.html
        Bonjour Ceci fonctionne bien

Pour valider que tout fonctionne bien vous pouvez aller à l'URL __http://IP-du-serveur/demo.html__ ou __http://127.0.0.1/demo.html__. Déjà à ce stade il est possible d'avoir son site web de disponible en installant l'ensemble de vos fichiers dans ce répertoire.

Nous allons maintenant allé un peu plus loin avec l'analyse de la configuration et mieux comprendre comment tous ceci fonctionne.

# <a name="basic_conf" /> Configuration de Base

L'ensemble de la rédaction du fichier de configuration est équivalant pour les 2 systèmes, l'important est de savoir qu'elle est le premier fichier qui est lu lors du démarrage de d'Apache. Nous verrons à la lecture du fichier de configuration que le premier fichier fait des appel __Include__ pour charger ("loader") les autres fichiers de configuration.

## <a name="main_file" /> Fichier Principale 

Le fichier principale est :

* Redhat : **/etc/httpd/conf/httpd.conf**
* Ubuntu : **/etc/apache2/apache2.conf**

**NOTE / Info** Afin de ne pas surcharger la formation en dupliquant les démonstrations de Ubuntu et Redhat nous nous concentrerons uniquement sur Ubuntu. Cependant l'ensemble est équivalent entre les 2 systèmes, car c'est le même logiciel, éventuellement si vous n'arrivez pas a faire la transposition, contacter moi je vous mettrai sur la piste .

La configuration de Redhat est plus linéaire que celle d'Ubuntu, mais bon nous ne pouvons pas changer de système de référence à chaque fois juste parce que l'un est plus simple que l'autre ;-). Nous avons choisi Ubuntu, nous continuons :D.

Visualisation du fichier Principale , Pour ne pas surcharger la documentation je ne vais pas mettre le fichier au complet ici cependant il est disponible en cliquant sur le lien : /etc/apache2/apache2.conf

À la lecture du fichier nous constatons qu'il y a beaucoup de commentaire définie, comme beaucoup de fichier de configuration sous GNU/Linux le caractère # (dièse) est utilisé. Si nous supprimons l'ensemble des commentaires ainsi que les lignes vide ceci donne :

        $ cat /etc/apache2/apache2.conf | grep -v "^#" | grep -v "^$"
        Mutex file:${APACHE_LOCK_DIR} default
        PidFile ${APACHE_PID_FILE}
        Timeout 300
        KeepAlive On
        MaxKeepAliveRequests 100
        KeepAliveTimeout 5
        User ${APACHE_RUN_USER}
        Group ${APACHE_RUN_GROUP}
        HostnameLookups Off
        ErrorLog ${APACHE_LOG_DIR}/error.log
        LogLevel warn
        IncludeOptional mods-enabled/*.load
        IncludeOptional mods-enabled/*.conf
        Include ports.conf
        <Directory />
                Options FollowSymLinks
                AllowOverride None
                Require all denied
        </Directory>
        <Directory /usr/share>
                AllowOverride None
                Require all granted
        </Directory>
        <Directory /var/www/>
                Options Indexes FollowSymLinks
                AllowOverride None
                Require all granted
        </Directory>
        AccessFileName .htaccess
        <FilesMatch "^\.ht">
                Require all denied
        </FilesMatch>
        LogFormat "%v:%p %h %l %u %t \"%r\" %>s %O \"%{Referer}i\" \"%{User-Agent}i\"" vhost_combined
        LogFormat "%h %l %u %t \"%r\" %>s %O \"%{Referer}i\" \"%{User-Agent}i\"" combined
        LogFormat "%h %l %u %t \"%r\" %>s %O" common
        LogFormat "%{Referer}i -> %U" referer
        LogFormat "%{User-agent}i" agent
        IncludeOptional conf-enabled/*.conf
        IncludeOptional sites-enabled/*.conf

39 Lignes à décortiquer, vu l'ampleur du travail que fait Apache ce n'est pas grand chose :D, soyons positif. Nous allons aussi voir que pris ligne par ligne la configuration est bien simple ... Surtout quand ça fait 15 ans qu'on la consulte :P.

Nous allons aussi nous appuyer sur une documentation solide disponible sur le site d'Apache : 

* Ubuntu 14.04 (apache version 2.4 ) : https://httpd.apache.org/docs/2.4/ 
* Redhat 6 (apache version 2.2)  : https://httpd.apache.org/docs/2.2/.

Nous voyons dans le fichier des variables désigné sous la forme __${Nom\_variable}__ l'ensemble des valeurs sont disponible dans le fichier **/etc/apache2/envvars** dont voici le contenu

        export APACHE_RUN_USER=www-data
        export APACHE_RUN_GROUP=www-data
        export APACHE_PID_FILE=/var/run/apache2/apache2$SUFFIX.pid
        export APACHE_RUN_DIR=/var/run/apache2$SUFFIX
        export APACHE_LOCK_DIR=/var/lock/apache2$SUFFIX
        export APACHE_LOG_DIR=/var/log/apache2$SUFFIX


L'ensemble des valeurs ne seront pas couverte pas que ce n'est pas intéressent, nous pourrons prendre le temps dans le future pour creusé plus en détail. L'objectif pour le moment est d'être en mesure de comprendre et configurer simplement Apache. L'optimisation et l'amélioration de configuration pourra être vu éventuellement dans le future, nous en reparlerons.

* Configuration global
    * [Timeout](https://httpd.apache.org/docs/2.4/fr/mod/core.html#timeout) 300 : Temps en seconde pendant lequel le serveur va attendre  pour l'envoie ou la réception d'instruction au client
    * [KeepAlive](https://httpd.apache.org/docs/2.4/fr/mod/core.html#keepalive) On : Active la possibilité d'utiliser les connexions persistante telle que définie dans le protocole HTTP 1.1
    * User __${APACHE\_RUN\_USER}__ : Définie sous quelle utilisateur le service apache va être exécuté, ceci permet d'éviter que le service soit exécuté comme administrateur du système. L'avantage est que si le service apache est compromis, l'attaquant n'obtient que les droits alloué à l'utilisateur __APACHE\_RUN\_USER__ . Sous Ubuntu l'utilisateur est **www-data**
    * Group __${APACHE\_RUN\_GROUP}__ : Tout comme pour l'utilisateur ici nous définissons le groupe qui exécute l'application sous Ubuntu la valeur est : **www-data**
    * [HostnameLookups](https://httpd.apache.org/docs/2.4/fr/mod/core.html#hostnamelookups) Off  : Lorsque la connexion est établie par un client il est possible de faire le reverse DNS sur l'adresse IP afin d'avoir le nom du client au lieu de l'ip. Généralement cette configuration est à OFF afin de ne pas surcharger le serveur de requête DNS inutile car ceci ralentie le temps de réponse du serveur apache.
    * [ErrorLog](https://httpd.apache.org/docs/2.4/fr/mod/core.html#errorlog) ${APACHE\_LOG\_DIR}/error.log : **Important** définition du fichier de log contenant les erreurs :). Il est fort probable que nous serons amené à le consulter :).
    * [LogLevel](https://httpd.apache.org/docs/2.4/fr/mod/core.html#loglevel) warn : Ceci permet de définir le niveau de sévérité des alertes bien , il est très rare que je change cette valeurs .

* Inclusion
    * [IncludeOptional](https://httpd.apache.org/docs/2.4/fr/mod/core.html#includeoptional) mods-enabled/*.load : Avec l'instruction __IncludeOptional__ il est possible de charger d'autre fichier de configuration afin de segmenté les fichiers pour qu'il soit plus facile a lire ou pour permet l'édition de fichier a certaine personne sans offrir le fichier principal. Dans le cas présent le système charge les modules disponible installé sur le système. (Nous reviendrons plus tard sur les modules)
    * [IncludeOptional](https://httpd.apache.org/docs/2.4/fr/mod/core.html#includeoptional) mods-enabled/*.conf : Même chose que l'instruction précédente mais au lieu de chargé les fichiers des modules, nous chargeons  les configurations des modules. (Nous reviendrons plus tard sur les modules)
    * Include ports.conf : Inclusion du fichier de définition contenant le port d'écoute, nous retrouverons dans ce fichier l'instruction [Listen](https://httpd.apache.org/docs/2.4/fr/mod/mpm_common.html#listen) cette instruction indique sur quelle port écouter pour recevoir les requêtes clients.
    * [IncludeOptional](https://httpd.apache.org/docs/2.4/fr/mod/core.html#includeoptional) conf-enabled/*.conf : Permet de faire l'inclusion des configurations qui doivent être active.
    * [IncludeOptional](https://httpd.apache.org/docs/2.4/fr/mod/core.html#includeoptional) sites-enabled/*.conf : Permet de charger la configuration des sites qui doivent être disponible sur le serveur.

* [Directory](https://httpd.apache.org/docs/2.4/fr/mod/core.html#directory)
L'instruction Directory permet de définir des permissions et configuration qui sont propre au répertoire sur le système de fichier du serveur. Nous verrons qu'il est aussi possible avec l'instruction Location de définir des permissions selon l'URL du site web. La configuration définie pour le répertoire parent sont par défaut hérité au répertoire enfant. Dans la configuration définie ci-dessous l'ensemble des répertoires sous **/var/www** ont les permissions définie par  **Directory /var/www** , pour le répertoire **/home/bob** ou **/tmp/** ils auront les permissions définie par l'instruction **Directory /**.
Nous reviendrons bientôt sur les configurations et permission pour le moment constatons la configuration par défaut.

        <Directory />
                Options FollowSymLinks
                AllowOverride None
                Require all denied
        </Directory>
        <Directory /usr/share>
                AllowOverride None
                Require all granted
        </Directory>
        <Directory /var/www/>
                Options Indexes FollowSymLinks
                AllowOverride None
                Require all granted
        </Directory>

* [LogFormat](https://httpd.apache.org/docs/2.4/fr/mod/mod_log_config.html#logformat)
Définition du format des Log lors de l'accès des clients, ceci permet de collecter plus d'information telle que l'utilisateur (%u) la requête (%r) selon un ordre définie. Ceci est principalement utilisé quand votre système de gestion de statique désire avoir un format particulier. 99% du temps j'utilise __vhost\_combined__ qui répond à mon besoin et à mon logiciel de statistique. Note : avec la version 2.4 il est aussi possible de modifier le [format du message d'erreur](https://httpd.apache.org/docs/2.4/fr/mod/core.html#errorlogformat).

        LogFormat "%v:%p %h %l %u %t \"%r\" %>s %O \"%{Referer}i\" \"%{User-Agent}i\"" vhost_combined
        LogFormat "%h %l %u %t \"%r\" %>s %O \"%{Referer}i\" \"%{User-Agent}i\"" combined
        LogFormat "%h %l %u %t \"%r\" %>s %O" common
        LogFormat "%{Referer}i -> %U" referer
        LogFormat "%{User-agent}i" agent


## <a name="include_files" /> Fichiers Incluent

Debian / Ubuntu structure d'une manière particulière les fichiers d'Apache, on aime ou on n'aime pas je suis pas ici pour me prononcer, mais pour expliquer le concept.

Si nous listons les répertoires présent dans le répertoires nous verrons ceci :


        $ ls -1  /etc/apache2/
        conf-available
        conf-enabled
        mods-available
        mods-enabled
        sites-available
        sites-enabled

Nous pouvons constater 3 groupes :

* conf
    * conf-avaible
    * conf-enabled
* mods
    * mods-avaible
    * mods-enables
* sites
    *  sites-avaible
    *  sites-enabled

Le concept est le suivent l'ensemble des configurations sont disponible dans le répertoire conf-available et pour les activés un lien symbolique est créé dans la répertoire conf-enabled pointant vers le fichier original dans le répertoire conf-available. Cette philosophie s'applique pour les trois groupes **conf**,**mods** et **sites**. 

L'exemple le plus claire est le chargements des modules apaches, regardons la liste des fichiers dans le répertoire des modules disponibles.

        $ ls -l /etc/apache2/mods-available/
        total 516
        -rw-r--r-- 1 root root  100 Jan  7  2014 access_compat.load
        -rw-r--r-- 1 root root  377 Jan  3  2014 actions.conf
        -rw-r--r-- 1 root root   66 Jan  3  2014 actions.load
        -rw-r--r-- 1 root root  843 Jan  3  2014 alias.conf
        -rw-r--r-- 1 root root   62 Jan  3  2014 alias.load
        -rw-r--r-- 1 root root   76 Jan  3  2014 allowmethods.load
        -rw-r--r-- 1 root root   76 Jan  3  2014 asis.load
        [ .... ]
        [ .... ]
        
        # Soit 129 fichier
        $ ls -l /etc/apache2/mods-available/ | wc -l
        129
        
        # A présent les modules activés
        $ ls -l /etc/apache2/mods-enabled/  | head
        total 0
        lrwxrwxrwx 1 root root 36 Nov 25 08:20 access_compat.load -> ../mods-available/access_compat.load
        lrwxrwxrwx 1 root root 28 Nov 25 08:20 alias.conf -> ../mods-available/alias.conf
        lrwxrwxrwx 1 root root 28 Nov 25 08:20 alias.load -> ../mods-available/alias.load
        lrwxrwxrwx 1 root root 33 Nov 25 08:20 auth_basic.load -> ../mods-available/auth_basic.load
        lrwxrwxrwx 1 root root 33 Nov 25 08:20 authn_core.load -> ../mods-available/authn_core.load
        lrwxrwxrwx 1 root root 33 Nov 25 08:20 authn_file.load -> ../mods-available/authn_file.load
        lrwxrwxrwx 1 root root 33 Nov 25 08:20 authz_core.load -> ../mods-available/authz_core.load
        lrwxrwxrwx 1 root root 33 Nov 25 08:20 authz_host.load -> ../mods-available/authz_host.load
        lrwxrwxrwx 1 root root 33 Nov 25 08:20 authz_user.load -> ../mods-available/authz_user.load
        [ .... ]
        [ .... ]
    
        # Il y a donc 28 fichiers de chargé par la configuration apache
        $ ls -l /etc/apache2/mods-enabled/ | wc -l
        28


Conclusion sur 129 fichiers uniquement 28 sont réellement chargé par Apache. Nous ne retrouvons pas ce concept sous Redhat.
Nous mettrons de coté tous ces fichiers de configuration qui sont chargés pour visualiser la configuration du site web par défaut, dans un deuxième temps lors de la configuration de nos site web  nous reviendrons sur l'ajout de fonctionnalité et de modules. Bien entendu libre à vous de jeter un œil aux fichiers et de rechercher la document sur Internet.


# <a name="virt_host" /> Virtual Host par défaut

L'ensemble des sites sont donc chargés en lisant les fichiers contenu dans **/etc/apache2/sites-enabled/**. 
Le système met un fichier par défaut avec le nom **000-default.conf**. Voici le contenu (sans les commentaires):

        <VirtualHost *:80>
    
            ServerAdmin webmaster@localhost
            DocumentRoot /var/www/html
            
            ErrorLog ${APACHE_LOG_DIR}/error.log
            CustomLog ${APACHE_LOG_DIR}/access.log combined
        </VirtualHost>

Nous avons l'instruction :

* [ VirtualHost *:80 ](https://httpd.apache.org/docs/2.4/mod/core.html#virtualhost): Cette instruction indique qu'il peut y avoir plusieurs site web sur le port 80 des Hôtes virtuel ... Heu merci pour la traduction ;-), nous y reviendrons quand nous couvrirons la possibilité d'avoir plusieurs site web . Pour les personnes trop pressé voici le lien avec la section [VirtualHot](#VirtualHost)
* [ServerAdmin](https://httpd.apache.org/docs/2.4/mod/core.html#serveradmin) : URL de l'administrateur qui peut être afficher lors de messages d'erreur 
* [DocumentRoot](https://httpd.apache.org/docs/2.4/mod/core.html#documentroot): Répertoire racine du site web.
* [ErrorLog](https://httpd.apache.org/docs/2.4/mod/core.html#errorlog) : Chemin d'accès ou le fichier d'erreur PROPRE à ce site web sera écrit. On voudra avoir un fichier d'erreur par site web ceci facilite grandement l'identification des problèmes plutôt qu'avoir un gros fichier pour tout le monde. De plus nous serons en mesure de fournir le fichier au développeur pour qu'il analyse les problèmes. 
* [CustomLog](https://httpd.apache.org/docs/2.4/mod/mod_log_config.html#customlog): Fichier contenant les informations d'accès des clients tout comme pour le fichier d'erreur, un fichier d'accès par site. Nous retrouvons l'argument **combined** qui est un des format de log précédemment définie avec l'instruction **Logformat**

Et voilà :) , c'est ceci qui nous a permit de mettre notre fichier **demo.html** et de visualiser le contenu.


# <a name="param_server" /> Paramétrisation du serveur

Maintenant que nous avons vu l'idée générale de la configuration c'est le temps de commencé à y mettre un peu d'ordre ou de désordre :).

## <a name="param_directory" /> Paramétrisation de la configuration Directory

### <a name="param_docroot" /> Changement du répertoire Racine ( DocumentRoot)

Pour le plaisir nous allons fonctionné par un exemple claire, car bien souvent une démonstration aide à la compréhension. Changeons de place le site web de __/var/www/html/__ vers  __/data/www/__, peut importe la raison (espace disque dur, réorganisation du système , ...).

        # Création du répertoire et copie des fichiers
        $ sudo mkdir -p /data/www
        $ sudo cp /var/www/html/*.html  /data/www/

Les fichiers sont donc maintenant dans le nouveau répertoire il reste à modifier la configuration du serveur Web. Nous allons donc modifier la configuration du [DocumentRoot](https://httpd.apache.org/docs/2.4/mod/core.html#documentroot). 
Éditons le fichier **/etc/apache2/sites-available/000-default.conf**

        # Changement de 
        DocumentRoot /var/www/html
    
        # Pour la nouvelle valeur
        DocumentRoot /data/www

Validons la configuration syntaxique du serveur, c'est toujours une bonne pratique de réaliser cette opération après vos modifications ceci permet de corriger des problèmes avant même de recharger la configuration.

        $  sudo apache2ctl configtest
        Syntax OK

Rechargez la configuration :

        $ sudo service apache2 reload
        * Reloading web server apache2

Voici le résultat quand nous accédons à la page principale :  http://127.0.0.1 ou http://127.0.0.1/demo.html

![rep_demo-page_403.png](./imgs/rep_demo-page_403.png)

Nous avons donc une erreur **403** qui est un refus d'accès au serveur. Ceci correspond à un refus d'accès vous pouvez avoir la liste des codes des états sur Wikipédia :  [Code 4xx Erreur Client](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes#4xx_Client_Error) 

Le mieux pour comprendre l'erreur reste toujours les logs visualisons donc ce que nous avons dans les fichiers. Pour nous rafraîchir la mémoire nous allons valider la définition des fichiers de logs:

        $ grep "log" /etc/apache2/sites-enabled/000-default.conf | grep -v "#"
        ErrorLog ${APACHE_LOG_DIR}/error.log
        CustomLog ${APACHE_LOG_DIR}/access.log combined
    
        # Et pour la valeur de ${APACHE_LOG_DIR}
        $ grep "APACHE_LOG_DIR" /etc/apache2/envvars 
        export APACHE_LOG_DIR=/var/log/apache2

* Fichier d'accès **/var/log/apache2/access.log**:

        $ sudo tail -f /var/log/apache2/access.log
        172.17.42.1 - - [27/Nov/2015:08:20:52 -0500] "GET / HTTP/1.1" 403 494 "-" "Mozilla/5.0 (X11; Linux i686; rv:42.0) Gecko/20100101 Firefox/42.0"
        172.17.42.1 - - [27/Nov/2015:08:21:27 -0500] "GET /demo.html HTTP/1.1" 403 503 "-" "Mozilla/5.0 (X11; Linux i686; rv:42.0) Gecko/20100101 Firefox/42.0"

* Fichier d'erreur **/var/log/apache2/error.log**

        $ sudo tail -f /var/log/apache2/error.log
        [Fri Nov 27 08:20:52.199792 2015] [authz_core:error] [pid 133:tid 3046103872] [client 172.17.42.1:58878] AH01630: client denied by server configuration: /data/www/
        [Fri Nov 27 08:21:27.097668 2015] [authz_core:error] [pid 132:tid 3029318464] [client 172.17.42.1:58882] AH01630: client denied by server configuration: /data/www/demo.html


Le message du serveur est explicite la configuration du serveur refuse d'offrir l'accès au fichier **/data/www/**. COOL !! Le problème est claire et identifier , il ne reste que LA solution :).

L'autorisation des accès à l'arborescence du système est définie par les configurations [Directory](https://httpd.apache.org/docs/2.4/fr/mod/core.html#directory) ,nous avons cette définition dans le fichier **/etc/apache2/apache2.conf** 

        <Directory />
                Options FollowSymLinks
                AllowOverride None
                Require all denied
        </Directory>
        <Directory /usr/share>
                AllowOverride None
                Require all granted
        </Directory>
        <Directory /var/www/>
                Options Indexes FollowSymLinks
                AllowOverride None
                Require all granted
        </Directory>

Les valeurs de configuration hérité selon l'arborescence ce qui veut dire que **TOUS** les répertoires du file système à l'exception de **/usr/share** et **/var/www** (incluant leur sous répertoire) ont la configuration suivante :

         <Directory />
                Options FollowSymLinks
                AllowOverride None
                Require all denied
        </Directory>

Nous sommes donc actuellement bloqué par l'instruction : [Require](https://httpd.apache.org/docs/2.4/mod/mod_authz_core.html#require). Sous Ubuntu l'ensemble des accès au système de fichier est refusé depuis la racine (root / ) en dehors des deux répertoires nommés plus tôt.

Vous me demanderez probablement mais pourquoi /usr/share pour permettre l'accès à la documentation, des icônes ou fichier d'erreur page personnalisé pour les erreurs 404 (not found) depuis l'interface web des icônes.

Nous allons confirmer mes propos , en ajoutant les lignes suivante sous l'instruction __<Directory />__ , dans le fichier **/etc/apache2/apache2.conf** voici le résultat:

        <Directory />
            Options FollowSymLinks
            AllowOverride None
            Require all denied
        </Directory>

        <Directory /data/www >
            Options FollowSymLinks
            AllowOverride None
            Require all granted
        </Directory>

        <Directory /usr/share>
        [ .... ]


Validons la configuration avant de recharger la configuration :

        $ sudo apachectl configtest
        Syntax OK

        $ sudo service apache2 reload 
        * Reloading web server apache2
        *

Allons à l'URL : [http://127.0.0.1/demo.html](http://127.0.0.1/demo.html) 

Cette notion d'héritage des permissions est très important afin de comprendre l'impacte de permission trop permissive au niveau supérieur de la hiérarchie du système de fichier. 

### <a name="Auth_access" /> Autorisation d'accès par hostname ou ip ( Require )

Profitons de l'occasion pour limiter l'accès à un répertoire pour uniquement un segment réseau , car pour la démonstration ci-dessus nous avons simplement ouvert à TOUS l'accès si nous avions un répertoire __admin__ ou __private__ disponible pour le réseau interne mais qui ne devrais pas être disponible sur l'Internet publique.
L'instruction [require](https://httpd.apache.org/docs/2.4/mod/mod_authz_core.html#require) nous permet de faire cette limitation . Nous verrons aussi qu'il est possible de mettre un système d'authentification avec nom d'utilisateur et mot de passe.

Nous allons permettre l'accès uniquement au réseau 192.168.100.0/24 (donc toutes les adresses ip qui commence par 192.168.100) et l'ip 192.168.42.42 (juste pour voir la possibilité de mettre plusieurs valeur :) ). Voici le résultat :

        <Directory /data/www >
            Options FollowSymLinks
            AllowOverride None
            Require all granted
       </Directory>

       <Directory /data/www/admin >
            Options FollowSymLinks
            AllowOverride None
            Require  ip 192.168.100 192.168.42.42
       </Directory>

Validation de la configuration (oui ! Je suis chiant un peu avec ça mais honnêtement ça l'aide BEAUCOUP ) :

        $ sudo apachectl configtest
        Syntax OK

Validation du résultat :

![rep_admin_404.png](./imgs/rep_admin_404.png)
 
Dans mon cas j'aurais dû avoir une erreur d'accès car l'ip de ma machine ne correspond pas à celle autorisé, cependant j'ai une erreur 404 (page non trouvée). Ceci est compréhensible car nous n'avons pas fait la création du répertoire **/data/www/admin** . Ceci veut donc dire que Apache valide l'existence du répertoire avant de valider les permissions d'accès , ceci est un détail cependant je désirai le partagé , je croyais que c'était le contraire :D.

Nous allons donc faire la création du répertoire et mettre un petit fichier **index.html** :

        $ sudo mkdir /data/www/admin 
        $ sudo vim /data/www/admin/index.html
        $ cat /data/www/admin/index.html
        section prive

Voilà le bon message d'erreur :) : 

![rep_admin_403.png](./imgs/rep_admin_403.png)


### <a name="virt_host_good" />Utilisation du Virtual host par défaut (bonne pratique)

Nous avons modifié la configuration du fichier **/etc/apache2/apache2.conf**, à moins que les configurations sont vraiment général pour l'ensemble du serveur je vous conseil de définir vos configurations dans le virtual host approprié. Ceci est pour la simple et bonne raison qu'il est plus facile de migré la configuration d'un site quand on a l'ensemble de ça définition dans un fichier plutôt qu'avoir des configurations éparpillé. 
Plusieurs avantage :

* Visualisation de l'ensemble de la configuration à un point
* Plus facile de migré la site sur un autre serveur , car uniquement un fichier a transférer
* La configuration du site peut être délégué a une autre personne en lui permettant d'éditer qu'un fichier
* Permet d'activer ou désactivé l'ensemble des configurations facilement au lieu d'avoir des configurations qui traine quand un site n'est plus en activité.
* Je pourrais en trouver probablement d'autre mais vous avez compris le concept.

Pour le moment nous n'avons qu'un site je vais donc procéder à la migration de la configuration des répertoires **/data/www** et **/data/www/admin** dans le fichier **/etc/apache2/sites-available/000-default.conf**.

Je vais donc supprimé le ligne du fichier **/etc/apache2/apache2.conf**

        -<Directory /data/www >
        -       Options FollowSymLinks
        -       AllowOverride None
        -       Require all granted 
        -</Directory>
        -
        -<Directory /data/www/admin >
        -        Options FollowSymLinks
        -        AllowOverride None
        -        Require  ip 192.168.100 192.168.42.42
        -</Directory>

Et les rajouter dans le fichier **/etc/apache2/sites-available/000-default.conf** , Personnellement je le met toujours après le [DocumentRoot](https://httpd.apache.org/docs/2.4/mod/core.html#documentroot), mais c'est juste une habitude.

Validation et relecture de la configuration :) :

        $ sudo apache2ctl configtest && sudo service apache2 reload 
        Syntax OK
        * Reloading web server apache2
        * 

Donc à partir de maintenant nous manipulerons principalement les fichiers de vhost à moins que nous appliquions une modification global au système telle que l'ajout de module.


## <a name="context" /> Organisation de la configuration (context)

Voyons les niveaux ou contexte d'organisation des configurations d'apache avant l'aller plus loin. Je vais utiliser la configuration du répertoire **/data/www** et **/data/www/admin** pour faire la démonstration. 
Cette section est très importante, car elle permet de comprendre le système de configuration dans les détails, de nos jours mettre en place un service est assez simple, un copie/collé d'une configuration trouvé sur l'Internet suffit 90% du temps. Le défis survient lors des problèmes et / ou l'intégration de services, à ce moment il est important de comprendre le système.!

Il existe 4 niveaux ou contexte :

* **configuration du serveur** : Ensemble de configuration contenu dans les fichiers de configuration du serveur apache , telle que le fichier __httpd.conf__, cependant ceci ne comprend pas les instructions  à l'intérieur des balises __<VirtualHost>__ ou __<Directory>__. De même, elle n'est pas valide dans les fichiers __.htaccess__.
* **serveur virtuel** : Ensemble des instructions comprise dans les balises __<VirtualHost>__.
* **répertoire** : Ensemble des instructions contenues dans les balises __<Directory>__, __<Location>__, __<Files>__, __<If>__, et __<Proxy>__ .
* **.htaccess** : Ensemble des instructions contenues dans un fichier __.htaccess__.


Reprenons notre modification du répertoire __/data/www__, comme base de référence et ainsi visualiser les contextes que nous avons modifier.

1. Nous avons modifier la directive [DocumentRoot](https://httpd.apache.org/docs/2.4/mod/core.html#documentroot), pour rappel ceci nous a permis de modifier la racine du site web. Si nous regardons documentation disponible pour cette instruction, voici la copie  d'écran :

    ![DocumentRoot-screenshot-documentation.png](./imgs/DocumentRoot-screenshot-documentation.png)

    Comme vous pouvez le constater l'instruction **DocumentRoot** peut être utilisé dans 2 contexte **Server config**  et **Virtual host**. Dans notre configuration nous avons uniquement une définition du __DocumentRoot__ dans le __VirtualHost__  : **sites-available/000-default.conf** 

2. Définition des permissions d'accès pour le répertoire __/data/www__ grâce à l'instruction [Directory](https://httpd.apache.org/docs/2.4/fr/mod/core.html#directory). Cette configuration est encore plus intéressante, car nous avons définie les permissions de ce répertoire dans 2 contexte. Commençons par visualiser la documentation

    ![Directory-screenshot-documentation.png](./imgs/Directory-screenshot-documentation.png)

    Comme vous pouvez le constater nous pouvons utiliser la directive __Directory__ dans le contexte **Server config** ET **Virtual Host**. Si nous nous rappelons l'opération de configuration nous avons définie notre configuration dans les 2 contexte.  Dans contexte **Server config** lors que la configuration été présente dans le fichier __/etc/apache2/apache2.conf__ et dans la configuration du **Virtual Host** lorsque nous avons rapatrié la configuration dans le __Host__ Virtuel.

3. Définition de l'instruction [Require](https://httpd.apache.org/docs/2.4/mod/mod_authz_core.html#require) qui nous à permis de limité l'accès au répertoire __admin__ grâce à l'__IP__ de provenance . Nous avons mis la configuration dans le contexte du répertoire __<Directory /data/www/admin >__ étions nous obligé de le faire ?!?! Que dit la documentation :

    ![Require-screenshot-documentation.png](./imgs/Require-screenshot-documentation.png)

    Encore une fois nous avions 2 possibilités où disposer l'instruction dans contexte __Directory__ ou dans le contexte __.htaccess__ . À la lecture de cette information ceci veut donc dire que je ne peux pas définir un limitation par __IP__ pour l'ensemble d'un __Virtual Host__ ce doit être obligatoirement par répertoire, donc pour limite l'accès à l'ensemble je dois bloqué à dans la répertoire **racine**. 

    Mais que ce passe t il si je ne suis pas les directives de positionnement de la configuration ? Voici un exemple de configuration erroné , j'ai définie l'instruction suivante directement dans le __VirtualHost__:

        $ cat /etc/apache2/sites-available/000-default.conf | grep -C 2 Require
           DocumentRoot /data/www

           Require  ip 192.168.100 192.168.42.42

           <Directory /data/www/>
              Options Indexes FollowSymLinks

        $ sudo apachectl configtest
        AH00526: Syntax error on line 14 of /etc/apache2/sites-enabled/000-default.conf:
        Require not allowed here
        Action 'configtest' failed.
        The Apache error log may have more information.

    Ceci est clairement un avantage d'avoir un message aussi claire ayant utilisé la commande , **apachectl configtest** j'ai eu l'information du problème SANS aucune interruption du service.


Nous avons vu 3 des 4 contexte décrit plus tôt , celui qui manque est le contexte **.htaccess**, donc afin de couvrir cette possibilité nous allons reprendre notre configuration et voir quelle instructions peut être déplacé dans le contexte **.htaccess**. Pour les personnes qui s'inquiète de la couverture légère réalisé jusqu'à présent du contexte __VirtualHost__ ne vous inquiétez pas nous couvrirons le sujets de manière approprié sous peu.

Si nous regardons la seule instruction que nous pouvons utiliser dans le contexte __.htaccess__ est **Require**, nous allons donc procéder à la migration de l'instruction.

* Référence 
    * [http://httpd.apache.org/docs/current/fr/mod/directive-dict.html#Context](http://httpd.apache.org/docs/current/fr/mod/directive-dict.html#Context)
    * [http://httpd.apache.org/docs/current/fr/sections.html](http://httpd.apache.org/docs/current/fr/sections.html)

## <a name="context_htaccess" /> Surdéfinition de la configuration dans le fichier .htaccess

L'objectif du fichier __.htaccess__ est de fournir la possibilité de modifier la configuration du serveur au niveau du répertoire. Le principal avantage de cette fonctionnalité est de pouvoir délégué la gestion d'un partie de la configuration au développeur, il est cependant conseillé de limité les champs d'action de cette fonctionnalité , surtout en production car ceci comprend aussi des risques de sécurité potentiel (nous y reviendrons).

Le nom du fichier __.htaccess__est une convention ceci est définie par l'instruction [AccessFileName](https://httpd.apache.org/docs/current/fr/mod/core.html#accessfilename) 

![Accessfilename-screenshot-documentation.png](./imgs/Accessfilename-screenshot-documentation.png)

Comme nous pouvons le voir sur la copie d'écran de la configuration cette instruction peut être définie dans la configuration du serveur OU dans la configuration du __Virtual Host__.
Je vous conseille de ne pas changer le nom du fichier, afin de faciliter la lecture par l'ensemble des intervenants sur votre système. Personnellement s'il y a un problème sur le site , je vais regarder, s'il y a surcharge (redéfinition) de la configuration avec un fichier __.htaccess__, mais si l'on change le nom du fichier il est peu probable que le considère.

Procédons avec la migration de la configuration afin de valider le comportement, la configuration actuelle du __VirtualHost__ ressemble à ceci :

                <VirtualHost *:80>

                        ServerAdmin webmaster@localhost
                        DocumentRoot /data/www

                        <Directory /data/www/>
                                Options Indexes FollowSymLinks
                                AllowOverride None
                                Require all granted
                        </Directory>

                        <Directory /data/www/admin >
                                Options FollowSymLinks
                                AllowOverride None
                                Require ip 192.168.100 192.168.42.42
                        </Directory>

                        ErrorLog ${APACHE_LOG_DIR}/error.log
                        CustomLog ${APACHE_LOG_DIR}/access.log combined

                </VirtualHost>

Nous allons migré la directive **Require ip 192.168.100 192.168.42.42** dans le fichier __.htaccess__. 

1. Je supprime la ligne définie dans la configuration du répertoire **<Directory /data/www/admin >**
2. Je crée le fichier __/data/www/admin/.htaccess__ avec le contenu suivant 

        $ sudo vim /data/www/admin/.htaccess
        Require ip 192.168.100 192.168.42.42
        $ sudo apachectl configtest && sudo /etc/init.d/apache2 reload

3. J'ai du recharger la configuration d'apache afin que le fichier du __VirtualHost__ soit relue suite à la suppression de la définition **Require** 

Validons le comportement , si je vais sur la page __http://Ip\_du\_server/admin/__ . Mon adresse __ip__ de provenance étant 172.17.42.1 l'accès à la section privé étant autorisé uniquement depuis 192.168.100.0/24 ET 192.168.42.42 , je vais avoir le message d'erreur m'indiquant que l'accès est refusé comme précédemment.

![rep_admin_pas_erreur.png](./imgs/rep_admin_pas_erreur.png)

**Oupsss** la section privé est accessible , mais mais mais ... 

![dont_panic.jpg](./imgs/dont_panic.jpg)

Procédons par validation :

1. Re-validation de la configuration du serveur

        $ sudo apachectl configtest                                    
        Syntax OK

2. Validation des logs 

        $ sudo tail /var/log/apache2/access.log /var/log/apache2/error.log
        ==> /var/log/apache2/access.log <==
        [...  OUTPUT COUPÉ ...]
        172.17.42.1 - - [17/Feb/2016:16:58:05 -0500] "GET /admin/ HTTP/1.1" 200 295 "-" "Mozilla/5.0 (X11; Linux i686; rv:42.0) Gecko/20100101 Firefox/42.0"

        ==> /var/log/apache2/error.log <==
        [...  OUTPUT COUPÉ ...]
        [Wed Feb 17 16:45:39.294669 2016] [mpm_event:notice] [pid 53:tid 3075459712] AH00489: Apache/2.4.7 (Ubuntu) configured -- resuming normal operations
        [Wed Feb 17 16:45:39.295596 2016] [core:notice] [pid 53:tid 3075459712] AH00094: Command line: '/usr/sbin/apache2'

Aucun message d'erreur donc il y a un **bug** dans le logiciel apache, ou il y a une configuration qui n'est pas compatible avec notre configuration . Nous allons voir la définition du répertoire **admin**

Regardons la définition du répertoire contenu dans le __Virtual Host__ : **/etc/apache2/sites-available/000-default.conf**

        <Directory /data/www/admin >
            Options FollowSymLinks
            AllowOverride None
        </Directory>

Heureusement la définition est courte nous pouvons voir "rapidement" l'erreur , l'instruction **AllowOverride** est définie à **None**, ceci indique que le système apache ne regarde PAS s'il y a un fichier __.htaccess__ dans le répertoire. 
Nous allons corriger la configuration et passer au explication par la suite, nous allons changer **None** par **AuthConfig** . Voyons le résultat :

1. Fichier **/etc/apache2/sites-available/000-default.conf** :
        
            <Directory /data/www/admin >
                Options FollowSymLinks
                AllowOverride AuthConfig
            </Directory>

2. Recharge de la configuration 

            $ sudo apachectl configtest && sudo /etc/init.d/apache2 reload

C'est le temps de valider si maintenant c'est OK !!

![rep_admin_403.png](./imgs/rep_admin_403.png)

**Woot** , l'accès est bloqué, nous pouvons aussi le constater dans les logs 

        $ sudo tail /var/log/apache2/access.log /var/log/apache2/error.log
        ==> /var/log/apache2/access.log <==
        [ ... OUTPUT COUPÉ ... ]
        172.17.42.1 - - [17/Feb/2016:17:14:05 -0500] "GET /admin/ HTTP/1.1" 403 499 "-" "Mozilla/5.0 (X11; Linux i686; rv:42.0) Gecko/20100101 Firefox/42.0"
        ==> /var/log/apache2/error.log <==
        [ ... OUTPUT COUPÉ ... ]
        [Wed Feb 17 17:13:49.432389 2016] [core:notice] [pid 173:tid 3075066496] AH00094: Command line: '/usr/sbin/apache2'
        [Wed Feb 17 17:14:05.152280 2016] [authz_core:error] [pid 176:tid 2979945280] [client 172.17.42.1:60578] AH01630: client denied by server configuration: /data/www/admin/

Voyons un peu ce que permet l'instruction [AllowOverride](http://httpd.apache.org/docs/2.4/fr/mod/core.html#allowoverride).

### <a name="htaccess_allowoverride" /> Permission de redéfinition des configurations

L'instruction [AllowOverride](http://httpd.apache.org/docs/2.4/fr/mod/core.html#allowoverride), permet d'indiquer au serveur Apache de lire dans le répertoire le fichier __.htaccess__ ( ou fichier autre selon la définition de la variable [AccessFilename](http://httpd.apache.org/docs/2.4/fr/mod/core.html#accessfilename).

![AllowOverride-screenshot-documentation.png](./imgs/AllowOverride-screenshot-documentation.png)

Les valeurs possibles à l'instruction sont :

* **ALL** ( Tous ) : Avec cette configurations Apache regarde le répertoire et l'ensemble des sous répertoire s'il y a un fichier __.htaccess__ . Si un fichier est trouvé, ce dernier est lu et toutes instructions qui peut être définie dans le contexte __.htaccess__ seront interprétés. Résultat la configuration active sera cette définie dans le fichier __.htaccess__.

* **None** ( Rien ) : Avec cette configuration Apache ne regarde même pas s'il y a un fichier __.htaccess__ dans le répertoire

* **AuthConfig** : Permet l'utilisation des directives d'autorisation (__AuthDBMGroupFilex__, __AuthDBMUserFile__, __AuthGroupFile__, __AuthName__, __AuthType__, __AuthUserFile__, __Require__, etc...).

* **FileInfo** : Permet l'utilisation des directives qui contrôlent les types de documents (directives __ErrorDocument__, __ForceType__, __LanguagePriority__, __SetHandler__, __SetInputFilter__, __SetOutputFilter__, et directives du module __mod\_mime__ __Add__\* et __Remove__\*), des métadonnées des documents (__Header__, __RequestHeader__, __SetEnvIf__, __SetEnvIfNoCase__, __BrowserMatch__, __CookieExpires__, __CookieDomain__, __CookieStyle__, __CookieTracking__, __CookieName__), des directives du module __mod\_rewrite__ directives (__RewriteEngine__, __RewriteOptions__, __RewriteBase__, __RewriteCond__, __RewriteRule__), des directives du module __mod\_alias__ directives (__Redirect__, __RedirectTemp__, __RedirectPermanent__, __RedirectMatch__), et de la directive Action du module __mod\_actions__. 

* **Indexes** : Permet l'utilisation des directives qui contrôlent l'indexation des répertoires (__AddDescription__, __AddIcon__, __AddIconByEncoding__, __AddIconByType__, __DefaultIcon__, __DirectoryIndex__, __FancyIndexing__, __HeaderName__, __IndexIgnore__, __IndexOptions__, __ReadmeName__, etc...)

* **Limit** : Permet l'utilisation des directives contrôlant l'accès au serveur (__Allow__, __Deny__ et __Order__).

* **Nonfatal=[Override|Unknown|All]** : Permet d'utiliser l'option __AllowOverride__ pour rendre les erreurs de syntaxe non fatales dans les fichiers __.htaccess__ : au lieu de causer une __Internal Server Error__, les directives non autorisées ou non reconnues seront ignorées et un avertissement enregistré dans le journal :
    * __Nonfatal=Override__ rend les directives interdite par __AllowOverride__ non fatales.
    * __Nonfatal=Unknown__ rend les directives inconnues non fatales. Sont concernées les erreurs de frappe et les directives implémentées par un module non chargé.
    * __Nonfatal=All__ rend toutes les directives précédentes non fatales.
    * **Notez qu'une erreur de syntaxe dans une directive valide causera toujours une internal server error.**


* Référence :
    * [https://httpd.apache.org/docs/current/howto/htaccess.html](https://httpd.apache.org/docs/current/howto/htaccess.html) 

## <a name="VirtualHost" /> VirtualHost

TODO : ajouter l'information 

# <a name="auth_local_access" /> Autorisation d'accès avec authentification local

Nous allons maintenant revoir notre configuration pour l'accès au répertoire admin , au lieu d'utiliser un système de limitation par adresse ip, nous allons mettre en place une authentification local. La limitation par adresse ip c'est bien, malheureusement quand nous sommes en mouvement nous n'avons pas toujours la même adresse ip. Nous allons utiliser le module apache [mod\_authn\_core](https://httpd.apache.org/docs/2.4/mod/mod_authn_core.html#authtype). 

Commençons par valider que ce dernier est bien chargé :

        $ ls -l /etc/apache2/mods-enabled/*auth*
        lrwxrwxrwx 1 root root 33 Nov 25 08:20 /etc/apache2/mods-enabled/auth_basic.load -> ../mods-available/auth_basic.load
        lrwxrwxrwx 1 root root 33 Nov 25 08:20 /etc/apache2/mods-enabled/authn_core.load -> ../mods-available/authn_core.load
        lrwxrwxrwx 1 root root 33 Nov 25 08:20 /etc/apache2/mods-enabled/authn_file.load -> ../mods-available/authn_file.load
        lrwxrwxrwx 1 root root 33 Nov 25 08:20 /etc/apache2/mods-enabled/authz_core.load -> ../mods-available/authz_core.load
        lrwxrwxrwx 1 root root 33 Nov 25 08:20 /etc/apache2/mods-enabled/authz_host.load -> ../mods-available/authz_host.load
        lrwxrwxrwx 1 root root 33 Nov 25 08:20 /etc/apache2/mods-enabled/authz_user.load -> ../mods-available/authz_user.load

Comme nous pouvons le constater plusieurs module d'authentification sont chargé par défaut incluant [mod_authn_core](https://httpd.apache.org/docs/2.4/mod/mod_authn_core.html#authtype) (ligne 2 :P )

Pour information voici le contenu :

        $ cat /etc/apache2/mods-enabled/authn_core.load 
        LoadModule authn_core_module /usr/lib/apache2/modules/mod_authn_core.so

Apache charge un fichier **.so** qui est l'équivalent d'un **DLL** qui permet d'avoir une suite d'instruction en plus, disponible pour le service. Le module fut compilé pour la version spécifique d'Apache il n'est pas possible de prendre un module écrit pour la version 2.2 et le faire fonctionner sur la version 2.4 . Nous verrons plus en détail plus tard les modules apaches cependant il est bien d'avoir une compréhension, sommaire du fonctionnement.


Procédons à la modification du fichier de configuration de notre site par défaut (**/etc/apache2/sites-available/000-default.conf**). Voici la configuration :

        <Directory /data/www/admin >
            Options FollowSymLinks
            AllowOverride None
    
            #  Section d'authentification
            AuthType Basic
            AuthName "Authentication Required"
            AuthUserFile "/data/private-www/.htpasswd-admin"
            Require valid-user
        </Directory>

Analysons les paramètres :

* [AuthType](https://httpd.apache.org/docs/2.4/fr/mod/mod_authn_core.html#authtype) : Définie le type de module d'authentification , nous avions vu que plusieurs module été disponible dans le cas présent nous utiliserons le mode __Basic__. Il est important de souligné que dans le mode de communication actuelle le transfert du mot de passe est transmis en claire . Afin d'augmenter le niveau de sécurité nous devrions activer le support __SSL__ nous y reviendrons. Voici les type disponibles :
    * [Basic](https://httpd.apache.org/docs/2.4/fr/mod/mod_auth_basic.html) 
    * [Digest](https://httpd.apache.org/docs/2.4/fr/mod/mod_auth_digest.html)
    * [form](https://httpd.apache.org/docs/2.4/fr/mod/mod_auth_form.html)
* [AuthName](https://httpd.apache.org/docs/2.4/fr/mod/mod_authn_core.html#authname) : message affiché à l'utilisateur afin qu'il entre les informations d'authentification requis .
* [AuthUserFile](https://httpd.apache.org/docs/2.4/fr/mod/mod_authn_file.html#authuserfile) : Ficher local sur le serveur web contenant la liste des utilisateurs et mot de passe permettant de valider l'authentification des utilisateurs.
* [Require](https://httpd.apache.org/docs/2.4/fr/mod/mod_authz_core.html#require) : Instruction spécifiant le critère d'autorisation, dans les démonstrations passé nous avions utilisé les adresses ip comme critère ici nous pourrons utiliser des noms d'utilisateur ou définir comme dans le cas présent n'importe quelle utilisateur s'authentifiant avec succès. 


Validons qu'il n'y pas d'erreur syntaxique et rechargeons le fichier de configuration :

        $ sudo apache2ctl configtest && sudo service apache2 restart
        Syntax OK
        * Restarting web server apache2
        *    ...done.

Donc si nous allons à l'URL nous avons bien le message demandant le nom d'utilisateur et mot de passe :

![imgs/auth_admin-request.png](imgs/auth_admin-request.png)

Par contre, comme nous n'avons jamais définie de nom d'usagé / mot de passe quand on rentre n'importe quoi nous avons une [erreur 500](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes#5xx_Server_Error) indiquant un problème sur le serveur. Le message d'erreur sur le serveur est très claire :

        $ sudo tail /var/log/apache2/error.log
        [Tue Dec 01 08:40:05.516453 2015] [authn_file:error] [pid 457:tid 2869857088] (2)No such file or directory: [client 172.17.42.1:52744] AH01620: Could not open password file: /data/private-www/.htpasswd-admin


## <a name="htpasswd" /> Création du fichier de mot de passe ( __htpasswd__ )

Pour réaliser la création du fichier contenant le nom d'utilisateur et le mot de passe nous avons besoin de l'application **htpasswd** , cette application est disponible dans le pacquage : **apache2-utils**

        $ sudo apt-get install apache2-utils

Nous allons faire la création du fichier :

        $ sudo mkdir /data/private-www/
        $ sudo htpasswd -c /data/private-www/.htpasswd-admin admin
        New password:
        Re-type new password:
        Adding password for user admin
        $ sudo htpasswd  /data/private-www/.htpasswd-admin robert
        New password: 
        Re-type new password: 
        Adding password for user robert

**IMPORTANT** : entre le 2 commandes il y a une différence, pour réaliser la création du fichier j'ai utilisé l'option **-c** par la suite je ne l'utilise pas . En fait il faut surtout pas que je l'utilise sinon ça vide le fichier pour créer un nouveau fichier , nous perdons donc l'information :-/ . Ouin c'est dangereux, heureusement que vous savez ce que vous faites :D, sinon il y a les backups ...

Visualisons le contenu du fichier, dans les 2 cas j'ai mis le même mot de passe (toto) :

        $ cat /data/private-www/.htpasswd-admin
        admin:$apr1$6gHZyTty$lxisZ66JPD7yK6K8fcXlU.
        robert:$apr1$fUI6se3h$40k/ftJPUtVOrptHlMiYB0

Si nous retournons à l'URL nous devrions avoir une authentification avec succès avec l'un ou l'autre des utilisateurs. La page indiquant que nous sommes dans une "section prive" devrais s'afficher.


# <a name="Reference" /> Référence :

* [Documentation Apache 2.4](https://httpd.apache.org/docs/2.4/) : https://httpd.apache.org/docs/2.4/
* [Liste des code d'état du protocole http](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes): https://en.wikipedia.org/wiki/List_of_HTTP_status_codes


TODO: demontration du symlink vers /etc/passwd == sudo ln -s /etc/ /var/www/html/sys
