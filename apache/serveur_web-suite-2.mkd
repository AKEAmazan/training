<meta http-equiv='Content-Type' content='text/html; charset=utf-8' /> 
<style>
pre{background:#F8F8FF; border:black dashed 1px; padding:6px}
</style>

TODO corriger les \_

# Index 



# <a name="auth_local_access" /> Autorisation d'accès avec authentification local

Nous allons maintenant revoir notre configuration pour l'accès au répertoire admin , au lieu d'utiliser un système de limitation par adresse ip, nous allons mettre en place une authentification local. La limitation par adresse ip c'est bien, malheureusement quand nous sommes en mouvement nous n'avons pas toujours la même adresse ip. Nous allons utiliser le module apache [mod\_authn\_core](https://httpd.apache.org/docs/2.4/mod/mod_authn_core.html#authtype). 

Commençons par valider que ce dernier est bien chargé :

        $ ls -l /etc/apache2/mods-enabled/*auth*
        lrwxrwxrwx 1 root root 33 Nov 25 08:20 /etc/apache2/mods-enabled/auth_basic.load -> ../mods-available/auth_basic.load
        lrwxrwxrwx 1 root root 33 Nov 25 08:20 /etc/apache2/mods-enabled/authn_core.load -> ../mods-available/authn_core.load
        lrwxrwxrwx 1 root root 33 Nov 25 08:20 /etc/apache2/mods-enabled/authn_file.load -> ../mods-available/authn_file.load
        lrwxrwxrwx 1 root root 33 Nov 25 08:20 /etc/apache2/mods-enabled/authz_core.load -> ../mods-available/authz_core.load
        lrwxrwxrwx 1 root root 33 Nov 25 08:20 /etc/apache2/mods-enabled/authz_host.load -> ../mods-available/authz_host.load
        lrwxrwxrwx 1 root root 33 Nov 25 08:20 /etc/apache2/mods-enabled/authz_user.load -> ../mods-available/authz_user.load

Comme nous pouvons le constater plusieurs module d'authentification sont chargé par défaut incluant [mod_authn_core](https://httpd.apache.org/docs/2.4/mod/mod_authn_core.html#authtype) (ligne 2 :P )

Pour information voici le contenu :

        $ cat /etc/apache2/mods-enabled/authn_core.load 
        LoadModule authn_core_module /usr/lib/apache2/modules/mod_authn_core.so

Apache charge un fichier **.so** qui est l'équivalent d'un **DLL** qui permet d'avoir une suite d'instruction en plus, disponible pour le service. Le module fut compilé pour la version spécifique d'Apache il n'est pas possible de prendre un module écrit pour la version 2.2 et le faire fonctionner sur la version 2.4 . Nous verrons plus en détail plus tard les modules apaches cependant il est bien d'avoir une compréhension, sommaire du fonctionnement.


Procédons à la modification du fichier de configuration de notre site par défaut (**/etc/apache2/sites-enabled/siteA-ssl.conf**). Voici la configuration :

        <Directory /data/vhosts/siteA/docroot/admin/ >
            Options none
            AllowOverride None
            #  Section d'authentification
            AuthType Basic
            AuthName "Authentication Required"
            AuthUserFile "/data/vhosts/siteA/privates/.htpasswd-admin"
            Require valid-user
        </Directory>

Analysons les paramètres :

* [AuthType](https://httpd.apache.org/docs/2.4/fr/mod/mod_authn_core.html#authtype) : Définie le type de module d'authentification , nous avions vu que plusieurs module été disponible dans le cas présent nous utiliserons le mode __Basic__. Il est important de souligné que dans le mode de communication actuelle le transfert du mot de passe est transmis en claire . Afin d'augmenter le niveau de sécurité nous devrions activer le support __SSL__ nous y reviendrons. Voici les type disponibles :
    * [Basic](https://httpd.apache.org/docs/2.4/fr/mod/mod_auth_basic.html) 
    * [Digest](https://httpd.apache.org/docs/2.4/fr/mod/mod_auth_digest.html)
    * [form](https://httpd.apache.org/docs/2.4/fr/mod/mod_auth_form.html)
* [AuthName](https://httpd.apache.org/docs/2.4/fr/mod/mod_authn_core.html#authname) : message affiché à l'utilisateur afin qu'il entre les informations d'authentification requis .
* [AuthUserFile](https://httpd.apache.org/docs/2.4/fr/mod/mod_authn_file.html#authuserfile) : Ficher local sur le serveur web contenant la liste des utilisateurs et mot de passe permettant de valider l'authentification des utilisateurs.
* [Require](https://httpd.apache.org/docs/2.4/fr/mod/mod_authz_core.html#require) : Instruction spécifiant le critère d'autorisation, dans les démonstrations passé nous avions utilisé les adresses ip comme critère ici nous pourrons utiliser des noms d'utilisateur ou définir comme dans le cas présent n'importe quelle utilisateur s'authentifiant avec succès. 


Validons qu'il n'y pas d'erreur syntaxique et rechargeons le fichier de configuration :

        $ sudo apache2ctl configtest && sudo service apache2 restart
        Syntax OK
        * Restarting web server apache2
        *    ...done.

Donc si nous allons à l'URL nous avons bien le message demandant le nom d'utilisateur et mot de passe :

![imgs/auth_admin-request.png](imgs/auth_admin-request.png)

Par contre, comme nous n'avons jamais définie de nom d'usagé / mot de passe quand on rentre n'importe quoi nous avons une [erreur 500](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes#5xx_Server_Error) indiquant un problème sur le serveur. Le message d'erreur sur le serveur est très claire :

        $ sudo tail /var/log/apache2/error.log
        [Tue Dec 01 08:40:05.516453 2015] [authn_file:error] [pid 457:tid 2869857088] (2)No such file or directory: [client 172.17.42.1:52744] AH01620: Could not open password file: /data/vhosts/siteA/privates/.htpasswd-admin


## <a name="htpasswd" /> Création du fichier de mot de passe ( __htpasswd__ )

Pour réaliser la création du fichier contenant le nom d'utilisateur et le mot de passe nous avons besoin de l'application **htpasswd** , cette application est disponible dans le pacquage : **apache2-utils**

        $ sudo apt-get install apache2-utils

Nous allons faire la création du fichier :

        $ sudo htpasswd -c /data/vhosts/siteA/privates/.htpasswd-admin admin
        New password:
        Re-type new password:
        Adding password for user admin
        $ sudo htpasswd  /data/vhosts/siteA/privates/.htpasswd-admin robert
        New password: 
        Re-type new password: 
        Adding password for user robert

**IMPORTANT** : entre le 2 commandes il y a une différence, pour réaliser la création du fichier j'ai utilisé l'option **-c** par la suite je ne l'utilise pas . En fait il faut surtout pas que je l'utilise sinon ça vide le fichier pour créer un nouveau fichier , nous perdons donc l'information :-/ . Ouin c'est dangereux, heureusement que vous savez ce que vous faites :D, sinon il y a les backups ...

Visualisons le contenu du fichier, dans les 2 cas j'ai mis le même mot de passe (toto) :

        $ cat /data/vhosts/siteA/privates/.htpasswd-admin
        admin:$apr1$6gHZyTty$lxisZ66JPD7yK6K8fcXlU.
        robert:$apr1$fUI6se3h$40k/ftJPUtVOrptHlMiYB0

Si nous retournons à l'URL nous devrions avoir une authentification avec succès avec l'un ou l'autre des utilisateurs. La page indiquant que nous sommes dans une "section prive" devrais s'afficher.


## <a name="htpasswd_group" /> Gestion d'accès des utilisateurs et par groupe

L'exemple ci-dessus est vraiment la méthode la plus simple vous avec un fichier de mot de passe peut importe l'utilisateur s'il réussie à établir une connexion ce dernier à accès. Par contre si vous avez plusieurs section qui oblige l'utilisation d'une authentification vous aimeriez probablement utilisé 1 fichier de mot de passe et définir qui à accès dans le fichier de configuration apache.

Si vous connaissez le nom des utilisateurs vous pouvez changé la ligne suivante avec la liste des nom : 

            Require valid-user

Voici la version avec les nom spécifiques :

            Require user admin thomas robert


Ceci est bien mais si vous avez travailler un peu avec ce mode de définition l'ajout et la suppression d'un utilisateur est ennuyeuse comme ceci est définie dans la configuration apache ou son extension via le fichier **.htaccess** ce ne peut pas être délégué .

Nous allons donc définir des groupes qui pourrons être éditer éventuellement par un tiers ou être réutilisé dans un autre contexte. Nous allons créer un fichier texte avec la définition des groupes. 

        $ cat  /data/vhosts/siteA/privates/htgroupe 
        admins: admin robert 
        superAdmins: admin thomas
        noobs: robert

Nous allons définir ce fichier de groupe et définir quelle groupe peut accéder au dossier , voici donc la nouvelle configuration :

        <Directory /data/vhosts/siteA/docroot/admin/ >
            Options none
            AllowOverride None
            #  Section d'authentification
            AuthType Basic
            AuthName "Authentication Required"
            AuthUserFile "/data/vhosts/siteA/privates/.htpasswd-admin"
            AuthGroupFile "/data/vhosts/siteA/privates/htgroupe"
            Require group admins
        </Directory>


Donc nous voyons 2 changements :

* **AuthGroupFile** : ceci permet de définir le fichier groupe qui sera lut avec l'information des membres
* **Require group admins** : contenant le ou les groupes qui sont autorisé 


Réalisons maintenant la validation syntaxique et redémarrons apache : 

        $  sudo apachectl configtest && sudo /etc/init.d/apache2 restart
        AH00526: Syntax error on line 33 of /etc/apache2/sites-enabled/siteA-ssl.conf:
        Invalid command 'AuthGroupFile', perhaps misspelled or defined by a module not included in the server configuration
        Action 'configtest' failed.
        The Apache error log may have more information.

**OUPSS** une erreur :D , bon 2 possibilité :

* l'option **AuthGroupFile** est mal écrite ou n'existe pas
* Il manque un module ...

Je vais profité de l'occasion pour remontré l'importance et la qualité de la documentation du site d'apache. 

TODO : ajouter le screen shot pour le module 

Effectivement si nous listons les modules actifs et les modules disponible il nous manque le module pour la gestion du fichier de groupe :

        $ ls /etc/apache2/mods-enabled/*group* /etc/apache2/mods-available/*group*
        ls: cannot access /etc/apache2/mods-enabled/*group*: No such file or directory
        /etc/apache2/mods-available/authz_groupfile.load

Activons se dernier et nous allons confirmer que ceci fonctionne à présent :

        $ cd /etc/apache2/mods-enabled
        $ sudo ln -s ../mods-available/authz_groupfile.load .
        $ sudo apachectl configtest && sudo /etc/init.d/apache2 restart
        Syntax OK
         * Restarting web server apache2
            ...done.

Nous pouvons maintenant valider l'accès : https://www.linux202-sitea.com/admin/


## <a name="Auth_methode" /> Utilisation de système d'authentification externe

### Mysql

Documentation : https://blog.froese.org/2014/06/13/authn-dbd-mysql-ubuntu-trusty/

### Ldap 

Documentation : https://httpd.apache.org/docs/2.4/mod/mod_authnz_ldap.html


## <a name="htpasswd_file-et-externe" /> Combinaison d'une authentification externe et local

Bien que nous n'ayons pas traiter l'utilisation d'une authentification externe j'aimerai glisser un mot sur la possibilité de combiner interne et externe. 

Voici un exemple de configuration d'authentification utilisant une authentification **ldap**  et une authentification par fichier :

        <Directory "/www/docs/private">

            AuthName "Private"
            AuthType Basic
            AuthBasicProvider file ldap
            AuthUserFile "/usr/local/apache/passwd/passwords"
            AuthLDAPURL ldap://ldaphost/o=yourorg
            Require valid-user

         </Directory>

Dans le cas présent si l'authentification avec __LDAP__ ou depuis le fichier de mot de passe est réussie avec une utilisateur ce dernier aura accès.

Référence :

* http://httpd.apache.org/docs/current/fr/howto/auth.html

# <a name="mod_webdav" /> Webdav pour avoir un lieu de stockage de fichiers

Lors de la formation sur __rsnapshot__ j'avais fait mention de l'utilisation d'une serveur **webdav** pour faire le transfert de fichier . Malheureusement nous n'étions pas encore rendu à la mise en place d'apache nous n'avions donc pas pu couvrir cette fonctionnalité. Je n'avais pas pour objectif primaire de faire la démonstration puis suite à des demandes de participants voici une exemple de configuration. Après tous la formation elle est pour **VOUS** :D !!

Le protocole [webdav](http://www.webdav.org/) permet de réaliser du transfert de fichier, il existe plusieurs client pour toutes les plateformes , nous verrons la possibilité de __mounté__ le système de fichier sous Linux. Mettons en place la configuration puis nous analyserons ensemble la configuration . 

Nous allons activer 2 modules **mod\_dav** et **mod\_dav\_fs** , 2 méthodes pour réaliser l'opération la réalisation des liens symbolique manuellement ou l'utilisation de la commande **a2enmod**.

        $ sudo a2enmod dav
          Enabling module dav.
          To activate the new configuration, you need to run:
            service apache2 restart
        $ sudo a2enmod dav_fs
        Considering dependency dav for dav_fs:
          Module dav already enabled
          Enabling module dav_fs.
          To activate the new configuration, you need to run:
            service apache2 restart

Maintenant nous allons modifier la configuration du __siteA__ afin de pouvoir utiliser le répertoire __/webdav__ comme répertoire de stockage . Voici le contenu à ajouter :

        <Directory /data/vhosts/siteA/docroot/webdav/>
            Dav On
        </Directory>

**WOwww** magie :D, validons tous de même peut-être que je vous ment :P, ça semble trop facile ... Créons un fichier dans le répertoire __/data/vhosts/siteA/docroot/webdav/__

        $ cat /data/vhosts/siteA/docroot/webdav/toto
        super fichier dans webdav

Si vous accédez à l'URL : https://www.linux202-sitea.com/webdav/ , vous aurez quelques chose qui ressemble à ceci , vous pouvez cliquez sur le fichier __toto__ et voir son contenu :

![webdav_simple-step1.png](./imgs/webdav_simple-step1.png)





* Référence :

    * https://httpd.apache.org/docs/2.4/fr/mod/mod\_dav.html

# <a name="performance" /> Performance et analyse d'apache

# <a name="compilation_module" /> Compilation d'un modules apache (a valider)

https://httpd.apache.org/docs/2.4/developer/modguide.html

# <a name="Reference" /> Référence :

* [Documentation Apache 2.4](https://httpd.apache.org/docs/2.4/) : https://httpd.apache.org/docs/2.4/
* [Liste des code d'état du protocole http](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes): https://en.wikipedia.org/wiki/List_of_HTTP_status_codes
* http://httpd.apache.org/docs/current/fr/howto/auth.html



