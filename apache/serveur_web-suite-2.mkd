<meta http-equiv='Content-Type' content='text/html; charset=utf-8' /> 
<style>
pre{background:#F8F8FF; border:black dashed 1px; padding:6px}
</style>

TODO corriger les \_

# Index 



# <a name="auth_local_access" /> Autorisation d'accès avec authentification local

Nous allons maintenant revoir notre configuration pour l'accès au répertoire admin , au lieu d'utiliser un système de limitation par adresse ip, nous allons mettre en place une authentification local. La limitation par adresse ip c'est bien, malheureusement quand nous sommes en mouvement nous n'avons pas toujours la même adresse ip. Nous allons utiliser le module apache [mod\_authn\_core](https://httpd.apache.org/docs/2.4/mod/mod_authn_core.html#authtype). 

Commençons par valider que ce dernier est bien chargé :

        $ ls -l /etc/apache2/mods-enabled/*auth*
        lrwxrwxrwx 1 root root 33 Nov 25 08:20 /etc/apache2/mods-enabled/auth_basic.load -> ../mods-available/auth_basic.load
        lrwxrwxrwx 1 root root 33 Nov 25 08:20 /etc/apache2/mods-enabled/authn_core.load -> ../mods-available/authn_core.load
        lrwxrwxrwx 1 root root 33 Nov 25 08:20 /etc/apache2/mods-enabled/authn_file.load -> ../mods-available/authn_file.load
        lrwxrwxrwx 1 root root 33 Nov 25 08:20 /etc/apache2/mods-enabled/authz_core.load -> ../mods-available/authz_core.load
        lrwxrwxrwx 1 root root 33 Nov 25 08:20 /etc/apache2/mods-enabled/authz_host.load -> ../mods-available/authz_host.load
        lrwxrwxrwx 1 root root 33 Nov 25 08:20 /etc/apache2/mods-enabled/authz_user.load -> ../mods-available/authz_user.load

Comme nous pouvons le constater plusieurs module d'authentification sont chargé par défaut incluant [mod_authn_core](https://httpd.apache.org/docs/2.4/mod/mod_authn_core.html#authtype) (ligne 2 :P )

Pour information voici le contenu :

        $ cat /etc/apache2/mods-enabled/authn_core.load 
        LoadModule authn_core_module /usr/lib/apache2/modules/mod_authn_core.so

Apache charge un fichier **.so** qui est l'équivalent d'un **DLL** qui permet d'avoir une suite d'instruction en plus, disponible pour le service. Le module fut compilé pour la version spécifique d'Apache il n'est pas possible de prendre un module écrit pour la version 2.2 et le faire fonctionner sur la version 2.4 . Nous verrons plus en détail plus tard les modules apaches cependant il est bien d'avoir une compréhension, sommaire du fonctionnement.


Procédons à la modification du fichier de configuration de notre site par défaut (**/etc/apache2/sites-enabled/siteA-ssl.conf**). Voici la configuration :

        <Directory /data/vhosts/siteA/docroot/admin/ >
            Options none
            AllowOverride None
            #  Section d'authentification
            AuthType Basic
            AuthName "Authentication Required"
            AuthUserFile "/data/vhosts/siteA/privates/.htpasswd-admin"
            Require valid-user
        </Directory>

Analysons les paramètres :

* [AuthType](https://httpd.apache.org/docs/2.4/fr/mod/mod_authn_core.html#authtype) : Définie le type de module d'authentification , nous avions vu que plusieurs module été disponible dans le cas présent nous utiliserons le mode __Basic__. Il est important de souligné que dans le mode de communication actuelle le transfert du mot de passe est transmis en claire . Afin d'augmenter le niveau de sécurité nous devrions activer le support __SSL__ nous y reviendrons. Voici les type disponibles :
    * [Basic](https://httpd.apache.org/docs/2.4/fr/mod/mod_auth_basic.html) 
    * [Digest](https://httpd.apache.org/docs/2.4/fr/mod/mod_auth_digest.html)
    * [form](https://httpd.apache.org/docs/2.4/fr/mod/mod_auth_form.html)
* [AuthName](https://httpd.apache.org/docs/2.4/fr/mod/mod_authn_core.html#authname) : message affiché à l'utilisateur afin qu'il entre les informations d'authentification requis .
* [AuthUserFile](https://httpd.apache.org/docs/2.4/fr/mod/mod_authn_file.html#authuserfile) : Ficher local sur le serveur web contenant la liste des utilisateurs et mot de passe permettant de valider l'authentification des utilisateurs.
* [Require](https://httpd.apache.org/docs/2.4/fr/mod/mod_authz_core.html#require) : Instruction spécifiant le critère d'autorisation, dans les démonstrations passé nous avions utilisé les adresses ip comme critère ici nous pourrons utiliser des noms d'utilisateur ou définir comme dans le cas présent n'importe quelle utilisateur s'authentifiant avec succès. 


Validons qu'il n'y pas d'erreur syntaxique et rechargeons le fichier de configuration :

        $ sudo apache2ctl configtest && sudo service apache2 restart
        Syntax OK
        * Restarting web server apache2
        *    ...done.

Donc si nous allons à l'URL nous avons bien le message demandant le nom d'utilisateur et mot de passe :

![imgs/auth_admin-request.png](imgs/auth_admin-request.png)

Par contre, comme nous n'avons jamais définie de nom d'usagé / mot de passe quand on rentre n'importe quoi nous avons une [erreur 500](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes#5xx_Server_Error) indiquant un problème sur le serveur. Le message d'erreur sur le serveur est très claire :

        $ sudo tail /var/log/apache2/error.log
        [Tue Dec 01 08:40:05.516453 2015] [authn_file:error] [pid 457:tid 2869857088] (2)No such file or directory: [client 172.17.42.1:52744] AH01620: Could not open password file: /data/vhosts/siteA/privates/.htpasswd-admin


## <a name="htpasswd" /> Création du fichier de mot de passe ( __htpasswd__ )

Pour réaliser la création du fichier contenant le nom d'utilisateur et le mot de passe nous avons besoin de l'application **htpasswd** , cette application est disponible dans le pacquage : **apache2-utils**

        $ sudo apt-get install apache2-utils

Nous allons faire la création du fichier :

        $ sudo htpasswd -c /data/vhosts/siteA/privates/.htpasswd-admin admin
        New password:
        Re-type new password:
        Adding password for user admin
        $ sudo htpasswd  /data/vhosts/siteA/privates/.htpasswd-admin robert
        New password: 
        Re-type new password: 
        Adding password for user robert

**IMPORTANT** : entre le 2 commandes il y a une différence, pour réaliser la création du fichier j'ai utilisé l'option **-c** par la suite je ne l'utilise pas . En fait il faut surtout pas que je l'utilise sinon ça vide le fichier pour créer un nouveau fichier , nous perdons donc l'information :-/ . Ouin c'est dangereux, heureusement que vous savez ce que vous faites :D, sinon il y a les backups ...

Visualisons le contenu du fichier, dans les 2 cas j'ai mis le même mot de passe (toto) :

        $ cat /data/vhosts/siteA/privates/.htpasswd-admin
        admin:$apr1$6gHZyTty$lxisZ66JPD7yK6K8fcXlU.
        robert:$apr1$fUI6se3h$40k/ftJPUtVOrptHlMiYB0

Si nous retournons à l'URL nous devrions avoir une authentification avec succès avec l'un ou l'autre des utilisateurs. La page indiquant que nous sommes dans une "section prive" devrais s'afficher.


## <a name="htpasswd_group" /> Gestion d'accès des utilisateurs et par groupe

L'exemple ci-dessus est vraiment la méthode la plus simple vous avec un fichier de mot de passe peut importe l'utilisateur s'il réussie à établir une connexion ce dernier à accès. Par contre si vous avez plusieurs section qui oblige l'utilisation d'une authentification vous aimeriez probablement utilisé 1 fichier de mot de passe et définir qui à accès dans le fichier de configuration apache.

Si vous connaissez le nom des utilisateurs vous pouvez changé la ligne suivante avec la liste des nom : 

            Require valid-user

Voici la version avec les nom spécifiques :

            Require user admin thomas robert


Ceci est bien mais si vous avez travailler un peu avec ce mode de définition l'ajout et la suppression d'un utilisateur est ennuyeuse comme ceci est définie dans la configuration apache ou son extension via le fichier **.htaccess** ce ne peut pas être délégué .

Nous allons donc définir des groupes qui pourrons être éditer éventuellement par un tiers ou être réutilisé dans un autre contexte. Nous allons créer un fichier texte avec la définition des groupes. 

        $ cat  /data/vhosts/siteA/privates/htgroupe 
        admins: admin robert 
        superAdmins: admin thomas
        noobs: robert

Nous allons définir ce fichier de groupe et définir quelle groupe peut accéder au dossier , voici donc la nouvelle configuration :

        <Directory /data/vhosts/siteA/docroot/admin/ >
            Options none
            AllowOverride None
            #  Section d'authentification
            AuthType Basic
            AuthName "Authentication Required"
            AuthUserFile "/data/vhosts/siteA/privates/.htpasswd-admin"
            AuthGroupFile "/data/vhosts/siteA/privates/htgroupe"
            Require group admins
        </Directory>


Donc nous voyons 2 changements :

* **AuthGroupFile** : ceci permet de définir le fichier groupe qui sera lut avec l'information des membres
* **Require group admins** : contenant le ou les groupes qui sont autorisé 


Réalisons maintenant la validation syntaxique et redémarrons apache : 

        $  sudo apachectl configtest && sudo /etc/init.d/apache2 restart
        AH00526: Syntax error on line 33 of /etc/apache2/sites-enabled/siteA-ssl.conf:
        Invalid command 'AuthGroupFile', perhaps misspelled or defined by a module not included in the server configuration
        Action 'configtest' failed.
        The Apache error log may have more information.

**OUPSS** une erreur :D , bon 2 possibilité :

* l'option **AuthGroupFile** est mal écrite ou n'existe pas
* Il manque un module ...

Je vais profité de l'occasion pour remontré l'importance et la qualité de la documentation du site d'apache. 

TODO : ajouter le screen shot pour le module 

Effectivement si nous listons les modules actifs et les modules disponible il nous manque le module pour la gestion du fichier de groupe :

        $ ls /etc/apache2/mods-enabled/*group* /etc/apache2/mods-available/*group*
        ls: cannot access /etc/apache2/mods-enabled/*group*: No such file or directory
        /etc/apache2/mods-available/authz_groupfile.load

Activons se dernier et nous allons confirmer que ceci fonctionne à présent :

        $ cd /etc/apache2/mods-enabled
        $ sudo ln -s ../mods-available/authz_groupfile.load .
        $ sudo apachectl configtest && sudo /etc/init.d/apache2 restart
        Syntax OK
         * Restarting web server apache2
            ...done.

Nous pouvons maintenant valider l'accès : https://www.linux202-sitea.com/admin/


## <a name="Auth_methode" /> Utilisation de système d'authentification externe

### Mysql

Documentation : https://blog.froese.org/2014/06/13/authn-dbd-mysql-ubuntu-trusty/

### Ldap 

Documentation : https://httpd.apache.org/docs/2.4/mod/mod_authnz_ldap.html


## <a name="htpasswd_file-et-externe" /> Combinaison d'une authentification externe et local

Bien que nous n'ayons pas traiter l'utilisation d'une authentification externe j'aimerai glisser un mot sur la possibilité de combiner interne et externe. 

Voici un exemple de configuration d'authentification utilisant une authentification **ldap**  et une authentification par fichier :

        <Directory "/www/docs/private">

            AuthName "Private"
            AuthType Basic
            AuthBasicProvider file ldap
            AuthUserFile "/usr/local/apache/passwd/passwords"
            AuthLDAPURL ldap://ldaphost/o=yourorg
            Require valid-user

         </Directory>

Dans le cas présent si l'authentification avec __LDAP__ ou depuis le fichier de mot de passe est réussie avec une utilisateur ce dernier aura accès.

Référence :

* http://httpd.apache.org/docs/current/fr/howto/auth.html

# <a name="mod_webdav" /> Webdav pour avoir un lieu de stockage de fichiers

Lors de la formation sur __rsnapshot__ j'avais fait mention de l'utilisation d'une serveur **webdav** pour faire le transfert de fichier . Malheureusement nous n'étions pas encore rendu à la mise en place d'apache nous n'avions donc pas pu couvrir cette fonctionnalité. Je n'avais pas pour objectif primaire de faire la démonstration puis suite à des demandes de participants voici une exemple de configuration. Après tous la formation elle est pour **VOUS** :D !!

Le protocole [webdav](http://www.webdav.org/) permet de réaliser du transfert de fichier, il existe plusieurs client pour toutes les plateformes , nous verrons la possibilité de __mounté__ le système de fichier sous Linux. Mettons en place la configuration puis nous analyserons ensemble la configuration . 

Nous allons activer 2 modules **mod\_dav** et **mod\_dav\_fs** , 2 méthodes pour réaliser l'opération la réalisation des liens symbolique manuellement ou l'utilisation de la commande **a2enmod**.

        $ sudo a2enmod dav
          Enabling module dav.
          To activate the new configuration, you need to run:
            service apache2 restart
        $ sudo a2enmod dav_fs
        Considering dependency dav for dav_fs:
          Module dav already enabled
          Enabling module dav_fs.
          To activate the new configuration, you need to run:
            service apache2 restart

Maintenant nous allons modifier la configuration du __siteA__ afin de pouvoir utiliser le répertoire __/webdav__ comme répertoire de stockage . Voici le contenu à ajouter :

        <Directory /data/vhosts/siteA/docroot/webdav/>
            Dav On
        </Directory>

**WOwww** magie :D, validons tous de même peut-être que je vous ment :P, ça semble trop facile ... Créons un fichier dans le répertoire __/data/vhosts/siteA/docroot/webdav/__

        $ cat /data/vhosts/siteA/docroot/webdav/toto
        super fichier dans webdav

Si vous accédez à l'URL : https://www.linux202-sitea.com/webdav/ , vous aurez quelques chose qui ressemble à ceci , vous pouvez cliquez sur le fichier __toto__ et voir son contenu :

![webdav_simple-step1.png](./imgs/webdav_simple-step1.png)

Ceci est bien pratique pour offrir du contenu mais pourquoi mettre en place un __webdav__ alors que l'on peut aussi afficher le contenu avec apache sans avoir la couche **webdav** . L'intérêt réside principalement lors de la manipulation de fichier d'écriture et modification , ou la synchronisation de contenu. Voyons le tous avec un client pour nous permettre l'écriture... 


## <a name="mod_webdav-client" /> Client webdav sous GNU/Linux

Il existe plusieurs client sur internet, ici je ne couvrirais que ceux qui sont libre bien entendu :P, commençons par celui que j'utilise principalement soit l'accès avec un point de montage . L'avantage principale de cette solution est de me permettre d'avoir accès au fichier comme si c'était des fichiers locaux. 

Nous avons besoin du logiciel **davfs2** , sous __Ubuntu__ :

        $ sudo apt-get install davfs2

Par la suite nous montons le __webdav__ comme si c'était un périphérique :

        $ sudo mkdir /mnt/dav
        $  sudo mount.davfs https://www.linux202-sitea.com/webdav/ /mnt/dav/
        [sudo] password for xerus:
        Please enter the username to authenticate with server
        https://www.linux202-sitea.com/webdav/ or hit enter for none.
          Username:
        Please enter the password to authenticate user  with server
        https://www.linux202-sitea.com/webdav/ or hit enter for none.
          Password:
        mount.davfs: the server certificate is not trusted
        issuer:      training, X3rus, Montreal, Quebec, CA
        subject:     training, X3rus, Montreal, Quebec, CA
        identity:    www.linux202-sitea.com
        fingerprint: e5:5c:6b:4f:c3:0b:62:9a:55:49:6d:ab:4b:5d:54:c7:16:2b:bd:5d
        You only should accept this certificate, if you can
        verify the fingerprint! The server might be faked
        or there might be a man-in-the-middle-attack.
        Accept certificate for this session? [y,N] y


Nous pouvons à présent lister le contenu du répertoire et voir le fichier __toto__ :

        $ ls -ld /mnt/dav/
        drwxr-xr-x 3 root root 104 May 31 17:19 /mnt/dav/
        $ ls -l /mnt/dav/
        total 1
        drwx------ 2 root root  0 May 31 17:08 lost+found
        -rw-r--r-- 1 root root 26 May 31 08:46 toto
        $ cat /mnt/dav/toto
        super fichier dans webdav

Réalisons une écriture d'un fichier !!! 

        $ touch /mnt/dav/titi
        touch: cannot touch ‘/mnt/dav/titi’: Permission denied
        $ mkdir /mnt/dav/rep
        mkdir: cannot create directory ‘/mnt/dav/rep’: Permission denied

Une idée de la source du problème ?? 
Si nous regardons les permissions assigné au répertoire **/mnt/dav** il n'est pas possible d'écrire dans le répertoire localement car ce dernier est propriété de __root__ . Nous allons modifier la configuration afin de permettre au groupe __users__d'écrire dans ce dernier, groupe dont je fait partie.

        $ ls -ld /mnt/dav/
        drwxr-xr-x 3 root root 104 May 31 17:19 /mnt/dav/
        $ sudo chown :users /mnt/dav
        $ sudo chmod g+w /mnt/dav
        $ ls -ld /mnt/dav
        drwxrwxr-x 3 root users 104 May 31 17:19 /mnt/dav/

Recommençons à présent !

        $ touch /mnt/dav/titi
        touch: cannot touch ‘/mnt/dav/titi’: Input/output error

**COOL** , vous me direz pourquoi cool ?!? Car nous n'avons pas le même message nous avançons donc vers la solution :D, le chemin vers la solution est rarement direct ;-).

Je propose de regarder les logs sur le serveur et de refaire la même opération :

        $ tail -f /data/vhosts/siteA/logs/ssl_error.log
        [ ... OUTPUT COUPÉ ... ]
        [Tue May 31 17:26:19.965651 2016] [dav:error] [pid 62] [client 172.17.42.1:47400] Could not save .locknull file.  [500, #0]
        [Tue May 31 17:26:19.965726 2016] [dav:error] [pid 62] (2)No such file or directory: [client 172.17.42.1:47400] Error opening /data/vhosts/siteA/docroot/webdav/.DAV/.locknull for writing  [500, #0]


Nous voyons bien des erreurs qui provienne du modules **dav** , le message indique qu'il n'a pas pu écrire le fichier de verrou (__lock__) dans le répertoire : __/data/vhosts/siteA/docroot/webdav/.DAV/__. Regardons les permissions du répertoires :

        $  ls -ld /data/vhosts/siteA/docroot/webdav/.DAV/
        ls: cannot access /data/vhosts/siteA/docroot/webdav/.DAV/: No such file or directory
        $ ls -ld /data/vhosts/siteA/docroot/webdav/
        drwxr-xr-x 2 root root 4096 May 31 17:19 /data/vhosts/siteA/docroot/webdav/

Donc le répertoire **.DAV** n'est pas présent si nous regardons un niveau plus haut le répertoire **webdav** uniquement l'utilisateur __root__ peut écrire dans le répertoire. Lorsque nous communiquons avec le système de __webdav__ l'ensemble des communication transige par le service apache. Telle que mentionné dans des cours précédent le processus d'apache n'est pas exécuté sous l'usager __root__ afin de limité les opérations possible par le site web , surtout si ce dernier est compromit. Validons l'utilisateur qui exécute le service apache.

        $ $ ps aux | grep apach
        root        55  0.0  0.9  90412 19440 ?        Ss   17:04   0:00 /usr/sbin/apache2 -k start
        www-data    60  0.0  0.5  90652 10956 ?        S    17:04   0:00 /usr/sbin/apache2 -k start
        www-data    61  0.0  0.4  90544  9400 ?        S    17:04   0:00 /usr/sbin/apache2 -k start
        www-data    62  0.0  0.5  90652 11108 ?        S    17:04   0:00 /usr/sbin/apache2 -k start
        www-data    63  0.0  0.5  90660 11376 ?        S    17:04   0:00 /usr/sbin/apache2 -k start
        www-data    64  0.0  0.5  90652 11424 ?        S    17:04   0:00 /usr/sbin/apache2 -k start
        www-data    78  0.0  0.4  90544  9400 ?        S    17:05   0:00 /usr/sbin/apache2 -k start
        www-data    90  0.0  0.2  90444  5472 ?        S    17:09   0:00 /usr/sbin/apache2 -k start

Dans notre cas l'utilisateur est **www-data**, je vais donc ajuster la configuration afin de permettre à ce dernier d'écrire dans le répertoire. 

        $ sudo chown www-data /data/vhosts/siteA/docroot/webdav/
        $ ls -ld /data/vhosts/siteA/docroot/webdav/
        drwxr-xr-x 2 www-data root 4096 May 31 17:19 /data/vhosts/siteA/docroot/webdav/

C'est l'occasion de refaire un teste :

        $ touch /mnt/dav/titi
        $ ls -l /mnt/dav/titi
        -rw-r--r-- 1 xerus xerus  0 May 31 17:36 titi

**Cool** regardons le résultat sur le serveur 

        $ ls -l /data/vhosts/siteA/docroot/webdav
        total 4
        -rw-r--r-- 1 www-data www-data  0 May 31 17:37 titi
        -rw-r--r-- 1 root     root     26 May 31 08:46 toto


Nous voyons les permissions sur le serveur appartienne à l'utilisateur qui à écrit le fichier donc le processus **apache** soit l'utilisateur **www-data** dans notre cas.

TODO : Voir avec nautilus !!

## <a name="mod_webdav-securisation" /> Sécuriser son webdav 

Ceci est vraiment intéressant, mais je doute que vous désirez mettre en place un lieu de stockage sur internet libre à tous le monde de transférer des données. Vous désirez fort probablement pouvoir protéger vos données et ceux de vos collaborateur. J'en profite pour souligner l'importance de réaliser la configuration avec une communication **httpS** afin que lors de l'échange du nom d'utilisateur / mot de passe ces derniers soit chiffrés.


Afin de réaliser la démonstration de la mise en place de la sécurisation je vais faire la création de répertoire et fichier sous le répertoire **webdav** :

        $ cd /data/vhosts/siteA/docroot/webdav
        $ sudo mkdir -p commun   devs   marketing   marketing/campagne_GPL   marketing/campagne_FSF   finance   finance/super_secret
        $ sudo touch commun/activites_pour_nowel   commun/le_footgolf   devs/pourquoi_les_licences_c_important   devs/les_bases_de_python   marketing/campagne_GPL/copyleft_est_un_copyright   marketing/campagne_GPL/la_licence_c_important   marketing/campagne_FSF/Le_libre_pour_tous   marketing/campagne_FSF/Le_libre_c_pour_TOI   marketing/campagne_FSF/Le_libre_c_mieux   marketing/campagne_future_a_planifier   finance/benefice   finance/client_prospect   finance/client   finance/super_secret/lettre_de_recouvrement_de_la_banque   finance/super_secret/compte_au_panama

Ce qui donne ceci :

        $ ls -1R
        ./commun:
        activites_pour_nowel
        le_footgolf

        ./devs:
        les_bases_de_python
        pourquoi_les_licences_c_important

        ./finance:
        benefice
        client
        client_prospect
        super_secret

        ./finance/super_secret:
        compte_au_panama
        lettre_de_recouvrement_de_la_banque

        ./marketing:
        campagne_FSF
        campagne_GPL
        campagne_future_a_planifier

        ./marketing/campagne_FSF:
        Le_libre_c_mieux
        Le_libre_c_pour_TOI
        Le_libre_pour_tous

        ./marketing/campagne_GPL:
        copyleft_est_un_copyright
        la_licence_c_important


Nous allons réutiliser ce que nous avons appris plus tôt avec la limitation avec authentification et la gestion d'accès par groupe. Avant de mettre en place la limitation nous allons définir notre stratégie par groupe :

* toutes personnes authentifier peut accéder à la section **commun**
* le groupe DEVS peut accéder à la section **devs**
* le groupe FINANCE peut accéder à la section **finance** mais pas le répertoire **super\_secret**
* le groupe FINANCE\_CA peut accéder à la section **finance** ainsi que le répertoire **super\_secret**
* le groupe MARKETING peut accéder à la section **marketing**

Nous allons donc faire la création des groupes et utilisateurs :


        $ cat /data/vhosts/siteA/privates/.htpasswd-admin
        admin:$apr1$U8mylBZo$3aAVkmX.CkWpuwsx7/HT80

        $ cat /data/vhosts/siteA/privates/htgroupe
        [ ... OUTPUT COUPÉ ... ]
        DEVS: bob robert bonny
        FINANCES: lee peter perry nesta
        FINANCES_CA: perry nesta
        MARKETING: dj-foot wailers

        $ LST_USERS=$(cat /data/vhosts/siteA/privates/htgroupe | grep ^[A-Z] | cut -d ":" -f 2 | tr -s " " "\n" | sort | uniq )
        $ for user in $LST_USERS ; do echo "le_mot_de_passe" | sudo htpasswd -i /data/vhosts/siteA/privates/.htpasswd-admin  $user ; done
        Adding password for user bob
        Adding password for user bonny
        Adding password for user dj-foot
        Adding password for user lee
        Adding password for user nesta
        Adding password for user perry
        Adding password for user peter
        Adding password for user robert
        Adding password for user wailers 
        $ cat .htpasswd-admin 
        admin:$apr1$U8mylBZo$3aAVkmX.CkWpuwsx7/HT80
        bob:$apr1$W.1roeGD$aLq8NNfz.XEpbrtZ.LEdu.
        bonny:$apr1$4BxK5D3a$ludP1cVjXYyJ5WN/5cyQa0
        dj-foot:$apr1$BmNukD9R$mYXNIPMNgYHV2IwnRr/lO0
        lee:$apr1$IobzpSiP$QAk5sntB/I/o5ebasxNBE.
        nesta:$apr1$WBLpPKWv$wu8AXh9xo4xNWUkkzzWHe0
        perry:$apr1$DoWpviXH$Mt3iVvf/4/huSdumjnsqx0
        peter:$apr1$SkCasVdW$4IgS2L3TvHPxdN4NUJICS1
        robert:$apr1$YS.v9LIw$z/Uc4cA/REfZ1QqWUZlLI.
        wailers:$apr1$ZuDB1LPB$DYcrun7qhjyxY6mX326Fq/


Voilà nous avons donc maintenant l'ensemble de nos groupes de créés ainsi que nos utilisateurs avec le même mot de passe mais pour les besoins de la démonstration pas besoin de plus . Ceci ma aussi permet de montrer comment automatiser via un script la création / assignation de mot de passe avec la commande **htpasswd**.


Mettons en place la nouvelle configuration pour le site web et nous allons réaliser quelque essaye :

        $  cat /etc/apache2/sites-enabled/siteA-ssl.conf
        [ ... OUTPUT COUPÉ ... ]
        ################
        # Setup WEBDAV #
        ################
        <Directory /data/vhosts/siteA/docroot/webdav/>
            Dav On

            #  Section d'authentification
            AuthType Basic
            AuthName "Authentication Required"
            AuthUserFile "/data/vhosts/siteA/privates/.htpasswd-admin"
            AuthGroupFile "/data/vhosts/siteA/privates/htgroupe"
            Require valid-user
         </Directory>
                                                                                                                                       <Directory /data/vhosts/siteA/docroot/webdav/devs>
            Require group DEVS
         </Directory>
         <Directory /data/vhosts/siteA/docroot/webdav/finance>
            Require group FINANCES
         </Directory>
         <Directory /data/vhosts/siteA/docroot/webdav/finance/super_secret>
            Require group FINANCES_CA
         </Directory>
         <Directory /data/vhosts/siteA/docroot/webdav/marketing/>
            Require group MARKETING
         </Directory>
        [ ... OUTPUT COUPÉ ... ]


C'est le temps d'expliquer un peu le contenu , pour la racine du **webdav** je définie l'authentification avec le fichier de mot de passe et celui contenant la liste des membres des groupes. Dans cette section je définie que tous le monde peu avoir accès grâce  à l'instruction **Require valid-user**. Avec cette configuration toute personne authentifier aura accès aux fichiers à la racine du __webdav__ ainsi que **tous** les sous répertoires !!
Par la suite je définie des limitations par répertoire , que ce soit pour les **devs** , les **finances** , etc. Chaque répertoire est limité par groupe, l'avantage de cette méthode est qu'il n'y a pas répétition des instructions d'authentification ceci aide la visibilité et la gestion dans le temps :D.

Voyons maintenant le résultat de cette configuration , je vais établir une connexion avec l'utilisateur : **bob** ce dernier n'est membre que du groupe **DEVS** . Accédons à l'URL : https://www.linux202-sitea.com/webdav/

Voici ce que l'on voit : 

![webdav_auth_multi-group.png](./imgs/webdav_auth_multi-group.png)

Suite à l'authentification avec succès nous voyons bien les fichier __titi__ et __toto__ à la racine  ainsi que le répertoire **commun**. Comme l'utilisateur est membre du groupe **DEVS** il voit aussi le répertoire **devs** mais PAS les autres répertoires dont il n'a pas les autorisations ! 

Si je réalise la même opérations avec un point de montage **GNU/Linux**, la vue est un peu différente

        $ sudo mount.davfs https://www.linux202-sitea.com/webdav/ /mnt/dav/
        Please enter the username to authenticate with server
        https://www.linux202-sitea.com/webdav/ or hit enter for none.
          Username: bob 
        Please enter the password to authenticate user bob with server
        https://www.linux202-sitea.com/webdav/ or hit enter for none.
          Password:  

        $ ls -l /mnt/dav/
        total 2
        drwxr-xr-x 2 root  root   0 Jun  1 08:54 commun
        drwxr-xr-x 2 root  root   0 Jun  1 08:53 devs
        drwxr-xr-x 2 root  root  64 Jun  1 08:52 finance
        drwx------ 2 root  root   0 May 31 17:08 lost+found
        drwxr-xr-x 2 root  root  64 Jun  1 08:51 marketing
        -rw-r--r-- 1 xerus xerus  0 May 31 17:37 titi
        -rw-r--r-- 1 root  root  26 May 31 08:46 toto

        $ ls -l /mnt/dav/finance/
        total 0
        $ ls -l /mnt/dav/devs/
        total 0
        -rw-r--r-- 1 root root 0 Jun  1 08:53 les_bases_de_python
        -rw-r--r-- 1 root root 0 Jun  1 08:53 pourquoi_les_licences_c_important
        $ ls -l /mnt/dav/marketing/
        total 0

Donc lors de l'accès avec un point de montage les répertoires à la racine sont visible mais le contenu est vide ! Ceci est vraiment un détail mais ce doit être pris en considération selon la situation. 
Vous pourrez faire les testes avec les autres utilisateurs ... :D.

## <a name="mod_webdav-securisation_granulaire" /> Sécuriser son webdav pour chaque opération

Il est possible d'y allé de manière plus granulaire, bien entendu plus nous y allons de manière granulaire plus la gestion peut devenir compliqué. C'est à vous de faire le bon choix et d'être en mesure de changé d'avis si vous constater que la première option n'était pas la bonne :D.

Dans l'exemple ci-dessus nous limitons l'accès par répertoire, cependant une fois que la personne à accès au répertoire il peut réalisé l'ensemble des opérations ( Écrire, Supprimer , Copier , Lire , ... ). Comme l'ensemble des opérations sous réalisé à travers le processus Apache il n'est pas possible de limité les accès via le système de fichier. Alors comment faire pour offrir un accès en lecture seul et ne permettre que certain type d'opération.

TODO: changer les liens pour les avoir en Francais 

C'est l'occasion de voir une autre instruction [Limit](https://httpd.apache.org/docs/2.4/mod/core.html#limit) et [LimitExcept](https://httpd.apache.org/docs/2.4/mod/core.html#limitexcept)

### <a name="mod_webdav-securisation_limitation" /> Limiter l'utilisation du service webdav 

TODO : 
http://www.webdav.org/mod_dav/install.html

 mod_dav will parse XML request bodies into memory. It would be a very effective "Denial of Service" attach to send a large request body at a mod_dav server. Apache defines a directive named LimitRequestBody which will limit all methods' request bodies. Unfortunately, this is not an effective mechanism for a mod_dav server since large PUT operations should be allowed.

 To limit just the methods that have an XML request body, mod_dav defines the LimitXMLRequestBody directive. The default for this value is a compile-time constant, which is set to one million (1000000) bytes in the standard distribution. Setting the value to zero (0) will disable the size limit. 

* Référence :

    * https://httpd.apache.org/docs/2.4/fr/mod/mod\_dav.html

# <a name="performance" /> Performance et analyse d'apache

# <a name="compilation_module" /> Compilation d'un modules apache (a valider)

https://httpd.apache.org/docs/2.4/developer/modguide.html

# <a name="Reference" /> Référence :

* [Documentation Apache 2.4](https://httpd.apache.org/docs/2.4/) : https://httpd.apache.org/docs/2.4/
* [Liste des code d'état du protocole http](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes): https://en.wikipedia.org/wiki/List_of_HTTP_status_codes
* http://httpd.apache.org/docs/current/fr/howto/auth.html



